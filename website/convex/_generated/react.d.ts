/* eslint-disable */
/**
 * Generated React hooks.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@0.2.0.
 * To regenerate, run `npx convex codegen`.
 * @module
 */

import type {
  ApiFromModules,
  OptimisticLocalStore as GenericOptimisticLocalStore,
} from "convex/browser";
import type {
  UseQueryForAPI,
  UseMutationForAPI,
  UseConvexForAPI,
} from "convex/react";

/**
 * A type describing your app's public Convex API.
 *
 * This `ConvexAPI` type includes information about the arguments and return
 * types of your app's query and mutation functions.
 *
 * This type should be used with type-parameterized classes like
 * `ConvexReactClient` to create app-specific types.
 */
export type ConvexAPI = ApiFromModules<{}>;

/**
 * Load a reactive query within a React component.
 *
 * This React hook contains internal state that will cause a rerender whenever
 * the query result changes.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @param name - The name of the query function.
 * @param args - The arguments to the query function.
 * @returns `undefined` if loading and the query's return value otherwise.
 */
export declare const useQuery: UseQueryForAPI<ConvexAPI>;

/**
 * Construct a new {@link ReactMutation}.
 *
 * Mutation objects can be called like functions to request execution of the
 * corresponding Convex function, or further configured with
 * [optimistic updates](https://docs.convex.dev/using/optimistic-updates).
 *
 * The value returned by this hook is stable across renders, so it can be used
 * by React dependency arrays and memoization logic relying on object identity
 * without causing rerenders.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @param name - The name of the mutation.
 * @returns The {@link ReactMutation} object with that name.
 */
export declare const useMutation: UseMutationForAPI<ConvexAPI>;

/**
 * Get the {@link ConvexReactClient} within a React component.
 *
 * This relies on the {@link ConvexProvider} being above in the React component tree.
 *
 * @returns The active {@link ConvexReactClient} object, or `undefined`.
 */
export declare const useConvex: UseConvexForAPI<ConvexAPI>;

/**
 * A view of the query results currently in the Convex client for use within
 * optimistic updates.
 */
export type OptimisticLocalStore = GenericOptimisticLocalStore<ConvexAPI>;
