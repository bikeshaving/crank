
		
		import type {
			JSXAttributeValue
		} from './utilities';

		/**
		 * Web Standards JSX Types
		 *
		 * Comprehensive, specification-driven TypeScript types for JSX DOM elements.
		 * Exports utilities that frameworks can use to build their own JSX types
		 * with framework-specific customizations.
		 *
		 * Auto-generated by combining:
		 * - MDN Browser Compatibility Data (BCD)
		 * - TypeScript DOM type definitions
		 * - WAI-ARIA specification
		 *
		 * @see https://github.com/mdn/browser-compat-data
		 * @see https://github.com/microsoft/TypeScript
		 * @see https://github.com/jamiebuilds/aria-data
		 */
	

		import type { DOMEventMap } from './event-map.generated';
		export type { DOMEventMap };

		
		/**
		 * Comprehensive ARIA Attribute Types
		 *
		 * Auto-generated from the official WAI-ARIA 1.1 specification using aria-data.
		 * Provides strongly typed ARIA attributes with proper value constraints and documentation.
		 *
		 * @see https://www.w3.org/TR/wai-aria-1.1/
		 * @see https://github.com/jamiebuilds/aria-data
		 */
		export interface ARIAAttributes {
			
  /**  Indicates that the element is not editable, but is otherwise operable. See related aria-disabled. */
	"aria-readonly"?: "false" | "true";

  /** Defines a human-readable, author-localized description for the role of an element. */
	"aria-roledescription"?: string;

  /** Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format. */
	"aria-placeholder"?: string;

  /** Defines a string value that labels the current element. See related aria-labelledby. */
	"aria-label"?: string;

  /** Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan. */
	"aria-colindex"?: number | string;

  /** Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize. */
	"aria-posinset"?: number | string;

  /** Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan. */
	"aria-rowindex"?: number | string;

  /** Defines the current value for a range widget. See related aria-valuetext. */
	"aria-valuenow"?: number | string;

  /** Defines the hierarchical level of an element within a structure. */
	"aria-level"?: number | string;

  /** Defines the human readable text alternative of aria-valuenow for a range widget. */
	"aria-valuetext"?: string;

  /** Defines the maximum allowed value for a range widget. */
	"aria-valuemax"?: number | string;

  /** Defines the minimum allowed value for a range widget. */
	"aria-valuemin"?: number | string;

  /** Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan. */
	"aria-colspan"?: number | string;

  /** Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset. */
	"aria-setsize"?: number | string;

  /** Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan. */
	"aria-rowspan"?: number | string;

  /** Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex. */
	"aria-colcount"?: number | string;

  /** Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex. */
	"aria-rowcount"?: number | string;

  /** Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls. */
	"aria-owns"?: string;

  /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
	"aria-activedescendant"?: string;

  /** Identifies the element (or elements) that describes the object. See related aria-labelledby. */
	"aria-describedby"?: string;

  /** Identifies the element (or elements) that labels the current element. See related aria-describedby. */
	"aria-labelledby"?: string;

  /** Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns. */
	"aria-controls"?: string;

  /** Identifies the element that provides a detailed, extended description for the object. See related aria-describedby. */
	"aria-details"?: string;

  /** Identifies the element that provides an error message for the object.  See related aria-invalid and aria-describedby.  */
	"aria-errormessage"?: string;

  /** Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order. */
	"aria-flowto"?: string;

  /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
	"aria-busy"?: "false (default):" | "true";

  /** Indicates if items in a table or grid are sorted in ascending or descending order. */
	"aria-sort"?: "ascending" | "descending" | "none" | "other";

  /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
	"aria-keyshortcuts"?: string;

  /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
	"aria-live"?: "assertive" | "off" | "polite";

  /** Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly. */
	"aria-disabled"?: "false" | "true";

  /** Indicates that the user may select more than one item from the current selectable descendants. */
	"aria-multiselectable"?: "false" | "true";

  /** Indicates that user input is required on the element before a form may be submitted. */
	"aria-required"?: "false" | "true";

  /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
	"aria-haspopup"?: "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";

  /** Indicates the current "checked" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected. */
	"aria-checked"?: "false" | "mixed" | "true" | "undefined";

  /** Indicates the current "pressed" state of toggle buttons. See related aria-checked and aria-selected. */
	"aria-pressed"?: "false" | "mixed" | "true" | "undefined";

  /** Indicates the current "selected" state of various widgets. See related aria-checked and aria-pressed. */
	"aria-selected"?: "false" | "true" | "undefined";

  /** Indicates the element that represents the current item within a container or set of related elements. */
	"aria-current"?: "page" | "step" | "location" | "date" | "time" | "true" | "false";

  /** Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage. */
	"aria-invalid"?: "grammar" | "false" | "spelling" | "true";

  /** Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic. */
	"aria-relevant"?: "additions" | "additions text" | "all" | "removals" | "text";

  /** Indicates whether a text box accepts multiple lines of input or only a single line. */
	"aria-multiline"?: "false" | "true";

  /** Indicates whether an element is modal when displayed. */
	"aria-modal"?: "false" | "true";

  /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
	"aria-atomic"?: "false" | "true";

  /** Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made. */
	"aria-autocomplete"?: "inline" | "list" | "both" | "none";

  /** Indicates whether the element is exposed to an accessibility API. See related aria-disabled. */
	"aria-hidden"?: "false" | "true" | "undefined";

  /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
	"aria-orientation"?: "horizontal" | "undefined" | "vertical";

  /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
	"aria-expanded"?: "false" | "true" | "undefined";

  /** [Deprecated in ARIA 1.1] Indicates an element's "grabbed" state in a drag-and-drop operation. */
	"aria-grabbed"?: "false" | "true" | "undefined";

  /** [Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target. */
	"aria-dropeffect"?: "copy" | "execute" | "link" | "move" | "none" | "popup";
		}
	
		
		/**
		 * HTML5 Microdata attributes for structured data
		 * @see https://html.spec.whatwg.org/multipage/microdata.html
		 */
		export interface MicrodataAttributes {
			/** Properties that are not descendants of an element with the itemscope attribute can be associated with the item using an itemref. itemref provides a list of element ids (not itemids) with additional properties elsewhere in the document. */
itemref?: JSXAttributeValue;
/** Specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure. The itemscope attribute is used to set the scope of where in the data structure the vocabulary set by itemtype will be active. */
itemtype?: JSXAttributeValue;
/** The itemscope attribute (usually) works along with itemtype to specify that the HTML contained in a block is about a particular item. The itemscope attribute creates the Item and defines the scope of the itemtype associated with it. The itemtype attribute is a valid URL of a vocabulary (such as schema.org) that describes the item and its properties context. */
itemscope?: JSXAttributeValue;
/** The unique, global identifier of an item. */
itemid?: JSXAttributeValue;
/** Used to add properties to an item. Every HTML element may have an itemprop attribute specified, where an itemprop consists of a name and value pair. */
itemprop?: JSXAttributeValue;
		}
	
		
		/**
		 * RDFa attributes for semantic markup
		 * @see https://www.w3.org/TR/html-rdfa/
		 */
		export interface RDFaAttributes {
			/** An attribute used to indicate that the object associated with a rel or property attribute on the same element is to be added to the list for that predicate. The value of this attribute MUST be... */
inlist?: JSXAttributeValue;
/** a CDATA string, for supplying machine-readable content for a literal (a 'literal object', in RDF terminology); */
content?: JSXAttributeValue;
/** a SafeCURIEorCURIEorIRI for expressing the partner resource of a relationship that is not intended to be navigable (e.g., a 'clickable' link) (also an 'object'); */
resource?: JSXAttributeValue;
/** a SafeCURIEorCURIEorIRI, used for stating what the data is about (a 'subject' in RDF terminology); */
about?: JSXAttributeValue;
/** a TERMorCURIEorAbsIRI representing a datatype, to express the datatype of a literal; */
datatype?: JSXAttributeValue;
/** a white space separated list of TERMorCURIEorAbsIRIs that indicate the RDF type(s) to associate with a subject; */
typeof?: JSXAttributeValue;
/** a white space separated list of TERMorCURIEorAbsIRIs, used for expressing relationships between a subject and either a resource object if given or some literal text (also a 'predicate'); */
property?: JSXAttributeValue;
/** a white space separated list of TERMorCURIEorAbsIRIs, used for expressing relationships between two resources ('predicates' in RDF terminology); */
rel?: JSXAttributeValue;
/** a white space separated list of TERMorCURIEorAbsIRIs, used for expressing reverse relationships between two resources (also 'predicates'); */
rev?: JSXAttributeValue;
/** a white space separated list of prefix-name IRI pairs of the form NCName ':' ' '+ xsd:anyURI */
prefix?: JSXAttributeValue;
/** an IRI that defines the mapping to use when a TERM is referenced in an attribute value. See General Use of Terms in Attributes and the section on Vocabulary Expansion. */
vocab?: JSXAttributeValue;
		}
	
		/**
		 * XML attributes for XML-compatible markup
		 * @see https://www.w3.org/TR/xml/#sec-starttags
		 */
		export interface XMLAttributes {
			/** Standard XML namespace declaration */
			xmlns?: JSXAttributeValue;
			/** XML namespace declaration for specific prefixes */
			[key: `xmlns:${string}`]: JSXAttributeValue;
			/** XML language identifier */
			"xml:lang"?: JSXAttributeValue;
			/** XML space handling */
			"xml:space"?: "default" | "preserve";
			/** XML base URI */
			"xml:base"?: JSXAttributeValue;
			/** XML identifier */
			"xml:id"?: JSXAttributeValue;
		}
		/**
		 * Global attributes available on all elements
		 * Combines XML, ARIA, Microdata, and RDFa attributes
		 */
		export interface GlobalAttributes extends XMLAttributes, ARIAAttributes, MicrodataAttributes, RDFaAttributes {
			/** Custom data attributes */
			[key: `data-${string}`]: JSXAttributeValue;
		}
		
			export interface HTMLAttributes extends GlobalAttributes {
				/**
 * The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element.
 * @example
 * <p>
 *   If you need to relax, press the
 *   <b>S</b>
 *   tress reliever!
 * </p>
 * <button accesskey="s">Stress reliever</button>
 */
accesskey: JSXAttributeValue;
				/**
 * The anchor global attribute is used to associate a positioned element with an anchor element.
 * @example
 * <input type="button" />
 * @experimental
 */
anchor: JSXAttributeValue;
				/**
 * The autocapitalize global attribute is an enumerated attribute that controls whether inputted text is automatically capitalized and, if so, in what manner.
 * @example
 * <input type="button" />
 */
autocapitalize: JSXAttributeValue;
				/**
 * The autocorrect global attribute is an enumerated attribute that controls whether autocorrection of editable text is enabled for spelling and/or punctuation errors.
 * @example
 * <label for="vegetable">A vegetable:</label>
 * <input
 *   id="vegetable"
 *   name="vegetable"
 *   type="text"
 *   autocorrect="on"
 * />
 * 
 * <label for="fruit">A fruit:</label>
 * <input
 *   id="fruit"
 *   name="fruit"
 *   type="text"
 *   autocorrect="off"
 * />
 */
autocorrect: JSXAttributeValue;
				/**
 * The autofocus global attribute is a Boolean attribute indicating that an element should be focused on page load, or when the <dialog> that it is part of is displayed.
 * @example
 * <input name="q" autofocus />
 */
autofocus: JSXAttributeValue;
				/**
 * The class global attribute is a list of the classes of the element, separated by ASCII whitespace.
 * @example
 * <p>Narrator: This is the beginning of the play.</p>
 * 
 * <p class="note editorial">
 *   Above point sounds a bit obvious. Remove/rewrite?
 * </p>
 * 
 * <p>
 *   Narrator: I must warn you now folks that this beginning is
 *   very exciting.
 * </p>
 * 
 * <p class="note">
 *   [Lights go up and wind blows; Caspian enters stage right]
 * </p>
 */
class: JSXAttributeValue;
				/**
 * The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user.
 * @example
 * <blockquote contenteditable="true">
 *   <p>Edit this content to add your own quote</p>
 * </blockquote>
 * 
 * <cite contenteditable="true">
 *   -- Write your own name here
 * </cite>
 */
contenteditable: JSXAttributeValue;
				/**
 * The dir global attribute is an enumerated attribute that indicates the directionality of the element's text.
 * @example
 * <p dir="rtl">
 *   This paragraph is in English but incorrectly goes right to
 *   left.
 * </p>
 * <p dir="ltr">
 *   This paragraph is in English and correctly goes left to
 *   right.
 * </p>
 * 
 * <hr />
 * 
 * <p>
 *   هذه الفقرة باللغة العربية ولكن بشكل خاطئ من اليسار إلى
 *   اليمين.
 * </p>
 * <p dir="auto">
 *   هذه الفقرة باللغة العربية ، لذا يجب الانتقال من اليمين إلى
 *   اليسار.
 * </p>
 */
dir: JSXAttributeValue;
				/**
 * The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, either with native browser behavior or the HTML Drag and Drop API.
 * @example
 * <input type="button" />
 */
draggable: JSXAttributeValue;
				/**
 * The enterkeyhint global attribute is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards.
 * @example
 * <input enterkeyhint="go" />
 * 
 * <p contenteditable enterkeyhint="go">https://example.org</p>
 */
enterkeyhint: JSXAttributeValue;
				/**
 * The exportparts global attribute allows you to select and style elements existing in nested shadow trees, by exporting their part names.
 * @example
 * <template id="ancestor-component">
 *   <nested-component
 *     exportparts="part1, part2, part5"
 *   ></nested-component>
 * </template>
 */
exportparts: JSXAttributeValue;
				/**
 * The hidden global attribute is an enumerated attribute indicating that the browser should not render the contents of the element.
 * @example
 * <span hidden>I'm hidden</span>
 * <span hidden="">I'm also hidden</span>
 * <span hidden="hidden">I'm hidden too!</span>
 * <span hidden="bananas">I'm equally as hidden!</span>
 */
hidden: JSXAttributeValue;
				/**
 * The id global attribute defines an identifier (ID) that must be unique within the entire document.
 * @example
 * <p>A normal, boring paragraph. Try not to fall asleep.</p>
 * 
 * <p id="exciting">
 *   The most exciting paragraph on the page. One of a kind!
 * </p>
 */
id: JSXAttributeValue;
				/**
 * The inert global attribute is a Boolean attribute indicating that the element and all of its flat tree descendants become inert.
 * @example
 * <input type="button" />
 */
inert: JSXAttributeValue;
				/**
 * The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents.
 * @example
 * <input type="button" />
 */
inputmode: JSXAttributeValue;
				/**
 * The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).
 * @example
 * <p is="word-count"></p>
 */
is: JSXAttributeValue;
				/**
 * The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user.
 * @example
 * <p>
 *   This paragraph is English, but the language is not
 *   specifically defined.
 * </p>
 * 
 * <p lang="en-GB">
 *   This paragraph is defined as British English.
 * </p>
 * 
 * <p lang="fr">Ce paragraphe est défini en français.</p>
 */
lang: JSXAttributeValue;
				/**
 * The nonce global attribute is a content attribute defining a cryptographic nonce ("number used once") which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element.
 * @example
 * <script nonce="8IBTHwOdqNKAWeKl7plt8g==">
 *   // …
 * </script>
 */
nonce: JSXAttributeValue;
				/**
 * The part global attribute contains a space-separated list of the part names of the element.
 * @example
 * <input type="button" />
 */
part: JSXAttributeValue;
				/**
 * The popover global attribute is used to designate an element as a popover element.
 * @example
 * <button popovertarget="my-popover">Open Popover</button>
 * 
 * <div popover id="my-popover">Greetings, one and all!</div>
 */
popover: JSXAttributeValue;
				/**
 * The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.
 * @example
 * <input type="button" />
 */
slot: JSXAttributeValue;
				/**
 * The spellcheck global attribute is an enumerated attribute that defines whether the element may be checked for spelling errors.
 * @example
 * <textarea spellcheck="true">
 * This exampull will be checkd fur spellung when you try to edit it.</textarea
 * >
 * 
 * <textarea spellcheck="false">
 * This exampull will nut be checkd fur spellung when you try to edit it.</textarea
 * >
 */
spellcheck: JSXAttributeValue;
				/**
 * The style global attribute contains CSS styling declarations to be applied to the element.
 * @example
 * <div style="background: #ffe7e8; border: 2px solid #e66465">
 *   <p
 *     style="
 *       margin: 15px;
 *       line-height: 1.5;
 *       text-align: center;
 *     "
 *   >
 *     Well, I am the slime from your video
 *     <br />
 *     Oozin' along on your livin' room floor.
 *   </p>
 * </div>
 */
style: JSXAttributeValue;
				/**
 * The tabindex global attribute allows developers to make HTML elements focusable, allow or prevent them from being sequentially focusable (usually with the Tab key, hence the name) and determine their relative ordering for sequential focus navigation.
 * @example
 * <p>
 *   Click anywhere in this pane, then try tabbing through the
 *   elements.
 * </p>
 * 
 * <label>
 *   First in tab order:
 *   <input type="text" />
 * </label>
 * 
 * <div tabindex="0">Tabbable due to tabindex.</div>
 * 
 * <div>Not tabbable: no tabindex.</div>
 * 
 * <label>
 *   Third in tab order:
 *   <input type="text" />
 * </label>
 */
tabindex: JSXAttributeValue;
				/**
 * The title global attribute contains text representing advisory information related to the element it belongs to.
 * @example
 * <p>
 *   Use the
 *   <code>title</code>
 *   attribute on an
 *   <code>iframe</code>
 *   to clearly identify the content of the
 *   <code>iframe</code>
 *   to screen readers.
 * </p>
 * 
 * <iframe
 *   title="Wikipedia page for the HTML language"
 *   src="https://en.m.wikipedia.org/wiki/HTML"
 * ></iframe>
 * <iframe
 *   title="Wikipedia page for the CSS language"
 *   src="https://en.m.wikipedia.org/wiki/CSS"
 * ></iframe>
 */
title: JSXAttributeValue;
				/**
 * The translate global attribute is an enumerated attribute that is used to specify whether an element's translatable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.
 * @example
 * <footer>
 *   <small>
 *     © 2020
 *     <span translate="no">BrandName</span>
 *   </small>
 * </footer>
 */
translate: JSXAttributeValue;
				/**
 * The virtualkeyboardpolicy global attribute is an enumerated attribute.
 * @example
 * <input type="button" />
 * @experimental
 */
virtualkeyboardpolicy: JSXAttributeValue;
				/**
 * The writingsuggestions global attribute is an enumerated attribute indicating if browser-provided writing suggestions should be enabled under the scope of the element or not.
 * @example
 * <input type="text" writingsuggestions="false" />
 */
writingsuggestions: JSXAttributeValue;
			}
		


					/* a attributes */
					export interface HTMLAnchorAttributes extends HTMLAttributes {
						/**
 * @experimental
 */
attributionsourceid: JSXAttributeValue;
					/**
 * @experimental
 */
attributionsrc: JSXAttributeValue;
					/**
 * @deprecated
 */
charset: JSXAttributeValue;
					/**
 * @deprecated
 */
coords: JSXAttributeValue;
					download: JSXAttributeValue;
					href: JSXAttributeValue;
					hreflang: JSXAttributeValue;
					/**
 * @experimental
 */
hreftranslate: JSXAttributeValue;
					/**
 * @deprecated
 */
name: JSXAttributeValue;
					ping: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					/**
 * The rel attribute defines the relationship between a linked resource and the current document.
 * @example
 * <!-- a persistent style sheet -->
 * <link rel="stylesheet" href="default.css" />
 * <!-- alternate style sheets -->
 * <link
 *   rel="alternate stylesheet"
 *   href="highcontrast.css"
 *   title="High contrast"
 * />
 */
rel: JSXAttributeValue;
					/**
 * @deprecated
 */
rev: JSXAttributeValue;
					/**
 * @deprecated
 */
shape: JSXAttributeValue;
					target: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* area attributes */
					export interface HTMLAreaAttributes extends HTMLAttributes {
						alt: JSXAttributeValue;
					/**
 * @experimental
 */
attributionsrc: JSXAttributeValue;
					coords: JSXAttributeValue;
					download: JSXAttributeValue;
					href: JSXAttributeValue;
					/**
 * @deprecated
 */
nohref: JSXAttributeValue;
					ping: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					/**
 * The rel attribute defines the relationship between a linked resource and the current document.
 * @example
 * <!-- a persistent style sheet -->
 * <link rel="stylesheet" href="default.css" />
 * <!-- alternate style sheets -->
 * <link
 *   rel="alternate stylesheet"
 *   href="highcontrast.css"
 *   title="High contrast"
 * />
 */
rel: JSXAttributeValue;
					shape: JSXAttributeValue;
					target: JSXAttributeValue;
					}
				
					/* audio attributes */
					export interface HTMLAudioAttributes extends HTMLAttributes {
						autoplay: JSXAttributeValue;
					controls: JSXAttributeValue;
					controlslist: JSXAttributeValue;
					/**
 * The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data.
 * @example
 * <script
 *   src="https://example.com/example-framework.js"
 *   crossorigin="anonymous"
 * ></script>
 */
crossorigin: JSXAttributeValue;
					disableremoteplayback: JSXAttributeValue;
					loop: JSXAttributeValue;
					muted: JSXAttributeValue;
					preload: JSXAttributeValue;
					src: JSXAttributeValue;
					}
				
					/* base attributes */
					export interface HTMLBaseAttributes extends HTMLAttributes {
						href: JSXAttributeValue;
					target: JSXAttributeValue;
					}
				
					/* blockquote attributes */
					export interface HTMLQuoteAttributes extends HTMLAttributes {
						cite: JSXAttributeValue;
					}
				
					/* body attributes */
					export interface HTMLBodyAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
alink: JSXAttributeValue;
					/**
 * @deprecated
 */
background: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
bottommargin: JSXAttributeValue;
					/**
 * @deprecated
 */
leftmargin: JSXAttributeValue;
					/**
 * @deprecated
 */
link: JSXAttributeValue;
					/**
 * @deprecated
 */
rightmargin: JSXAttributeValue;
					/**
 * @deprecated
 */
text: JSXAttributeValue;
					/**
 * @deprecated
 */
topmargin: JSXAttributeValue;
					/**
 * @deprecated
 */
vlink: JSXAttributeValue;
					}
				
					/* br attributes */
					export interface HTMLBRAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
clear: JSXAttributeValue;
					}
				
					/* button attributes */
					export interface HTMLButtonAttributes extends HTMLAttributes {
						/**
 * @experimental
 */
command: JSXAttributeValue;
					/**
 * @experimental
 */
commandfor: JSXAttributeValue;
					/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					form: JSXAttributeValue;
					formaction: JSXAttributeValue;
					formenctype: JSXAttributeValue;
					formmethod: JSXAttributeValue;
					formnovalidate: JSXAttributeValue;
					formtarget: JSXAttributeValue;
					name: JSXAttributeValue;
					popovertarget: JSXAttributeValue;
					popovertargetaction: JSXAttributeValue;
					type: JSXAttributeValue;
					value: JSXAttributeValue;
					}
				
					/* canvas attributes */
					export interface HTMLCanvasAttributes extends HTMLAttributes {
						height: JSXAttributeValue;
					/**
 * @deprecated
 */
"moz-opaque": JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* caption attributes */
					export interface HTMLTableCaptionAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					}
				
					/* col attributes */
					export interface HTMLTableColAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					span: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* colgroup attributes */
					export interface HTMLTableColAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					span: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* data attributes */
					export interface HTMLDataAttributes extends HTMLAttributes {
						value: JSXAttributeValue;
					}
				
					/* del attributes */
					export interface HTMLModAttributes extends HTMLAttributes {
						cite: JSXAttributeValue;
					datetime: JSXAttributeValue;
					}
				
					/* details attributes */
					export interface HTMLDetailsAttributes extends HTMLAttributes {
						name: JSXAttributeValue;
					open: JSXAttributeValue;
					}
				
					/* dialog attributes */
					export interface HTMLDialogAttributes extends HTMLAttributes {
						/**
 * @experimental
 */
closedby: JSXAttributeValue;
					open: JSXAttributeValue;
					}
				
					/* div attributes */
					export interface HTMLDivAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					}
				
					/* embed attributes */
					export interface HTMLEmbedAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					height: JSXAttributeValue;
					/**
 * @deprecated
 */
name: JSXAttributeValue;
					src: JSXAttributeValue;
					type: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* fieldset attributes */
					export interface HTMLFieldSetAttributes extends HTMLAttributes {
						/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					form: JSXAttributeValue;
					name: JSXAttributeValue;
					}
				
					/* form attributes */
					export interface HTMLFormAttributes extends HTMLAttributes {
						"accept-charset": JSXAttributeValue;
					action: JSXAttributeValue;
					/**
 * The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   name="firstName"
 *   id="firstName"
 *   type="text"
 *   autocomplete="given-name"
 * />
 * 
 * <label for="lastName">Last Name:</label>
 * <input
 *   name="lastName"
 *   id="lastName"
 *   type="text"
 *   autocomplete="family-name"
 * />
 * 
 * <label for="email">Email:</label>
 * <input
 *   name="email"
 *   id="email"
 *   type="email"
 *   autocomplete="off"
 * />
 */
autocomplete: JSXAttributeValue;
					enctype: JSXAttributeValue;
					method: JSXAttributeValue;
					name: JSXAttributeValue;
					novalidate: JSXAttributeValue;
					/**
 * The rel attribute defines the relationship between a linked resource and the current document.
 * @example
 * <!-- a persistent style sheet -->
 * <link rel="stylesheet" href="default.css" />
 * <!-- alternate style sheets -->
 * <link
 *   rel="alternate stylesheet"
 *   href="highcontrast.css"
 *   title="High contrast"
 * />
 */
rel: JSXAttributeValue;
					target: JSXAttributeValue;
					}
				
					/* head attributes */
					export interface HTMLHeadAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
profile: JSXAttributeValue;
					}
				
					/* hr attributes */
					export interface HTMLHRAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
color: JSXAttributeValue;
					/**
 * @deprecated
 */
noshade: JSXAttributeValue;
					/**
 * @deprecated
 */
size: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* html attributes */
					export interface HTMLHtmlAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
version: JSXAttributeValue;
					xmlns: JSXAttributeValue;
					}
				
					/* iframe attributes */
					export interface HTMLIFrameAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					allow: JSXAttributeValue;
					allowfullscreen: JSXAttributeValue;
					/**
 * @deprecated
 */
allowpaymentrequest: JSXAttributeValue;
					/**
 * @experimental
 */
browsingtopics: JSXAttributeValue;
					/**
 * @example
 * <iframe
 *   src="https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)"
 *   title="Spectre vulnerability Wikipedia page"
 *   width="960"
 *   height="600"
 *   credentialless
 * ></iframe>
 * @experimental
 */
credentialless: JSXAttributeValue;
					/**
 * @experimental
 */
csp: JSXAttributeValue;
					/**
 * @deprecated
 */
frameborder: JSXAttributeValue;
					height: JSXAttributeValue;
					loading: JSXAttributeValue;
					/**
 * @deprecated
 */
longdesc: JSXAttributeValue;
					/**
 * @deprecated
 */
marginheight: JSXAttributeValue;
					/**
 * @deprecated
 */
marginwidth: JSXAttributeValue;
					name: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					sandbox: JSXAttributeValue;
					/**
 * @deprecated
 */
scrolling: JSXAttributeValue;
					src: JSXAttributeValue;
					srcdoc: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* img attributes */
					export interface HTMLImageAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					alt: JSXAttributeValue;
					/**
 * @experimental
 */
attributionsrc: JSXAttributeValue;
					/**
 * @deprecated
 */
border: JSXAttributeValue;
					/**
 * The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data.
 * @example
 * <script
 *   src="https://example.com/example-framework.js"
 *   crossorigin="anonymous"
 * ></script>
 */
crossorigin: JSXAttributeValue;
					decoding: JSXAttributeValue;
					fetchpriority: JSXAttributeValue;
					height: JSXAttributeValue;
					/**
 * @deprecated
 */
hspace: JSXAttributeValue;
					ismap: JSXAttributeValue;
					loading: JSXAttributeValue;
					/**
 * @deprecated
 */
longdesc: JSXAttributeValue;
					/**
 * @deprecated
 */
name: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					sizes: JSXAttributeValue;
					src: JSXAttributeValue;
					srcset: JSXAttributeValue;
					usemap: JSXAttributeValue;
					/**
 * @deprecated
 */
vspace: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* input attributes */
					export interface HTMLInputAttributes extends HTMLAttributes {
						/**
 * The accept attribute takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.
 * @example
 * <label for="movie">Choose a movie to upload:</label>
 * 
 * <input
 *   type="file"
 *   id="movie"
 *   name="movie"
 *   accept="video/*"
 * />
 * 
 * <label for="poster">Choose a poster:</label>
 * 
 * <input
 *   type="file"
 *   id="poster"
 *   name="poster"
 *   accept="image/png, image/jpeg"
 * />
 */
accept: JSXAttributeValue;
					/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @experimental
 */
alpha: JSXAttributeValue;
					alt: JSXAttributeValue;
					/**
 * The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   name="firstName"
 *   id="firstName"
 *   type="text"
 *   autocomplete="given-name"
 * />
 * 
 * <label for="lastName">Last Name:</label>
 * <input
 *   name="lastName"
 *   id="lastName"
 *   type="text"
 *   autocomplete="family-name"
 * />
 * 
 * <label for="email">Email:</label>
 * <input
 *   name="email"
 *   id="email"
 *   type="email"
 *   autocomplete="off"
 * />
 */
autocomplete: JSXAttributeValue;
					/**
 * The capture attribute specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute.
 * @example
 * <label for="selfie">Take a picture of your face:</label>
 * 
 * <input
 *   type="file"
 *   id="selfie"
 *   name="selfie"
 *   accept="image/*"
 *   capture="user"
 * />
 * 
 * <label for="picture">
 *   Take a picture using back facing camera:
 * </label>
 * 
 * <input
 *   type="file"
 *   id="picture"
 *   name="picture"
 *   accept="image/*"
 *   capture="environment"
 * />
 */
capture: JSXAttributeValue;
					checked: JSXAttributeValue;
					/**
 * @experimental
 */
colorspace: JSXAttributeValue;
					/**
 * @example
 * <form action="page.html" method="post">
 *   <label>
 *     Fruit:
 *     <input
 *       type="text"
 *       name="fruit"
 *       dirname="fruit-dir"
 *       value="cherry"
 *     />
 *   </label>
 *   <input type="submit" />
 * </form>
 * <!-- page.html?fruit=cherry&fruit-dir=ltr -->
 */
dirname: JSXAttributeValue;
					/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					/**
 * The form attribute lets you place an input anywhere in the document but have it included with a form elsewhere in the document.
 */
form: JSXAttributeValue;
					formaction: JSXAttributeValue;
					formenctype: JSXAttributeValue;
					formmethod: JSXAttributeValue;
					formnovalidate: JSXAttributeValue;
					formtarget: JSXAttributeValue;
					/**
 * The value given to the list attribute should be the id of a <datalist> element located in the same document.
 */
list: JSXAttributeValue;
					/**
 * The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.
 * @example
 * <input type="button" />
 */
max: JSXAttributeValue;
					/**
 * The maxlength attribute defines the maximum string length that the user can enter into an <input> or <textarea>.
 * @example
 * <label for="name">Product name:</label>
 * <input
 *   id="name"
 *   name="name"
 *   type="text"
 *   value="Shampoo"
 *   minlength="3"
 *   maxlength="20"
 *   required
 * />
 * 
 * <label for="description">Product description:</label>
 * <textarea
 *   id="description"
 *   name="description"
 *   minlength="10"
 *   maxlength="40"
 *   required
 * ></textarea>
 */
maxlength: JSXAttributeValue;
					/**
 * The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.
 * @example
 * <input
 *   id="myNumber"
 *   name="myNumber"
 *   type="number"
 *   min="7.2"
 *   value="8"
 * />
 */
min: JSXAttributeValue;
					/**
 * The minlength attribute defines the minimum string length that the user can enter into an <input> or <textarea>.
 * @example
 * <label for="name">Product name:</label>
 * <input
 *   id="name"
 *   name="name"
 *   type="text"
 *   value="Shampoo"
 *   minlength="3"
 *   maxlength="20"
 *   required
 * />
 * 
 * <label for="description">Product description:</label>
 * <textarea
 *   id="description"
 *   name="description"
 *   minlength="10"
 *   maxlength="40"
 *   required
 * ></textarea>
 */
minlength: JSXAttributeValue;
					/**
 * @deprecated
 */
mozactionhint: JSXAttributeValue;
					/**
 * The Boolean multiple attribute, if set, means the form control accepts one or more values.
 * @example
 * <input type="email" multiple name="emails" id="emails" />
 */
multiple: JSXAttributeValue;
					/**
 * The name attribute creates a unique behavior for radio buttons.
 */
name: JSXAttributeValue;
					/**
 * The pattern attribute specifies a regular expression the form control's value should match.
 * @example
 * <label for="username">Username: (3-16 characters)</label>
 * <input
 *   id="username"
 *   name="username"
 *   type="text"
 *   value="Sasha"
 *   pattern="\w{3,16}"
 *   required
 * />
 * 
 * <label for="pin">PIN: (4 digits)</label>
 * <input
 *   id="pin"
 *   name="pin"
 *   type="password"
 *   pattern="\d{4,4}"
 *   required
 * />
 */
pattern: JSXAttributeValue;
					placeholder: JSXAttributeValue;
					/**
 * @example
 * <input type="button" />
 */
popovertarget: JSXAttributeValue;
					/**
 * @example
 * <input type="button" />
 */
popovertargetaction: JSXAttributeValue;
					/**
 * The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   id="firstName"
 *   name="firstName"
 *   type="text"
 *   value="Adam"
 * />
 * 
 * <label for="age">Age:</label>
 * <input
 *   id="age"
 *   name="age"
 *   type="number"
 *   value="42"
 *   readonly
 * />
 * 
 * <label for="hobbies">Hobbies:</label>
 * <textarea id="hobbies" name="hobbies" readonly>
 * Baseball</textarea
 * >
 */
readonly: JSXAttributeValue;
					required: JSXAttributeValue;
					/**
 * The size attribute defines the width of the <input> and the height of the <select> element.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   id="firstName"
 *   name="firstName"
 *   type="text"
 *   size="10"
 * />
 * 
 * <label for="lastName">Last Name:</label>
 * <input
 *   id="lastName"
 *   name="lastName"
 *   type="text"
 *   size="20"
 * />
 * 
 * <label for="fruit">Favorite fruit:</label>
 * <select id="fruit" name="fruit" size="2">
 *   <option>Orange</option>
 *   <option>Banana</option>
 *   <option>Apple</option>
 * </select>
 */
size: JSXAttributeValue;
					src: JSXAttributeValue;
					/**
 * The step attribute is a number that specifies the granularity that the value must adhere to or the keyword any.
 * @example
 * <input type="number" min="10" step="2" />
 */
step: JSXAttributeValue;
					/**
 * @deprecated
 */
usemap: JSXAttributeValue;
					webkitdirectory: JSXAttributeValue;
					}
				
					/* ins attributes */
					export interface HTMLModAttributes extends HTMLAttributes {
						cite: JSXAttributeValue;
					datetime: JSXAttributeValue;
					}
				
					/* label attributes */
					export interface HTMLLabelAttributes extends HTMLAttributes {
						/**
 * The for attribute is an allowed attribute for <label> and <output>.
 * @example
 * <p>
 *   <label>First Name (no "for" attribute):</label>
 *   <input id="first" type="text" value="Jane" />
 * </p>
 * <p>
 *   <label for="last">Last Name (w/ "for" attribute):</label>
 *   <input id="last" type="text" value="Doe" />
 * </p>
 * <p id="result">
 *   <strong id="result-label">Full Name:</strong>
 *   <output
 *     for="first last"
 *     aria-labelledby="result-label"
 *     id="output"
 *   ></output>
 * </p>
 */
for: JSXAttributeValue;
					}
				
					/* legend attributes */
					export interface HTMLLegendAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					}
				
					/* li attributes */
					export interface HTMLLIAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
type: JSXAttributeValue;
					value: JSXAttributeValue;
					}
				
					/* link attributes */
					export interface HTMLLinkAttributes extends HTMLAttributes {
						as: JSXAttributeValue;
					blocking: JSXAttributeValue;
					/**
 * @deprecated
 */
charset: JSXAttributeValue;
					/**
 * The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data.
 * @example
 * <script
 *   src="https://example.com/example-framework.js"
 *   crossorigin="anonymous"
 * ></script>
 */
crossorigin: JSXAttributeValue;
					disabled: JSXAttributeValue;
					fetchpriority: JSXAttributeValue;
					href: JSXAttributeValue;
					hreflang: JSXAttributeValue;
					imagesizes: JSXAttributeValue;
					imagesrcset: JSXAttributeValue;
					/**
 * @example
 * <script src="https://not-example.com/script.js"></script>
 */
integrity: JSXAttributeValue;
					media: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					/**
 * The rel attribute defines the relationship between a linked resource and the current document.
 * @example
 * <!-- a persistent style sheet -->
 * <link rel="stylesheet" href="default.css" />
 * <!-- alternate style sheets -->
 * <link
 *   rel="alternate stylesheet"
 *   href="highcontrast.css"
 *   title="High contrast"
 * />
 */
rel: JSXAttributeValue;
					/**
 * @deprecated
 */
rev: JSXAttributeValue;
					sizes: JSXAttributeValue;
					/**
 * @deprecated
 */
target: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* map attributes */
					export interface HTMLMapAttributes extends HTMLAttributes {
						name: JSXAttributeValue;
					}
				
					/* meta attributes */
					export interface HTMLMetaAttributes extends HTMLAttributes {
						charset: JSXAttributeValue;
					content: JSXAttributeValue;
					"http-equiv": JSXAttributeValue;
					/**
 * The name attribute of the <meta> element provides metadata in name-value pairs.
 * @example
 * <meta
 *   name="description"
 *   content="The HTML reference describes all elements and attributes of HTML, including global attributes that apply to all elements."
 * />
 */
name: JSXAttributeValue;
					/**
 * @deprecated
 */
scheme: JSXAttributeValue;
					}
				
					/* meter attributes */
					export interface HTMLMeterAttributes extends HTMLAttributes {
						high: JSXAttributeValue;
					low: JSXAttributeValue;
					/**
 * The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.
 * @example
 * <input type="button" />
 */
max: JSXAttributeValue;
					/**
 * The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.
 * @example
 * <input
 *   id="myNumber"
 *   name="myNumber"
 *   type="number"
 *   min="7.2"
 *   value="8"
 * />
 */
min: JSXAttributeValue;
					optimum: JSXAttributeValue;
					value: JSXAttributeValue;
					}
				
					/* object attributes */
					export interface HTMLObjectAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
archive: JSXAttributeValue;
					/**
 * @deprecated
 */
border: JSXAttributeValue;
					/**
 * @deprecated
 */
classid: JSXAttributeValue;
					/**
 * @deprecated
 */
codebase: JSXAttributeValue;
					/**
 * @deprecated
 */
codetype: JSXAttributeValue;
					data: JSXAttributeValue;
					/**
 * @deprecated
 */
declare: JSXAttributeValue;
					form: JSXAttributeValue;
					height: JSXAttributeValue;
					name: JSXAttributeValue;
					/**
 * @deprecated
 */
standby: JSXAttributeValue;
					type: JSXAttributeValue;
					/**
 * @deprecated
 */
usemap: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* ol attributes */
					export interface HTMLOListAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
compact: JSXAttributeValue;
					reversed: JSXAttributeValue;
					start: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* optgroup attributes */
					export interface HTMLOptGroupAttributes extends HTMLAttributes {
						/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					label: JSXAttributeValue;
					}
				
					/* option attributes */
					export interface HTMLOptionAttributes extends HTMLAttributes {
						/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					label: JSXAttributeValue;
					selected: JSXAttributeValue;
					value: JSXAttributeValue;
					}
				
					/* output attributes */
					export interface HTMLOutputAttributes extends HTMLAttributes {
						/**
 * The for attribute is an allowed attribute for <label> and <output>.
 * @example
 * <p>
 *   <label>First Name (no "for" attribute):</label>
 *   <input id="first" type="text" value="Jane" />
 * </p>
 * <p>
 *   <label for="last">Last Name (w/ "for" attribute):</label>
 *   <input id="last" type="text" value="Doe" />
 * </p>
 * <p id="result">
 *   <strong id="result-label">Full Name:</strong>
 *   <output
 *     for="first last"
 *     aria-labelledby="result-label"
 *     id="output"
 *   ></output>
 * </p>
 */
for: JSXAttributeValue;
					form: JSXAttributeValue;
					name: JSXAttributeValue;
					}
				
					/* pre attributes */
					export interface HTMLPreAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
width: JSXAttributeValue;
					/**
 * @deprecated
 */
wrap: JSXAttributeValue;
					}
				
					/* progress attributes */
					export interface HTMLProgressAttributes extends HTMLAttributes {
						/**
 * The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.
 * @example
 * <input type="button" />
 */
max: JSXAttributeValue;
					value: JSXAttributeValue;
					}
				
					/* q attributes */
					export interface HTMLQuoteAttributes extends HTMLAttributes {
						cite: JSXAttributeValue;
					}
				
					/* script attributes */
					export interface HTMLScriptAttributes extends HTMLAttributes {
						async: JSXAttributeValue;
					/**
 * @experimental
 */
attributionsrc: JSXAttributeValue;
					blocking: JSXAttributeValue;
					/**
 * The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data.
 * @example
 * <script
 *   src="https://example.com/example-framework.js"
 *   crossorigin="anonymous"
 * ></script>
 */
crossorigin: JSXAttributeValue;
					defer: JSXAttributeValue;
					fetchpriority: JSXAttributeValue;
					integrity: JSXAttributeValue;
					nomodule: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					src: JSXAttributeValue;
					/**
 * The type attribute of the <script> element indicates the type of script represented by the element: a classic script, an import map, a JavaScript module, speculation rules, or a data block.
 * @example
 * <input type="button" />
 */
type: JSXAttributeValue;
					}
				
					/* select attributes */
					export interface HTMLSelectAttributes extends HTMLAttributes {
						autocomplete: JSXAttributeValue;
					/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					form: JSXAttributeValue;
					/**
 * The Boolean multiple attribute, if set, means the form control accepts one or more values.
 * @example
 * <input type="email" multiple name="emails" id="emails" />
 */
multiple: JSXAttributeValue;
					name: JSXAttributeValue;
					/**
 * The Boolean required attribute, if present, indicates that the user must specify a value for the input before the owning form can be submitted.
 * @example
 * <form>
 *   <div class="group">
 *     <input type="text" />
 *     <label>Normal</label>
 *   </div>
 *   <div class="group">
 *     <input type="text" required />
 *     <label>Required</label>
 *   </div>
 *   <input type="submit" />
 * </form>
 */
required: JSXAttributeValue;
					/**
 * The size attribute defines the width of the <input> and the height of the <select> element.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   id="firstName"
 *   name="firstName"
 *   type="text"
 *   size="10"
 * />
 * 
 * <label for="lastName">Last Name:</label>
 * <input
 *   id="lastName"
 *   name="lastName"
 *   type="text"
 *   size="20"
 * />
 * 
 * <label for="fruit">Favorite fruit:</label>
 * <select id="fruit" name="fruit" size="2">
 *   <option>Orange</option>
 *   <option>Banana</option>
 *   <option>Apple</option>
 * </select>
 */
size: JSXAttributeValue;
					}
				
					/* slot attributes */
					export interface HTMLSlotAttributes extends HTMLAttributes {
						name: JSXAttributeValue;
					}
				
					/* source attributes */
					export interface HTMLSourceAttributes extends HTMLAttributes {
						height: JSXAttributeValue;
					media: JSXAttributeValue;
					sizes: JSXAttributeValue;
					src: JSXAttributeValue;
					srcset: JSXAttributeValue;
					type: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
					/* style attributes */
					export interface HTMLStyleAttributes extends HTMLAttributes {
						blocking: JSXAttributeValue;
					media: JSXAttributeValue;
					/**
 * @deprecated
 */
type: JSXAttributeValue;
					}
				
					/* table attributes */
					export interface HTMLTableAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
border: JSXAttributeValue;
					/**
 * @deprecated
 */
cellpadding: JSXAttributeValue;
					/**
 * @deprecated
 */
cellspacing: JSXAttributeValue;
					/**
 * @deprecated
 */
frame: JSXAttributeValue;
					/**
 * @deprecated
 */
rules: JSXAttributeValue;
					/**
 * @deprecated
 */
summary: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* tbody attributes */
					export interface HTMLTableSectionAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					}
				
					/* td attributes */
					export interface HTMLTableCellAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
abbr: JSXAttributeValue;
					/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
axis: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					colspan: JSXAttributeValue;
					headers: JSXAttributeValue;
					rowspan: JSXAttributeValue;
					/**
 * @deprecated
 */
scope: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* template attributes */
					export interface HTMLTemplateAttributes extends HTMLAttributes {
						shadowrootclonable: JSXAttributeValue;
					shadowrootdelegatesfocus: JSXAttributeValue;
					shadowrootmode: JSXAttributeValue;
					/**
 * @experimental
 */
shadowrootserializable: JSXAttributeValue;
					}
				
					/* textarea attributes */
					export interface HTMLTextAreaAttributes extends HTMLAttributes {
						/**
 * The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   name="firstName"
 *   id="firstName"
 *   type="text"
 *   autocomplete="given-name"
 * />
 * 
 * <label for="lastName">Last Name:</label>
 * <input
 *   name="lastName"
 *   id="lastName"
 *   type="text"
 *   autocomplete="family-name"
 * />
 * 
 * <label for="email">Email:</label>
 * <input
 *   name="email"
 *   id="email"
 *   type="email"
 *   autocomplete="off"
 * />
 */
autocomplete: JSXAttributeValue;
					cols: JSXAttributeValue;
					/**
 * The dirname attribute can be used on the <textarea> element and several <input> types and describes the directionality of the element's text content during form submission.
 * @example
 * <form method="get" action="https://www.example.com/submit">
 *   <textarea
 *     name="comment"
 *     dir="auto"
 *     dirname="comment-direction"
 *   >
 * سيب</textarea
 *   >
 *   <button type="submit">Send my greetings</button>
 * </form>
 */
dirname: JSXAttributeValue;
					/**
 * The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form.
 * @example
 * <form>
 *   <label for="name">Name:</label>
 *   <input id="name" name="name" type="text" />
 * 
 *   <label for="emp">Employed:</label>
 *   <select id="emp" name="emp" disabled>
 *     <option>No</option>
 *     <option>Yes</option>
 *   </select>
 * 
 *   <label for="empDate">Employment Date:</label>
 *   <input id="empDate" name="empDate" type="date" disabled />
 * 
 *   <label for="resume">Resume:</label>
 *   <input id="resume" name="resume" type="file" />
 * </form>
 */
disabled: JSXAttributeValue;
					form: JSXAttributeValue;
					/**
 * The maxlength attribute defines the maximum string length that the user can enter into an <input> or <textarea>.
 * @example
 * <label for="name">Product name:</label>
 * <input
 *   id="name"
 *   name="name"
 *   type="text"
 *   value="Shampoo"
 *   minlength="3"
 *   maxlength="20"
 *   required
 * />
 * 
 * <label for="description">Product description:</label>
 * <textarea
 *   id="description"
 *   name="description"
 *   minlength="10"
 *   maxlength="40"
 *   required
 * ></textarea>
 */
maxlength: JSXAttributeValue;
					/**
 * The minlength attribute defines the minimum string length that the user can enter into an <input> or <textarea>.
 * @example
 * <label for="name">Product name:</label>
 * <input
 *   id="name"
 *   name="name"
 *   type="text"
 *   value="Shampoo"
 *   minlength="3"
 *   maxlength="20"
 *   required
 * />
 * 
 * <label for="description">Product description:</label>
 * <textarea
 *   id="description"
 *   name="description"
 *   minlength="10"
 *   maxlength="40"
 *   required
 * ></textarea>
 */
minlength: JSXAttributeValue;
					name: JSXAttributeValue;
					/**
 * The placeholder attribute defines the text displayed in a form control when the control has no value.
 * @example
 * <form
 *   action="/en-US/docs/Web/HTML/Reference/Attributes/placeholder"
 * >
 *   <label for="name">Enter your name:</label>
 *   <input
 *     type="text"
 *     id="name"
 *     name="name"
 *     placeholder="e.g. Mike Shinoda"
 *   />
 *   <button type="submit">Submit</button>
 * </form>
 */
placeholder: JSXAttributeValue;
					/**
 * The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.
 * @example
 * <label for="firstName">First Name:</label>
 * <input
 *   id="firstName"
 *   name="firstName"
 *   type="text"
 *   value="Adam"
 * />
 * 
 * <label for="age">Age:</label>
 * <input
 *   id="age"
 *   name="age"
 *   type="number"
 *   value="42"
 *   readonly
 * />
 * 
 * <label for="hobbies">Hobbies:</label>
 * <textarea id="hobbies" name="hobbies" readonly>
 * Baseball</textarea
 * >
 */
readonly: JSXAttributeValue;
					/**
 * The Boolean required attribute, if present, indicates that the user must specify a value for the input before the owning form can be submitted.
 * @example
 * <form>
 *   <div class="group">
 *     <input type="text" />
 *     <label>Normal</label>
 *   </div>
 *   <div class="group">
 *     <input type="text" required />
 *     <label>Required</label>
 *   </div>
 *   <input type="submit" />
 * </form>
 */
required: JSXAttributeValue;
					rows: JSXAttributeValue;
					spellcheck: JSXAttributeValue;
					wrap: JSXAttributeValue;
					}
				
					/* tfoot attributes */
					export interface HTMLTableSectionAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					}
				
					/* th attributes */
					export interface HTMLTableCellAttributes extends HTMLAttributes {
						abbr: JSXAttributeValue;
					/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
axis: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					colspan: JSXAttributeValue;
					headers: JSXAttributeValue;
					rowspan: JSXAttributeValue;
					scope: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					/**
 * @deprecated
 */
width: JSXAttributeValue;
					}
				
					/* thead attributes */
					export interface HTMLTableSectionAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					}
				
					/* time attributes */
					export interface HTMLTimeAttributes extends HTMLAttributes {
						datetime: JSXAttributeValue;
					}
				
					/* tr attributes */
					export interface HTMLTableRowAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
align: JSXAttributeValue;
					/**
 * @deprecated
 */
bgcolor: JSXAttributeValue;
					/**
 * @deprecated
 */
char: JSXAttributeValue;
					/**
 * @deprecated
 */
charoff: JSXAttributeValue;
					/**
 * @deprecated
 */
valign: JSXAttributeValue;
					}
				
					/* track attributes */
					export interface HTMLTrackAttributes extends HTMLAttributes {
						default: JSXAttributeValue;
					kind: JSXAttributeValue;
					label: JSXAttributeValue;
					src: JSXAttributeValue;
					srclang: JSXAttributeValue;
					}
				
					/* ul attributes */
					export interface HTMLUListAttributes extends HTMLAttributes {
						/**
 * @deprecated
 */
compact: JSXAttributeValue;
					/**
 * @deprecated
 */
type: JSXAttributeValue;
					}
				
					/* video attributes */
					export interface HTMLVideoAttributes extends HTMLAttributes {
						autoplay: JSXAttributeValue;
					controls: JSXAttributeValue;
					controlslist: JSXAttributeValue;
					/**
 * The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data.
 * @example
 * <script
 *   src="https://example.com/example-framework.js"
 *   crossorigin="anonymous"
 * ></script>
 */
crossorigin: JSXAttributeValue;
					disablepictureinpicture: JSXAttributeValue;
					disableremoteplayback: JSXAttributeValue;
					height: JSXAttributeValue;
					loop: JSXAttributeValue;
					muted: JSXAttributeValue;
					playsinline: JSXAttributeValue;
					poster: JSXAttributeValue;
					preload: JSXAttributeValue;
					src: JSXAttributeValue;
					width: JSXAttributeValue;
					}
				
			/** Map of HTML tag names to their attribute interfaces */
			export interface HTMLAttributesTagNamesMap {
				a: HTMLAnchorAttributes;
abbr: HTMLAttributes;
address: HTMLAttributes;
area: HTMLAreaAttributes;
article: HTMLAttributes;
aside: HTMLAttributes;
audio: HTMLAudioAttributes;
b: HTMLAttributes;
base: HTMLBaseAttributes;
bdi: HTMLAttributes;
bdo: HTMLAttributes;
blockquote: HTMLQuoteAttributes;
body: HTMLBodyAttributes;
br: HTMLBRAttributes;
button: HTMLButtonAttributes;
canvas: HTMLCanvasAttributes;
caption: HTMLTableCaptionAttributes;
cite: HTMLAttributes;
code: HTMLAttributes;
col: HTMLTableColAttributes;
colgroup: HTMLTableColAttributes;
data: HTMLDataAttributes;
datalist: HTMLAttributes;
dd: HTMLAttributes;
del: HTMLModAttributes;
details: HTMLDetailsAttributes;
dfn: HTMLAttributes;
dialog: HTMLDialogAttributes;
div: HTMLDivAttributes;
dl: HTMLAttributes;
dt: HTMLAttributes;
em: HTMLAttributes;
embed: HTMLEmbedAttributes;
fieldset: HTMLFieldSetAttributes;
figcaption: HTMLAttributes;
figure: HTMLAttributes;
footer: HTMLAttributes;
form: HTMLFormAttributes;
h1: HTMLAttributes;
h2: HTMLAttributes;
h3: HTMLAttributes;
h4: HTMLAttributes;
h5: HTMLAttributes;
h6: HTMLAttributes;
head: HTMLHeadAttributes;
header: HTMLAttributes;
hgroup: HTMLAttributes;
hr: HTMLHRAttributes;
html: HTMLHtmlAttributes;
i: HTMLAttributes;
iframe: HTMLIFrameAttributes;
img: HTMLImageAttributes;
input: HTMLInputAttributes;
ins: HTMLModAttributes;
kbd: HTMLAttributes;
label: HTMLLabelAttributes;
legend: HTMLLegendAttributes;
li: HTMLLIAttributes;
link: HTMLLinkAttributes;
main: HTMLAttributes;
map: HTMLMapAttributes;
mark: HTMLAttributes;
menu: HTMLAttributes;
meta: HTMLMetaAttributes;
meter: HTMLMeterAttributes;
nav: HTMLAttributes;
noscript: HTMLAttributes;
object: HTMLObjectAttributes;
ol: HTMLOListAttributes;
optgroup: HTMLOptGroupAttributes;
option: HTMLOptionAttributes;
output: HTMLOutputAttributes;
p: HTMLAttributes;
picture: HTMLAttributes;
pre: HTMLPreAttributes;
progress: HTMLProgressAttributes;
q: HTMLQuoteAttributes;
rp: HTMLAttributes;
rt: HTMLAttributes;
ruby: HTMLAttributes;
s: HTMLAttributes;
samp: HTMLAttributes;
script: HTMLScriptAttributes;
search: HTMLAttributes;
section: HTMLAttributes;
select: HTMLSelectAttributes;
slot: HTMLSlotAttributes;
small: HTMLAttributes;
source: HTMLSourceAttributes;
span: HTMLAttributes;
strong: HTMLAttributes;
style: HTMLStyleAttributes;
sub: HTMLAttributes;
summary: HTMLAttributes;
sup: HTMLAttributes;
table: HTMLTableAttributes;
tbody: HTMLTableSectionAttributes;
td: HTMLTableCellAttributes;
template: HTMLTemplateAttributes;
textarea: HTMLTextAreaAttributes;
tfoot: HTMLTableSectionAttributes;
th: HTMLTableCellAttributes;
thead: HTMLTableSectionAttributes;
time: HTMLTimeAttributes;
title: HTMLAttributes;
tr: HTMLTableRowAttributes;
track: HTMLTrackAttributes;
u: HTMLAttributes;
ul: HTMLUListAttributes;
var: HTMLAttributes;
video: HTMLVideoAttributes;
wbr: HTMLAttributes;
			}
		
			export interface SVGAttributes extends GlobalAttributes {
				/**
 * The alignment-baseline attribute specifies how an object is aligned with respect to its parent.
 */
"alignment-baseline": JSXAttributeValue;
				autofocus: JSXAttributeValue;
				/**
 * The baseline-shift attribute allows repositioning of the dominant-baseline relative to the dominant-baseline of the parent text content element.
 */
"baseline-shift": JSXAttributeValue;
				/**
 * The following elements can use the class attribute:
 */
class: JSXAttributeValue;
				/**
 * The clip attribute defines the visible region of an element.
 * @example
 * <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
 *   <!-- Auto clipping -->
 *   <svg x="0" width="10" height="10" clip="auto">
 *     <circle cx="5" cy="5" r="4" stroke="green" />
 *   </svg>
 * 
 *   <!-- Rect(top, right, bottom, left) clipping -->
 *   <svg
 *     x="10"
 *     width="10"
 *     height="10"
 *     clip="rect(1, 9, 8, 2)"
 *   >
 *     <circle cx="5" cy="5" r="4" stroke="green" />
 *   </svg>
 * </svg>
 * @deprecated
 */
clip: JSXAttributeValue;
				/**
 * The clip-path presentation attribute defines or associates a clipping path with the element it is related to.
 */
"clip-path": JSXAttributeValue;
				/**
 * The clip-rule attribute only applies to graphics elements that are contained within a <clipPath> element.
 * @example
 * <g>
 *   <clipPath id="MyClip">
 *     <path d="..." clip-rule="evenodd" />
 *   </clipPath>
 *   <rect clip-path="url(#MyClip)" ... />
 * </g>
 */
"clip-rule": JSXAttributeValue;
				/**
 * The color attribute is used to provide a potential indirect value, currentColor, for the fill, stroke, stop-color, flood-color, and lighting-color attributes.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <g color="green">
 *     <rect width="50" height="50" fill="currentColor" />
 *     <circle
 *       r="25"
 *       cx="70"
 *       cy="70"
 *       stroke="currentColor"
 *       fill="none"
 *       stroke-width="5"
 *     />
 *   </g>
 * </svg>
 */
color: JSXAttributeValue;
				/**
 * The color-interpolation attribute specifies the color space for gradient interpolations, color animations, and alpha compositing.
 * @example
 * <svg width="450" height="70">
 *   <title>
 *     Example of radialGradient excluding the
 *     color-interpolation attribute
 *   </title>
 *   <defs>
 *     <radialGradient id="none">
 *       <stop offset="0%" stop-color="red" />
 *       <stop offset="100%" stop-color="gold" />
 *     </radialGradient>
 *   </defs>
 *   <rect
 *     x="0"
 *     y="0"
 *     width="400"
 *     height="40"
 *     fill="url(#none)"
 *     stroke="black"
 *   />
 *   <text x="0" y="60" font-family="courier" font-size="16">
 *     color-interpolation not set
 *   </text>
 * </svg>
 */
"color-interpolation": JSXAttributeValue;
				/**
 * The color-interpolation-filters attribute specifies the color space for imaging operations performed via filter effects.
 */
"color-interpolation-filters": JSXAttributeValue;
				/**
 * The cursor attribute specifies the mouse cursor displayed when the mouse pointer is over an element.
 */
cursor: JSXAttributeValue;
				/**
 * The direction attribute specifies the inline-base direction of a <text> or <tspan> element.
 * @example
 * <svg
 *   viewBox="0 0 600 72"
 *   xmlns="http://www.w3.org/2000/svg"
 *   direction="rtl"
 *   lang="fa"
 * >
 *   <text x="300" y="50" text-anchor="middle" font-size="36">
 *     داستان SVG 1.1 SE طولا ني است.
 *   </text>
 * </svg>
 */
direction: JSXAttributeValue;
				/**
 * The display attribute lets you control the rendering of graphical or container elements.
 * @example
 * <svg
 *   viewBox="0 0 220 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Here the yellow rectangle is displayed -->
 *   <rect
 *     x="0"
 *     y="0"
 *     width="100"
 *     height="100"
 *     fill="skyblue"
 *   ></rect>
 *   <rect
 *     x="20"
 *     y="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *   ></rect>
 * 
 *   <!-- Here the yellow rectangle is not displayed -->
 *   <rect
 *     x="120"
 *     y="0"
 *     width="100"
 *     height="100"
 *     fill="skyblue"
 *   ></rect>
 *   <rect
 *     x="140"
 *     y="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *     display="none"
 *   ></rect>
 * </svg>
 */
display: JSXAttributeValue;
				/**
 * The dominant-baseline attribute specifies the dominant baseline, which is the baseline used to align the box's text and inline-level contents.
 * @example
 * <svg
 *   viewBox="0 0 200 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <path
 *     d="M20,20 L180,20 M20,50 L180,50 M20,80 L180,80"
 *     stroke="grey"
 *   />
 * 
 *   <text dominant-baseline="auto" x="30" y="20">Auto</text>
 *   <text dominant-baseline="middle" x="30" y="50">
 *     Middle
 *   </text>
 *   <text dominant-baseline="hanging" x="30" y="80">
 *     Hanging
 *   </text>
 * </svg>
 */
"dominant-baseline": JSXAttributeValue;
				/**
 * The fill-opacity attribute is a presentation attribute defining the opacity of the paint server (color, gradient, pattern, etc.
 * @example
 * <svg
 *   viewBox="0 0 400 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Default fill opacity: 1 -->
 *   <circle cx="50" cy="50" r="40" />
 * 
 *   <!-- Fill opacity as a number -->
 *   <circle cx="150" cy="50" r="40" fill-opacity="0.7" />
 * 
 *   <!-- Fill opacity as a percentage -->
 *   <circle cx="250" cy="50" r="40" fill-opacity="50%" />
 * 
 *   <!-- Fill opacity as a CSS property -->
 *   <circle
 *     cx="350"
 *     cy="50"
 *     r="40"
 *     style="fill-opacity: 0.25"
 *   />
 * </svg>
 */
"fill-opacity": JSXAttributeValue;
				/**
 * The fill-rule attribute is a presentation attribute defining the algorithm to use to determine the inside part of a shape.
 * @example
 * <svg
 *   viewBox="-10 -10 220 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Default value for fill-rule -->
 *   <polygon
 *     fill-rule="nonzero"
 *     stroke="red"
 *     points="50,0 21,90 98,35 2,35 79,90"
 *   />
 * 
 *   <!--
 *   The center of the shape has two
 *   path segments (shown by the red stroke)
 *   between it and infinity. It is therefore
 *   considered outside the shape, and not filled.
 *   -->
 *   <polygon
 *     fill-rule="evenodd"
 *     stroke="red"
 *     points="150,0 121,90 198,35 102,35 179,90"
 *   />
 * </svg>
 */
"fill-rule": JSXAttributeValue;
				/**
 * The filter attribute specifies the filter effects defined by the <filter> element that shall be applied to its element.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter id="blur">
 *     <feGaussianBlur stdDeviation="2" />
 *   </filter>
 * 
 *   <rect
 *     x="10"
 *     y="10"
 *     width="80"
 *     height="80"
 *     filter="url(#blur)"
 *   />
 * </svg>
 */
filter: JSXAttributeValue;
				/**
 * The flood-color attribute indicates what color to use to flood the current filter primitive subregion.
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter id="flood1">
 *     <feFlood
 *       flood-color="skyblue"
 *       x="0"
 *       y="0"
 *       width="200"
 *       height="200"
 *     />
 *   </filter>
 *   <filter id="flood2">
 *     <feFlood
 *       flood-color="seagreen"
 *       x="0"
 *       y="0"
 *       width="200"
 *       height="200"
 *     />
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#flood1)"
 *   />
 *   <rect
 *     x="220"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#flood2)"
 *   />
 * </svg>
 */
"flood-color": JSXAttributeValue;
				/**
 * The flood-opacity attribute indicates the opacity value to use across the current filter primitive subregion.
 */
"flood-opacity": JSXAttributeValue;
				/**
 * The font-family attribute indicates which font family will be used to render the text, specified as a prioritized list of font family names and/or generic family names.
 * @example
 * <svg
 *   viewBox="0 0 200 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" font-family="Arial, Helvetica, sans-serif">
 *     Sans serif
 *   </text>
 *   <text x="100" y="20" font-family="monospace">
 *     Monospace
 *   </text>
 * </svg>
 */
"font-family": JSXAttributeValue;
				/**
 * The font-size attribute refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
 * @example
 * <svg
 *   viewBox="0 0 200 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="25" font-size="smaller">smaller</text>
 *   <text x="100" y="25" font-size="2em">2em</text>
 * </svg>
 */
"font-size": JSXAttributeValue;
				/**
 * The font-size-adjust attribute allows authors to specify an aspect value for an element that will preserve the x-height of the first choice font in a substitute font.
 */
"font-size-adjust": JSXAttributeValue;
				/**
 * The font-stretch attribute indicates the desired amount of condensing or expansion in the glyphs used to render the text.
 * @deprecated
 */
"font-stretch": JSXAttributeValue;
				/**
 * The font-style attribute specifies whether the text is to be rendered using a normal, italic, or oblique face.
 * @example
 * <svg
 *   viewBox="0 0 250 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" font-style="normal">Normal font style</text>
 *   <text x="150" y="20" font-style="italic">
 *     Italic font style
 *   </text>
 * </svg>
 */
"font-style": JSXAttributeValue;
				/**
 * The font-variant attribute indicates whether the text is to be rendered using variations of the font's glyphs.
 * @example
 * <svg
 *   viewBox="0 0 250 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" font-variant="normal">Normal text</text>
 *   <text x="100" y="20" font-variant="small-caps">
 *     Small-caps text
 *   </text>
 * </svg>
 */
"font-variant": JSXAttributeValue;
				/**
 * The font-weight attribute refers to the boldness or lightness of the glyphs used to render the text, relative to other fonts in the same font family.
 * @example
 * <svg
 *   viewBox="0 0 200 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" font-weight="normal">Normal text</text>
 *   <text x="100" y="20" font-weight="bold">Bold text</text>
 * </svg>
 */
"font-weight": JSXAttributeValue;
				/**
 * The glyph-orientation-horizontal attribute affects the amount that the current text position advances as each glyph is rendered.
 * @deprecated
 */
"glyph-orientation-horizontal": JSXAttributeValue;
				/**
 * The glyph-orientation-vertical attribute affects the amount that the current text position advances as each glyph is rendered.
 * @deprecated
 */
"glyph-orientation-vertical": JSXAttributeValue;
				/**
 * The id attribute assigns a unique name to an element.
 * @example
 * <svg
 *   width="120"
 *   height="120"
 *   viewBox="0 0 120 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <style>
 *     <![CDATA[
 *       #smallRect {
 *         stroke: #000066;
 *         fill: #00cc00;
 *       }
 *     ]]>
 *   </style>
 * 
 *   <rect
 *     id="smallRect"
 *     x="10"
 *     y="10"
 *     width="100"
 *     height="100"
 *   />
 * </svg>
 */
id: JSXAttributeValue;
				/**
 * The image-rendering attribute provides a hint to the browser about how to make speed vs.
 */
"image-rendering": JSXAttributeValue;
				/**
 * The lang attribute specifies the primary language used in contents and attributes containing text content of particular elements.
 * @example
 * <svg
 *   viewBox="0 0 200 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text lang="en-US">This is some English text</text>
 * </svg>
 */
lang: JSXAttributeValue;
				/**
 * The letter-spacing attribute controls spacing between text characters.
 * @example
 * <svg
 *   viewBox="0 0 400 30"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" letter-spacing="2">
 *     Bigger letter-spacing
 *   </text>
 *   <text x="200" y="20" letter-spacing="-0.5">
 *     Smaller letter-spacing
 *   </text>
 * </svg>
 */
"letter-spacing": JSXAttributeValue;
				/**
 * The lighting-color attribute defines the color of the light source for lighting filter primitives.
 */
"lighting-color": JSXAttributeValue;
				/**
 * The marker-end attribute defines the arrowhead or polymarker that will be drawn at the final vertex of the given shape.
 * @example
 * <svg
 *   viewBox="0 0 120 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <defs>
 *     <marker
 *       id="triangle"
 *       viewBox="0 0 10 10"
 *       refX="1"
 *       refY="5"
 *       markerUnits="strokeWidth"
 *       markerWidth="10"
 *       markerHeight="10"
 *       orient="auto"
 *     >
 *       <path d="M 0 0 L 10 5 L 0 10 z" fill="red" />
 *     </marker>
 *   </defs>
 *   <polyline
 *     fill="none"
 *     stroke="black"
 *     points="20,100 40,60 70,80 100,20"
 *     marker-end="url(#triangle)"
 *   />
 * </svg>
 */
"marker-end": JSXAttributeValue;
				/**
 * The marker-mid attribute defines the arrowhead or polymarker that will be drawn at all interior vertices of the given shape.
 * @example
 * <svg
 *   viewBox="0 0 120 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <defs>
 *     <marker
 *       id="circle"
 *       markerWidth="8"
 *       markerHeight="8"
 *       refX="4"
 *       refY="4"
 *     >
 *       <circle
 *         cx="4"
 *         cy="4"
 *         r="4"
 *         stroke="none"
 *         fill="red"
 *       />
 *     </marker>
 *   </defs>
 *   <polyline
 *     fill="none"
 *     stroke="black"
 *     points="20,100 40,60 70,80 100,20"
 *     marker-mid="url(#circle)"
 *   />
 * </svg>
 */
"marker-mid": JSXAttributeValue;
				/**
 * The marker-start attribute defines the arrowhead or polymarker that will be drawn at the first vertex of the given shape.
 * @example
 * <svg
 *   viewBox="0 0 120 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <defs>
 *     <marker
 *       id="triangle"
 *       viewBox="0 0 10 10"
 *       refX="1"
 *       refY="5"
 *       markerUnits="strokeWidth"
 *       markerWidth="10"
 *       markerHeight="10"
 *       orient="auto"
 *     >
 *       <path d="M 0 0 L 10 5 L 0 10 z" fill="red" />
 *     </marker>
 *   </defs>
 *   <polyline
 *     fill="none"
 *     stroke="black"
 *     points="20,100 40,60 70,80 100,20"
 *     marker-start="url(#triangle)"
 *   />
 * </svg>
 */
"marker-start": JSXAttributeValue;
				/**
 * The mask attribute is a presentation attribute mainly used to bind a given <mask> element with the element the attribute belongs to.
 */
mask: JSXAttributeValue;
				/**
 * The opacity attribute specifies the transparency of an object or of a group of objects, that is, the degree to which the background behind the element is overlaid.
 * @example
 * <svg
 *   viewBox="0 0 200 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <defs>
 *     <linearGradient
 *       id="gradient"
 *       x1="0%"
 *       y1="0%"
 *       x2="0"
 *       y2="100%"
 *     >
 *       <stop offset="0%" stop-color="skyblue" />
 *       <stop offset="100%" stop-color="seagreen" />
 *     </linearGradient>
 *   </defs>
 *   <rect
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *     fill="url(#gradient)"
 *   />
 *   <circle cx="50" cy="50" r="40" fill="black" />
 *   <circle
 *     cx="150"
 *     cy="50"
 *     r="40"
 *     fill="black"
 *     opacity="0.3"
 *   />
 * </svg>
 */
opacity: JSXAttributeValue;
				/**
 * The overflow attribute sets what to do when an element's content is too big to fit in its block formatting context.
 * @example
 * <svg
 *   viewBox="0 0 200 30"
 *   xmlns="http://www.w3.org/2000/svg"
 *   overflow="auto"
 * >
 *   <text y="20">
 *     This text is wider than the SVG, so there should be a
 *     scrollbar shown.
 *   </text>
 * </svg>
 */
overflow: JSXAttributeValue;
				/**
 * The paint-order attribute specifies the order that the fill, stroke, and markers of a given shape or text element are painted.
 */
"paint-order": JSXAttributeValue;
				/**
 * The pointer-events attribute is a presentation attribute that allows defining whether or when an element may be the target of a mouse event.
 */
"pointer-events": JSXAttributeValue;
				requiredExtensions: JSXAttributeValue;
				/**
 * The shape-rendering attribute provides hints to the renderer about what tradeoffs to make when rendering shapes like paths, circles, or rectangles.
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <circle
 *     cx="100"
 *     cy="100"
 *     r="100"
 *     shape-rendering="geometricPrecision"
 *   />
 *   <circle
 *     cx="320"
 *     cy="100"
 *     r="100"
 *     shape-rendering="crispEdges"
 *   />
 * </svg>
 */
"shape-rendering": JSXAttributeValue;
				/**
 * The stop-color attribute indicates what color to use at a gradient stop.
 */
"stop-color": JSXAttributeValue;
				/**
 * The stop-opacity attribute defines the opacity of a given color gradient stop.
 */
"stop-opacity": JSXAttributeValue;
				/**
 * The stroke attribute is a presentation attribute defining the color (or any SVG paint servers like gradients or patterns) used to paint the outline of the shape.
 * @example
 * <svg viewBox="0 0 20 10" xmlns="http://www.w3.org/2000/svg">
 *   <!-- Basic color stroke -->
 *   <circle cx="5" cy="5" r="4" fill="none" stroke="green" />
 * 
 *   <!-- Stroke a circle with a gradient -->
 *   <defs>
 *     <linearGradient id="myGradient">
 *       <stop offset="0%" stop-color="green" />
 *       <stop offset="100%" stop-color="white" />
 *     </linearGradient>
 *   </defs>
 * 
 *   <circle
 *     cx="15"
 *     cy="5"
 *     r="4"
 *     fill="none"
 *     stroke="url(#myGradient)"
 *   />
 * </svg>
 */
stroke: JSXAttributeValue;
				/**
 * The stroke-dasharray attribute is a presentation attribute defining the pattern of dashes and gaps used to paint the outline of the shape.
 */
"stroke-dasharray": JSXAttributeValue;
				/**
 * The stroke-dashoffset attribute is a presentation attribute defining an offset on the rendering of the associated dash array.
 */
"stroke-dashoffset": JSXAttributeValue;
				/**
 * The stroke-linecap attribute is a presentation attribute defining the shape to be used at the end of open subpaths when they are stroked.
 */
"stroke-linecap": JSXAttributeValue;
				/**
 * The stroke-linejoin attribute is a presentation attribute defining the shape to be used at the corners of paths when they are stroked.
 */
"stroke-linejoin": JSXAttributeValue;
				/**
 * The stroke-miterlimit attribute is a presentation attribute defining a limit on the ratio of the miter length to the stroke-width used to draw a miter join.
 */
"stroke-miterlimit": JSXAttributeValue;
				/**
 * The stroke-opacity attribute is a presentation attribute defining the opacity of the paint server (color, gradient, pattern, etc.
 * @example
 * <svg viewBox="0 0 40 10" xmlns="http://www.w3.org/2000/svg">
 *   <!-- Default stroke opacity: 1 -->
 *   <circle cx="5" cy="5" r="4" stroke="green" />
 * 
 *   <!-- Stroke opacity as a number -->
 *   <circle
 *     cx="15"
 *     cy="5"
 *     r="4"
 *     stroke="green"
 *     stroke-opacity="0.7"
 *   />
 * 
 *   <!-- Stroke opacity as a percentage -->
 *   <circle
 *     cx="25"
 *     cy="5"
 *     r="4"
 *     stroke="green"
 *     stroke-opacity="50%"
 *   />
 * 
 *   <!-- Stroke opacity as a CSS property -->
 *   <circle
 *     cx="35"
 *     cy="5"
 *     r="4"
 *     stroke="green"
 *     style="stroke-opacity: 0.3"
 *   />
 * </svg>
 */
"stroke-opacity": JSXAttributeValue;
				/**
 * The stroke-width attribute is a presentation attribute defining the width of the stroke to be applied to the shape.
 * @example
 * <svg viewBox="0 0 30 10" xmlns="http://www.w3.org/2000/svg">
 *   <!-- Default stroke width: 1 -->
 *   <circle cx="5" cy="5" r="3" stroke="green" />
 * 
 *   <!-- Stroke width as a number -->
 *   <circle
 *     cx="15"
 *     cy="5"
 *     r="3"
 *     stroke="green"
 *     stroke-width="3"
 *   />
 * 
 *   <!-- Stroke width as a percentage -->
 *   <circle
 *     cx="25"
 *     cy="5"
 *     r="3"
 *     stroke="green"
 *     stroke-width="2%"
 *   />
 * </svg>
 */
"stroke-width": JSXAttributeValue;
				/**
 * The style attribute allows to style an element using CSS declarations.
 * @example
 * <svg
 *   viewBox="0 0 100 60"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect
 *     width="80"
 *     height="40"
 *     x="10"
 *     y="10"
 *     style="
 *       fill: skyblue;
 *       stroke: cadetblue;
 *       stroke-width: 2;
 *     "
 *   />
 * </svg>
 */
style: JSXAttributeValue;
				/**
 * The tabindex attribute allows you to control whether an element is focusable and to define the relative order of the element for the purposes of sequential focus navigation.
 * @example
 * <?xml version="1.0"?>
 * <svg
 *   viewBox="0 0 260 260"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <circle
 *     r="10"
 *     tabindex="0"
 *     fill="green"
 *     cx="60"
 *     cy="60"
 *   />
 *   <circle r="40" tabindex="0" fill="red" cx="60" cy="160" />
 *   <circle
 *     r="60"
 *     tabindex="0"
 *     fill="blue"
 *     cx="160"
 *     cy="60"
 *   />
 *   <circle
 *     r="20"
 *     tabindex="0"
 *     fill="black"
 *     cx="160"
 *     cy="160"
 *   />
 * </svg>
 */
tabindex: JSXAttributeValue;
				/**
 * The text-anchor attribute is used to align (start-, middle- or end-alignment) a string of pre-formatted text or auto-wrapped text where the wrapping area is determined from the inline-size property relative to a given point.
 */
"text-anchor": JSXAttributeValue;
				/**
 * The text-decoration attribute defines whether text is decorated with an underline, overline and/or strike-through.
 * @example
 * <svg
 *   viewBox="0 0 250 50"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" text-decoration="underline">
 *     Underlined text
 *   </text>
 *   <text x="0" y="40" text-decoration="line-through">
 *     Struck-through text
 *   </text>
 * </svg>
 */
"text-decoration": JSXAttributeValue;
				"text-overflow": JSXAttributeValue;
				/**
 * The text-rendering attribute provides hints to the renderer about what tradeoffs to make when rendering text.
 * @example
 * <svg
 *   viewBox="0 0 140 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="15" text-rendering="geometricPrecision">
 *     Geometric precision
 *   </text>
 *   <text y="35" text-rendering="optimizeLegibility">
 *     Optimized legibility
 *   </text>
 * </svg>
 */
"text-rendering": JSXAttributeValue;
				/**
 * The transform attribute defines a list of transform definitions that are applied to an element and the element's children.
 * @example
 * <svg
 *   viewBox="-40 0 150 100"
 *   xmlns="http://www.w3.org/2000/svg"
 *   xmlns:xlink="http://www.w3.org/1999/xlink"
 * >
 *   <g
 *     fill="grey"
 *     transform="rotate(-10 50 100)
 *                translate(-36 45.5)
 *                skewX(40)
 *                scale(1 0.5)"
 *   >
 *     <path
 *       id="heart"
 *       d="M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z"
 *     />
 *   </g>
 * 
 *   <use href="#heart" fill="none" stroke="red" />
 * </svg>
 */
transform: JSXAttributeValue;
				/**
 * The transform-origin SVG attribute sets the origin for an item's transformations.
 */
"transform-origin": JSXAttributeValue;
				/**
 * The unicode-bidi attribute specifies how the accumulation of the background image is managed.
 */
"unicode-bidi": JSXAttributeValue;
				"vector-effect": JSXAttributeValue;
				/**
 * The visibility attribute lets you control the visibility of graphical elements.
 * @example
 * <svg
 *   viewBox="0 0 220 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect
 *     x="10"
 *     y="10"
 *     width="200"
 *     height="100"
 *     stroke="black"
 *     stroke-width="5"
 *     fill="transparent"
 *   />
 *   <g stroke="seagreen" stroke-width="5" fill="skyblue">
 *     <rect
 *       x="20"
 *       y="20"
 *       width="80"
 *       height="80"
 *       visibility="visible"
 *     />
 *     <rect
 *       x="120"
 *       y="20"
 *       width="80"
 *       height="80"
 *       visibility="hidden"
 *     />
 *   </g>
 * </svg>
 */
visibility: JSXAttributeValue;
				"white-space": JSXAttributeValue;
				/**
 * The word-spacing attribute specifies spacing behavior between words.
 * @example
 * <svg
 *   viewBox="0 0 250 50"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" word-spacing="4">
 *     Bigger spacing between words
 *   </text>
 *   <text x="0" y="40" word-spacing="-0.5">
 *     Smaller spacing between words
 *   </text>
 * </svg>
 */
"word-spacing": JSXAttributeValue;
				/**
 * The writing-mode attribute specifies whether the initial inline-progression-direction for a <text> element shall be left-to-right, right-to-left, or top-to-bottom.
 */
"writing-mode": JSXAttributeValue;
			}
		


					/* a attributes */
					export interface SVGAAttributes extends SVGAttributes {
						download: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					hreflang: JSXAttributeValue;
					/**
 * @experimental
 */
ping: JSXAttributeValue;
					referrerpolicy: JSXAttributeValue;
					rel: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The target attribute should be used when there are multiple possible targets for the ending resource, such as when the parent document is embedded within an HTML or XHTML document, or is viewed with a tabbed browser.
 * @example
 * <svg
 *   viewBox="0 0 300 120"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org" target="_self">
 *     <text x="0" y="20">Open link within iframe</text>
 *   </a>
 *   <a href="https://developer.mozilla.org" target="_blank">
 *     <text x="0" y="60">Open link in new tab or window</text>
 *   </a>
 *   <a href="https://developer.mozilla.org" target="_top">
 *     <text x="0" y="100">
 *       Open link in this tab or window
 *     </text>
 *   </a>
 * </svg>
 */
target: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* animate attributes */
					export interface SVGAnimateAttributes extends SVGAttributes {
						attributeName: JSXAttributeValue;
					attributeType: JSXAttributeValue;
					/**
 * The dur attribute indicates the simple duration of an animation.
 * @example
 * <svg
 *   viewBox="0 0 220 150"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="0" y="0" width="100" height="100">
 *     <animate
 *       attributeType="XML"
 *       attributeName="y"
 *       from="0"
 *       to="50"
 *       dur="1s"
 *       repeatCount="indefinite"
 *     />
 *   </rect>
 *   <rect x="120" y="0" width="100" height="100">
 *     <animate
 *       attributeType="XML"
 *       attributeName="y"
 *       from="0"
 *       to="50"
 *       dur="3s"
 *       repeatCount="indefinite"
 *     />
 *   </rect>
 * </svg>
 */
dur: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The from attribute indicates the initial value of the attribute that will be modified during the animation.
 * @example
 * <svg
 *   viewBox="0 0 200 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="10" y="10" height="100">
 *     <animate
 *       attributeName="width"
 *       fill="freeze"
 *       from="100"
 *       to="150"
 *       dur="3s"
 *     />
 *   </rect>
 * </svg>
 */
from: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The repeatCount attribute indicates the number of times an animation will take place.
 * @example
 * <svg
 *   viewBox="0 0 220 150"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="0" y="0" width="100" height="100">
 *     <animate
 *       attributeType="XML"
 *       attributeName="y"
 *       from="0"
 *       to="50"
 *       dur="1s"
 *       repeatCount="5"
 *     />
 *   </rect>
 *   <rect x="120" y="0" width="100" height="100">
 *     <animate
 *       attributeType="XML"
 *       attributeName="y"
 *       from="0"
 *       to="50"
 *       dur="1s"
 *       repeatCount="indefinite"
 *     />
 *   </rect>
 * </svg>
 */
repeatCount: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					to: JSXAttributeValue;
					}
				
					/* animateMotion attributes */
					export interface SVGAnimateMotionAttributes extends SVGAttributes {
						calcMode: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The keyPoints attribute indicates the simple duration of an animation.
 */
keyPoints: JSXAttributeValue;
					origin: JSXAttributeValue;
					path: JSXAttributeValue;
					rotate: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* animateTransform attributes */
					export interface SVGAnimateTransformAttributes extends SVGAttributes {
						/**
 * The by attribute specifies a relative offset value for an attribute that will be modified during an animation.
 * @example
 * <svg
 *   viewBox="0 0 200 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="10" y="10" width="100" height="100">
 *     <animate
 *       attributeName="width"
 *       fill="freeze"
 *       by="50"
 *       dur="3s"
 *     />
 *   </rect>
 * </svg>
 */
by: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					from: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					to: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* circle attributes */
					export interface SVGCircleAttributes extends SVGAttributes {
						/**
 * The cx attribute defines the x-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cx="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cx="50" cy="50" r="45" />
 *   <ellipse cx="150" cy="50" rx="45" ry="25" />
 *   <rect
 *     x="205"
 *     y="5"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cx: JSXAttributeValue;
					/**
 * The cy attribute defines the y-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cy="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cy="50" cx="50" r="45" />
 *   <ellipse cy="150" cx="50" rx="45" ry="25" />
 *   <rect
 *     x="5"
 *     y="205"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cy: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The r attribute defines the radius of a circle.
 */
r: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* clipPath attributes */
					export interface SVGClipPathAttributes extends SVGAttributes {
						clipPathUnits: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* defs attributes */
					export interface SVGDefsAttributes extends SVGAttributes {
						/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* ellipse attributes */
					export interface SVGEllipseAttributes extends SVGAttributes {
						/**
 * The cx attribute defines the x-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cx="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cx="50" cy="50" r="45" />
 *   <ellipse cx="150" cy="50" rx="45" ry="25" />
 *   <rect
 *     x="205"
 *     y="5"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cx: JSXAttributeValue;
					/**
 * The cy attribute defines the y-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cy="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cy="50" cx="50" r="45" />
 *   <ellipse cy="150" cx="50" rx="45" ry="25" />
 *   <rect
 *     x="5"
 *     y="205"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cy: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					rx: JSXAttributeValue;
					ry: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* feBlend attributes */
					export interface SVGFEBlendAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					in2: JSXAttributeValue;
					/**
 * The mode attribute defines the blending mode on the <feBlend> filter primitive.
 */
mode: JSXAttributeValue;
					}
				
					/* feColorMatrix attributes */
					export interface SVGFEColorMatrixAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					type: JSXAttributeValue;
					values: JSXAttributeValue;
					}
				
					/* feComponentTransfer attributes */
					export interface SVGFEComponentTransferAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					}
				
					/* feComposite attributes */
					export interface SVGFECompositeAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					in2: JSXAttributeValue;
					/**
 * The k1 attribute defines one of the values to be used within the arithmetic operation of the <feComposite> filter primitive.
 */
k1: JSXAttributeValue;
					/**
 * The k2 attribute defines one of the values to be used within the arithmetic operation of the <feComposite> filter primitive.
 */
k2: JSXAttributeValue;
					/**
 * The k3 attribute defines one of the values to be used within the arithmetic operation of the <feComposite> filter primitive.
 */
k3: JSXAttributeValue;
					/**
 * The k4 attribute defines one of the values to be used within the arithmetic operation of the <feComposite> filter primitive.
 */
k4: JSXAttributeValue;
					operator: JSXAttributeValue;
					}
				
					/* feConvolveMatrix attributes */
					export interface SVGFEConvolveMatrixAttributes extends SVGAttributes {
						/**
 * The bias attribute shifts the range of the filter.
 */
bias: JSXAttributeValue;
					/**
 * The divisor attribute specifies the value by which the resulting number of applying the kernelMatrix of a <feConvolveMatrix> element to the input image color value is divided to yield the destination color value.
 */
divisor: JSXAttributeValue;
					/**
 * The edgeMode attribute determines how to extend the input image as necessary with color values so that the matrix operations can be applied when the kernel is positioned at or near the edge of the input image.
 */
edgeMode: JSXAttributeValue;
					/**
 * The in attribute identifies input for the given filter primitive.
 */
in: JSXAttributeValue;
					/**
 * The kernelMatrix attribute defines the list of numbers that make up the kernel matrix for the <feConvolveMatrix> element.
 */
kernelMatrix: JSXAttributeValue;
					/**
 * The kernelUnitLength attribute has two meanings based on the context it's used in.
 */
kernelUnitLength: JSXAttributeValue;
					/**
 * The order attribute indicates the size of the matrix to be used by a <feConvolveMatrix> element.
 */
order: JSXAttributeValue;
					/**
 * the preserveAlpha attribute indicates how a <feConvolveMatrix> element handles alpha transparency.
 */
preserveAlpha: JSXAttributeValue;
					/**
 * The targetX attribute determines the positioning in horizontal direction of the convolution matrix relative to a given target pixel in the input image.
 */
targetX: JSXAttributeValue;
					/**
 * The targetY attribute determines the positioning in vertical direction of the convolution matrix relative to a given target pixel in the input image.
 */
targetY: JSXAttributeValue;
					}
				
					/* feDiffuseLighting attributes */
					export interface SVGFEDiffuseLightingAttributes extends SVGAttributes {
						/**
 * The diffuseConstant attribute represents the kd value in the Phong lighting model.
 */
diffuseConstant: JSXAttributeValue;
					/**
 * The in attribute identifies input for the given filter primitive.
 */
in: JSXAttributeValue;
					/**
 * The kernelUnitLength attribute has two meanings based on the context it's used in.
 */
kernelUnitLength: JSXAttributeValue;
					/**
 * The surfaceScale attribute represents the height of the surface for a light filter primitive.
 */
surfaceScale: JSXAttributeValue;
					}
				
					/* feDisplacementMap attributes */
					export interface SVGFEDisplacementMapAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					in2: JSXAttributeValue;
					/**
 * The scale attribute defines the displacement scale factor to be used on a <feDisplacementMap> filter primitive.
 */
scale: JSXAttributeValue;
					/**
 * The xChannelSelector attribute indicates which color channel from in2 to use to displace the pixels in in along the x-axis.
 */
xChannelSelector: JSXAttributeValue;
					/**
 * The yChannelSelector attribute indicates which color channel from in2 to use to displace the pixels in in along the y-axis.
 */
yChannelSelector: JSXAttributeValue;
					}
				
					/* feDistantLight attributes */
					export interface SVGFEDistantLightAttributes extends SVGAttributes {
						/**
 * The azimuth attribute specifies the direction angle for the light source on the XY plane (clockwise), in degrees from the x axis.
 * @example
 * <svg
 *   viewBox="0 0 440 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter id="distantLight1">
 *     <feDiffuseLighting>
 *       <feDistantLight azimuth="0" />
 *     </feDiffuseLighting>
 *   </filter>
 *   <filter id="distantLight2">
 *     <feDiffuseLighting>
 *       <feDistantLight azimuth="240" />
 *     </feDiffuseLighting>
 *   </filter>
 * 
 *   <circle
 *     cx="100"
 *     cy="100"
 *     r="80"
 *     filter="url(#distantLight1)"
 *   />
 *   <circle
 *     cx="340"
 *     cy="100"
 *     r="80"
 *     filter="url(#distantLight2)"
 *   />
 * </svg>
 */
azimuth: JSXAttributeValue;
					/**
 * The elevation attribute specifies the direction angle for the light source from the XY plane towards the Z-axis, in degrees.
 * @example
 * <svg
 *   viewBox="0 0 440 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter id="distantLight1">
 *     <feDiffuseLighting>
 *       <feDistantLight elevation="0" />
 *     </feDiffuseLighting>
 *   </filter>
 *   <filter id="distantLight2">
 *     <feDiffuseLighting>
 *       <feDistantLight elevation="45" />
 *     </feDiffuseLighting>
 *   </filter>
 * 
 *   <circle
 *     cx="100"
 *     cy="100"
 *     r="80"
 *     filter="url(#distantLight1)"
 *   />
 *   <circle
 *     cx="340"
 *     cy="100"
 *     r="80"
 *     filter="url(#distantLight2)"
 *   />
 * </svg>
 */
elevation: JSXAttributeValue;
					}
				
					/* feDropShadow attributes */
					export interface SVGFEDropShadowAttributes extends SVGAttributes {
						dx: JSXAttributeValue;
					dy: JSXAttributeValue;
					in: JSXAttributeValue;
					stdDeviation: JSXAttributeValue;
					}
				
					/* feGaussianBlur attributes */
					export interface SVGFEGaussianBlurAttributes extends SVGAttributes {
						edgeMode: JSXAttributeValue;
					in: JSXAttributeValue;
					/**
 * The stdDeviation attribute defines the standard deviation for the blur operation.
 */
stdDeviation: JSXAttributeValue;
					}
				
					/* feImage attributes */
					export interface SVGFEImageAttributes extends SVGAttributes {
						/**
 * The crossorigin attribute, valid on the <image> and <feImage> elements, provides support for configuration of the Cross-Origin Resource Sharing (CORS) requests for the element's fetched data.
 * @example
 * <svg
 *   width="200"
 *   height="200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <image
 *     href="https://example.com/mdn_logo_dark.png"
 *     height="200"
 *     width="200"
 *     crossorigin="use-credentials"
 *   />
 * </svg>
 */
crossorigin: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					preserveAspectRatio: JSXAttributeValue;
					}
				
					/* feMergeNode attributes */
					export interface SVGFEMergeNodeAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					}
				
					/* feMorphology attributes */
					export interface SVGFEMorphologyAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					operator: JSXAttributeValue;
					/**
 * The radius attribute represents the radius (or radii) for the operation on a given <feMorphology> filter primitive.
 */
radius: JSXAttributeValue;
					}
				
					/* feOffset attributes */
					export interface SVGFEOffsetAttributes extends SVGAttributes {
						dx: JSXAttributeValue;
					dy: JSXAttributeValue;
					in: JSXAttributeValue;
					}
				
					/* fePointLight attributes */
					export interface SVGFEPointLightAttributes extends SVGAttributes {
						x: JSXAttributeValue;
					y: JSXAttributeValue;
					z: JSXAttributeValue;
					}
				
					/* feSpecularLighting attributes */
					export interface SVGFESpecularLightingAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					kernelUnitLength: JSXAttributeValue;
					/**
 * The specularConstant attribute controls the ratio of reflection of the specular lighting.
 */
specularConstant: JSXAttributeValue;
					specularExponent: JSXAttributeValue;
					surfaceScale: JSXAttributeValue;
					}
				
					/* feSpotLight attributes */
					export interface SVGFESpotLightAttributes extends SVGAttributes {
						/**
 * The limitingConeAngle attribute represents the angle in degrees between the spot light axis (i.
 */
limitingConeAngle: JSXAttributeValue;
					/**
 * The pointsAtX attribute represents the x location in the coordinate system established by attribute primitiveUnits on the <filter> element of the point at which the light source is pointing.
 */
pointsAtX: JSXAttributeValue;
					/**
 * The pointsAtY attribute represents the y location in the coordinate system established by attribute primitiveUnits on the <filter> element of the point at which the light source is pointing.
 */
pointsAtY: JSXAttributeValue;
					/**
 * The pointsAtZ attribute represents the z location in the coordinate system established by attribute primitiveUnits on the <filter> element of the point at which the light source is pointing, assuming that, in the initial local coordinate system, the positive z-axis comes out towards the person viewing the content and assuming that one unit along the z-axis equals one unit in x and y.
 */
pointsAtZ: JSXAttributeValue;
					specularExponent: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					z: JSXAttributeValue;
					}
				
					/* feTile attributes */
					export interface SVGFETileAttributes extends SVGAttributes {
						in: JSXAttributeValue;
					}
				
					/* feTurbulence attributes */
					export interface SVGFETurbulenceAttributes extends SVGAttributes {
						/**
 * The baseFrequency attribute represents the base frequency parameter for the noise function of the <feTurbulence> filter primitive.
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter
 *     id="noise1"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.025" />
 *   </filter>
 *   <filter
 *     id="noise2"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.05" />
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise1)"
 *   />
 *   <rect
 *     x="220"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise2)"
 *   />
 * </svg>
 */
baseFrequency: JSXAttributeValue;
					/**
 * The numOctaves attribute defines the number of octaves for the noise function of the <feTurbulence> primitive.
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter
 *     id="noise1"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.025" numOctaves="1" />
 *   </filter>
 *   <filter
 *     id="noise2"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.025" numOctaves="3" />
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise1)"
 *   />
 *   <rect
 *     x="220"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise2)"
 *   />
 * </svg>
 */
numOctaves: JSXAttributeValue;
					/**
 * The seed attribute represents the starting number for the pseudo random number generator of the <feTurbulence> filter primitive.
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <filter
 *     id="noise1"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.025" seed="0" />
 *   </filter>
 *   <filter
 *     id="noise2"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feTurbulence baseFrequency="0.025" seed="100" />
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise1)"
 *   />
 *   <rect
 *     x="220"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#noise2)"
 *   />
 * </svg>
 */
seed: JSXAttributeValue;
					/**
 * The stitchTiles attribute defines how the Perlin Noise tiles behave at the border.
 */
stitchTiles: JSXAttributeValue;
					/**
 * The type attribute is a generic attribute and it has different meaning based on the context in which it's used.
 */
type: JSXAttributeValue;
					}
				
					/* filter attributes */
					export interface SVGFilterAttributes extends SVGAttributes {
						/**
 * The filterUnits attribute defines the coordinate system for the attributes x, y, width and height.
 */
filterUnits: JSXAttributeValue;
					/**
 * The height attribute defines the vertical length of an element in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- With a height of 0 or less, nothing will be rendered -->
 *   <rect y="0" x="0" width="90" height="0" />
 *   <rect y="0" x="100" width="90" height="60" />
 *   <rect y="0" x="200" width="90" height="100%" />
 * </svg>
 */
height: JSXAttributeValue;
					/**
 * The primitiveUnits attribute specifies the coordinate system for the various length values within the filter primitives and for the attributes that define the filter primitive subregion.
 */
primitiveUnits: JSXAttributeValue;
					/**
 * The width attribute defines the horizontal length of an element in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- With a width of 0 or less, nothing will be rendered -->
 *   <rect
 *     x="0"
 *     y="0"
 *     width="0"
 *     height="90"
 *     fill="red"
 *     stroke-width="5"
 *     stroke="black"
 *   />
 *   <rect
 *     x="0"
 *     y="100"
 *     width="60"
 *     height="90"
 *     fill="red"
 *     stroke-width="5"
 *     stroke="black"
 *   />
 *   <rect
 *     x="0"
 *     y="200"
 *     width="100%"
 *     height="90"
 *     fill="red"
 *     stroke-width="5"
 *     stroke="black"
 *   />
 * </svg>
 */
width: JSXAttributeValue;
					/**
 * The x attribute defines an x-axis coordinate in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="220" y="20" width="60" height="60" fill="red" />
 *   <rect
 *     x="120"
 *     y="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *   />
 *   <rect x="20" y="20" width="60" height="60" fill="blue" />
 * </svg>
 */
x: JSXAttributeValue;
					/**
 * The y attribute defines a y-axis coordinate in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect y="220" x="20" width="60" height="60" fill="red" />
 *   <rect
 *     y="120"
 *     x="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *   />
 *   <rect
 *     y="20"
 *     x="20"
 *     width="60"
 *     height="60"
 *     fill="purple"
 *   />
 * </svg>
 */
y: JSXAttributeValue;
					}
				
					/* foreignObject attributes */
					export interface SVGForeignObjectAttributes extends SVGAttributes {
						height: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* g attributes */
					export interface SVGGAttributes extends SVGAttributes {
						/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* image attributes */
					export interface SVGImageAttributes extends SVGAttributes {
						/**
 * The crossorigin attribute, valid on the <image> and <feImage> elements, provides support for configuration of the Cross-Origin Resource Sharing (CORS) requests for the element's fetched data.
 * @example
 * <svg
 *   width="200"
 *   height="200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <image
 *     href="https://example.com/mdn_logo_dark.png"
 *     height="200"
 *     width="200"
 *     crossorigin="use-credentials"
 *   />
 * </svg>
 */
crossorigin: JSXAttributeValue;
					/**
 * The decoding attribute, valid on <image> elements, provides a hint to the browser as to whether it should perform image decoding along with rendering other content in a single presentation step that looks more "correct" (sync), or render and present the other content first and then decode the image and present it later (async).
 * @example
 * <svg
 *   width="200"
 *   height="200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <image
 *     href="https://example.com/mdn_logo_dark.png"
 *     height="200"
 *     width="200"
 *     decoding="async"
 *   />
 * </svg>
 */
decoding: JSXAttributeValue;
					height: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					preserveAspectRatio: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* line attributes */
					export interface SVGLineAttributes extends SVGAttributes {
						/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The x1 attribute is used to specify the first x-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="5" y1="1" y2="9" stroke="red" />
 *   <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
 *   <line x1="9" x2="5" y1="1" y2="9" stroke="blue" />
 * </svg>
 */
x1: JSXAttributeValue;
					/**
 * The x2 attribute is used to specify the second x-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="5" x2="1" y1="1" y2="9" stroke="red" />
 *   <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
 *   <line x1="5" x2="9" y1="1" y2="9" stroke="blue" />
 * </svg>
 */
x2: JSXAttributeValue;
					/**
 * The y1 attribute is used to specify the first y-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="9" y1="1" y2="5" stroke="red" />
 *   <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
 *   <line x1="1" x2="9" y1="9" y2="5" stroke="blue" />
 * </svg>
 */
y1: JSXAttributeValue;
					/**
 * The y2 attribute is used to specify the second y-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="9" y1="5" y2="1" stroke="red" />
 *   <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
 *   <line x1="1" x2="9" y1="5" y2="9" stroke="blue" />
 * </svg>
 */
y2: JSXAttributeValue;
					}
				
					/* linearGradient attributes */
					export interface SVGLinearGradientAttributes extends SVGAttributes {
						/**
 * The gradientTransform attribute contains the definition of an optional additional transformation from the gradient coordinate system onto the target coordinate system (i.
 */
gradientTransform: JSXAttributeValue;
					/**
 * The gradientUnits attribute defines the coordinate system used for attributes specified on the gradient elements.
 */
gradientUnits: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The spreadMethod attribute determines how a shape is filled beyond the defined edges of a gradient.
 */
spreadMethod: JSXAttributeValue;
					/**
 * The x1 attribute is used to specify the first x-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="5" y1="1" y2="9" stroke="red" />
 *   <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
 *   <line x1="9" x2="5" y1="1" y2="9" stroke="blue" />
 * </svg>
 */
x1: JSXAttributeValue;
					/**
 * The x2 attribute is used to specify the second x-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="5" x2="1" y1="1" y2="9" stroke="red" />
 *   <line x1="5" x2="5" y1="1" y2="9" stroke="green" />
 *   <line x1="5" x2="9" y1="1" y2="9" stroke="blue" />
 * </svg>
 */
x2: JSXAttributeValue;
					/**
 * The y1 attribute is used to specify the first y-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="9" y1="1" y2="5" stroke="red" />
 *   <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
 *   <line x1="1" x2="9" y1="9" y2="5" stroke="blue" />
 * </svg>
 */
y1: JSXAttributeValue;
					/**
 * The y2 attribute is used to specify the second y-coordinate for drawing an SVG element that requires more than one coordinate.
 * @example
 * <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *   <line x1="1" x2="9" y1="5" y2="1" stroke="red" />
 *   <line x1="1" x2="9" y1="5" y2="5" stroke="green" />
 *   <line x1="1" x2="9" y1="5" y2="9" stroke="blue" />
 * </svg>
 */
y2: JSXAttributeValue;
					}
				
					/* marker attributes */
					export interface SVGMarkerAttributes extends SVGAttributes {
						/**
 * The markerHeight attribute represents the height of the viewport into which the <marker> is to be fitted when it is rendered according to the viewBox and preserveAspectRatio attributes.
 */
markerHeight: JSXAttributeValue;
					/**
 * The markerUnits attribute defines the coordinate system for the markerWidth and markerHeight attributes and the contents of the <marker>.
 */
markerUnits: JSXAttributeValue;
					/**
 * The markerWidth attribute represents the width of the viewport into which the <marker> is to be fitted when it is rendered according to the viewBox and preserveAspectRatio attributes.
 */
markerWidth: JSXAttributeValue;
					/**
 * The orient attribute indicates how a marker is rotated when it is placed at its position on the shape.
 */
orient: JSXAttributeValue;
					refX: JSXAttributeValue;
					refY: JSXAttributeValue;
					viewBox: JSXAttributeValue;
					}
				
					/* mask attributes */
					export interface SVGMaskAttributes extends SVGAttributes {
						height: JSXAttributeValue;
					/**
 * The maskContentUnits attribute indicates which coordinate system to use for the contents of the <mask> element.
 */
maskContentUnits: JSXAttributeValue;
					/**
 * The maskUnits attribute indicates which coordinate system to use for the geometry properties of the <mask> element.
 */
maskUnits: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* mpath attributes */
					export interface SVGMPathAttributes extends SVGAttributes {
						/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					}
				
					/* path attributes */
					export interface SVGPathAttributes extends SVGAttributes {
						/**
 * The d attribute defines a path to be drawn.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <path
 *     fill="none"
 *     stroke="red"
 *     d="M 10,30
 *        A 20,20 0,0,1 50,30
 *        A 20,20 0,0,1 90,30
 *        Q 90,60 50,90
 *        Q 10,60 10,30 z"
 *   />
 * </svg>
 */
d: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* pattern attributes */
					export interface SVGPatternAttributes extends SVGAttributes {
						height: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The patternContentUnits attribute indicates which coordinate system to use for the contents of the <pattern> element.
 */
patternContentUnits: JSXAttributeValue;
					/**
 * The patternTransform attribute defines a list of transform definitions that are applied to a pattern tile.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Apply a transform on the tile -->
 *   <pattern
 *     id="p1"
 *     width=".25"
 *     height=".25"
 *     patternTransform="rotate(20)
 *                       skewX(30)
 *                       scale(1 0.5)"
 *   >
 *     <circle cx="10" cy="10" r="10" />
 *   </pattern>
 * 
 *   <!-- Apply the transformed pattern tile -->
 *   <rect
 *     x="10"
 *     y="10"
 *     width="80"
 *     height="80"
 *     fill="url(#p1)"
 *   />
 * </svg>
 */
patternTransform: JSXAttributeValue;
					/**
 * The patternUnits attribute indicates which coordinate system to use for the geometry properties of the <pattern> element.
 */
patternUnits: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* polygon attributes */
					export interface SVGPolygonAttributes extends SVGAttributes {
						/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					points: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* polyline attributes */
					export interface SVGPolylineAttributes extends SVGAttributes {
						/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					points: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* radialGradient attributes */
					export interface SVGRadialGradientAttributes extends SVGAttributes {
						/**
 * The cx attribute defines the x-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cx="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cx="50" cy="50" r="45" />
 *   <ellipse cx="150" cy="50" rx="45" ry="25" />
 *   <rect
 *     x="205"
 *     y="5"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cx: JSXAttributeValue;
					/**
 * The cy attribute defines the y-axis coordinate of a center point.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <radialGradient cy="25%" id="myGradient">
 *     <stop offset="0" stop-color="white" />
 *     <stop offset="100%" stop-color="black" />
 *   </radialGradient>
 * 
 *   <circle cy="50" cx="50" r="45" />
 *   <ellipse cy="150" cx="50" rx="45" ry="25" />
 *   <rect
 *     x="5"
 *     y="205"
 *     width="90"
 *     height="90"
 *     fill="url(#myGradient)"
 *   />
 * </svg>
 */
cy: JSXAttributeValue;
					/**
 * The fr attribute defines the radius of the focal point for the radial gradient.
 */
fr: JSXAttributeValue;
					/**
 * The fx attribute defines the x-axis coordinate of the focal point for a radial gradient.
 */
fx: JSXAttributeValue;
					/**
 * The fy attribute defines the y-axis coordinate of the focal point for a radial gradient.
 */
fy: JSXAttributeValue;
					/**
 * The gradientTransform attribute contains the definition of an optional additional transformation from the gradient coordinate system onto the target coordinate system (i.
 */
gradientTransform: JSXAttributeValue;
					/**
 * The gradientUnits attribute defines the coordinate system used for attributes specified on the gradient elements.
 */
gradientUnits: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The r attribute defines the radius of a circle.
 */
r: JSXAttributeValue;
					/**
 * The spreadMethod attribute determines how a shape is filled beyond the defined edges of a gradient.
 */
spreadMethod: JSXAttributeValue;
					}
				
					/* rect attributes */
					export interface SVGRectAttributes extends SVGAttributes {
						/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					height: JSXAttributeValue;
					rx: JSXAttributeValue;
					ry: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* script attributes */
					export interface SVGScriptAttributes extends SVGAttributes {
						/**
 * @experimental
 */
async: JSXAttributeValue;
					/**
 * @experimental
 */
defer: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* set attributes */
					export interface SVGSetAttributes extends SVGAttributes {
						/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					to: JSXAttributeValue;
					}
				
					/* stop attributes */
					export interface SVGStopAttributes extends SVGAttributes {
						offset: JSXAttributeValue;
					}
				
					/* style attributes */
					export interface SVGStyleAttributes extends SVGAttributes {
						/**
 * The media attribute specifies a media query that must be matched for a style sheet to apply.
 * @example
 * <svg
 *   viewBox="0 0 240 220"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <style>
 *     rect {
 *       fill: black;
 *     }
 *   </style>
 *   <style media="(width >= 600px)">
 *     rect {
 *       fill: seagreen;
 *     }
 *   </style>
 * 
 *   <text y="15">Resize the window to see the effect</text>
 *   <rect y="20" width="200" height="200" />
 * </svg>
 */
media: JSXAttributeValue;
					title: JSXAttributeValue;
					type: JSXAttributeValue;
					}
				
					/* svg attributes */
					export interface SVGSVGAttributes extends SVGAttributes {
						/**
 * @deprecated
 */
baseProfile: JSXAttributeValue;
					height: JSXAttributeValue;
					preserveAspectRatio: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The version attribute is used to indicate what specification a SVG document conforms to.
 * @example
 * <svg
 *   version="1.1"
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="10" y="10" width="80" height="80" />
 * </svg>
 * @deprecated
 */
version: JSXAttributeValue;
					viewBox: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					/**
 * The zoomAndPan attribute specifies whether the SVG document can be magnified and panned.
 * @example
 * <svg
 *   viewBox="0 0 200 200"
 *   xmlns="http://www.w3.org/2000/svg"
 *   zoomAndPan="disable"
 * >
 *   <filter
 *     id="diffuseLighting"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feDiffuseLighting in="SourceGraphic" zoomAndPan="1">
 *       <fePointLight x="60" y="60" z="20" />
 *     </feDiffuseLighting>
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#diffuseLighting)"
 *   />
 * </svg>
 * @deprecated
 */
zoomAndPan: JSXAttributeValue;
					}
				
					/* switch attributes */
					export interface SVGSwitchAttributes extends SVGAttributes {
						/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					}
				
					/* symbol attributes */
					export interface SVGSymbolAttributes extends SVGAttributes {
						preserveAspectRatio: JSXAttributeValue;
					viewBox: JSXAttributeValue;
					}
				
					/* text attributes */
					export interface SVGTextAttributes extends SVGAttributes {
						/**
 * The dx attribute indicates a shift along the x-axis on the position of an element or its content.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Lines materialized the position of the glyphs -->
 *   <line x1="0" x2="100%" y1="50%" y2="50%" />
 *   <line x1="10%" x2="10%" y1="0" y2="100%" />
 *   <line x1="60%" x2="60%" y1="0" y2="100%" />
 * 
 *   <!-- Some reference text -->
 *   <text x="10%" y="50%" fill="grey">SVG</text>
 * 
 *   <!-- The same text with a shift along the x-axis -->
 *   <text dx="50%" x="10%" y="50%">SVG</text>
 * </svg>
 */
dx: JSXAttributeValue;
					/**
 * The dy attribute indicates a shift along the y-axis on the position of an element or its content.
 * @example
 * <svg
 *   viewBox="0 0 100 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <!-- Lines materialized the position of the glyphs -->
 *   <line x1="10%" x2="10%" y1="0" y2="100%" />
 *   <line x1="0" x2="100%" y1="30%" y2="30%" />
 *   <line x1="0" x2="100%" y1="80%" y2="80%" />
 * 
 *   <!-- Some reference text -->
 *   <text x="10%" y="30%" fill="grey">SVG</text>
 * 
 *   <!-- The same text with a shift along the y-axis -->
 *   <text dy="50%" x="10%" y="30%">SVG</text>
 * </svg>
 */
dy: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The lengthAdjust attribute controls how the text is stretched into the length defined by the textLength attribute.
 */
lengthAdjust: JSXAttributeValue;
					/**
 * The rotate attribute specifies how the animated element rotates as it travels along a path specified in an <animateMotion> element.
 */
rotate: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The textLength attribute, available on SVG <text> and <tspan> elements, lets you specify the width of the space into which the text will draw.
 * @example
 * <svg
 *   viewBox="0 0 200 60"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" textLength="6em">Small text length</text>
 *   <text y="40" textLength="120%">Big text length</text>
 * </svg>
 */
textLength: JSXAttributeValue;
					/**
 * The x attribute defines an x-axis coordinate in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 300 100"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect x="220" y="20" width="60" height="60" fill="red" />
 *   <rect
 *     x="120"
 *     y="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *   />
 *   <rect x="20" y="20" width="60" height="60" fill="blue" />
 * </svg>
 */
x: JSXAttributeValue;
					/**
 * The y attribute defines a y-axis coordinate in the user coordinate system.
 * @example
 * <svg
 *   viewBox="0 0 100 300"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <rect y="220" x="20" width="60" height="60" fill="red" />
 *   <rect
 *     y="120"
 *     x="20"
 *     width="60"
 *     height="60"
 *     fill="yellow"
 *   />
 *   <rect
 *     y="20"
 *     x="20"
 *     width="60"
 *     height="60"
 *     fill="purple"
 *   />
 * </svg>
 */
y: JSXAttributeValue;
					}
				
					/* textPath attributes */
					export interface SVGTextPathAttributes extends SVGAttributes {
						/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * @experimental
 */
path: JSXAttributeValue;
					/**
 * The side attribute determines the side of a path the text is placed on (relative to the path direction).
 * @example
 * <svg
 *   viewBox="0 0 420 200"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text>
 *     <textPath href="#circle1" side="left">
 *       Text left from the path
 *     </textPath>
 *   </text>
 *   <text>
 *     <textPath href="#circle2" side="right">
 *       Text right from the path
 *     </textPath>
 *   </text>
 * 
 *   <circle
 *     id="circle1"
 *     cx="100"
 *     cy="100"
 *     r="70"
 *     fill="transparent"
 *     stroke="silver"
 *   />
 *   <circle
 *     id="circle2"
 *     cx="320"
 *     cy="100"
 *     r="70"
 *     fill="transparent"
 *     stroke="silver"
 *   />
 * </svg>
 * @experimental
 */
side: JSXAttributeValue;
					/**
 * The spacing attribute indicates how the user agent should determine the spacing between typographic characters that are to be rendered along a path.
 */
spacing: JSXAttributeValue;
					/**
 * The startOffset attribute defines an offset from the start of the path for the initial current text position along the path after converting the path to the <textPath> element's coordinate system.
 */
startOffset: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The textLength attribute, available on SVG <text> and <tspan> elements, lets you specify the width of the space into which the text will draw.
 * @example
 * <svg
 *   viewBox="0 0 200 60"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" textLength="6em">Small text length</text>
 *   <text y="40" textLength="120%">Big text length</text>
 * </svg>
 */
textLength: JSXAttributeValue;
					}
				
					/* tspan attributes */
					export interface SVGTSpanAttributes extends SVGAttributes {
						dx: JSXAttributeValue;
					dy: JSXAttributeValue;
					/**
 * The fill attribute has two different meanings.
 */
fill: JSXAttributeValue;
					lengthAdjust: JSXAttributeValue;
					rotate: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					/**
 * The textLength attribute, available on SVG <text> and <tspan> elements, lets you specify the width of the space into which the text will draw.
 * @example
 * <svg
 *   viewBox="0 0 200 60"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <text y="20" textLength="6em">Small text length</text>
 *   <text y="40" textLength="120%">Big text length</text>
 * </svg>
 */
textLength: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* use attributes */
					export interface SVGUseAttributes extends SVGAttributes {
						height: JSXAttributeValue;
					/**
 * The href attribute defines a link to a resource as a reference URL.
 * @example
 * <svg
 *   viewBox="0 0 160 40"
 *   xmlns="http://www.w3.org/2000/svg"
 * >
 *   <a href="https://developer.mozilla.org/">
 *     <text x="10" y="25">MDN Web Docs</text>
 *   </a>
 * </svg>
 */
href: JSXAttributeValue;
					/**
 * The systemLanguage attribute represents a list of supported language tags.
 * @example
 * <text systemLanguage="mi, en">
 *   <!-- content goes here -->
 * </text>
 */
systemLanguage: JSXAttributeValue;
					width: JSXAttributeValue;
					x: JSXAttributeValue;
					y: JSXAttributeValue;
					}
				
					/* view attributes */
					export interface SVGViewAttributes extends SVGAttributes {
						preserveAspectRatio: JSXAttributeValue;
					viewBox: JSXAttributeValue;
					/**
 * The zoomAndPan attribute specifies whether the SVG document can be magnified and panned.
 * @example
 * <svg
 *   viewBox="0 0 200 200"
 *   xmlns="http://www.w3.org/2000/svg"
 *   zoomAndPan="disable"
 * >
 *   <filter
 *     id="diffuseLighting"
 *     x="0"
 *     y="0"
 *     width="100%"
 *     height="100%"
 *   >
 *     <feDiffuseLighting in="SourceGraphic" zoomAndPan="1">
 *       <fePointLight x="60" y="60" z="20" />
 *     </feDiffuseLighting>
 *   </filter>
 * 
 *   <rect
 *     x="0"
 *     y="0"
 *     width="200"
 *     height="200"
 *     filter="url(#diffuseLighting)"
 *   />
 * </svg>
 * @deprecated
 */
zoomAndPan: JSXAttributeValue;
					}
				
			/** Map of SVG tag names to their attribute interfaces */
			export interface SVGAttributesTagNamesMap {
				a: SVGAAttributes;
animate: SVGAnimateAttributes;
animateMotion: SVGAnimateMotionAttributes;
animateTransform: SVGAnimateTransformAttributes;
circle: SVGCircleAttributes;
clipPath: SVGClipPathAttributes;
defs: SVGDefsAttributes;
desc: SVGAttributes;
ellipse: SVGEllipseAttributes;
feBlend: SVGFEBlendAttributes;
feColorMatrix: SVGFEColorMatrixAttributes;
feComponentTransfer: SVGFEComponentTransferAttributes;
feComposite: SVGFECompositeAttributes;
feConvolveMatrix: SVGFEConvolveMatrixAttributes;
feDiffuseLighting: SVGFEDiffuseLightingAttributes;
feDisplacementMap: SVGFEDisplacementMapAttributes;
feDistantLight: SVGFEDistantLightAttributes;
feDropShadow: SVGFEDropShadowAttributes;
feFlood: SVGAttributes;
feFuncA: SVGAttributes;
feFuncB: SVGAttributes;
feFuncG: SVGAttributes;
feFuncR: SVGAttributes;
feGaussianBlur: SVGFEGaussianBlurAttributes;
feImage: SVGFEImageAttributes;
feMerge: SVGAttributes;
feMergeNode: SVGFEMergeNodeAttributes;
feMorphology: SVGFEMorphologyAttributes;
feOffset: SVGFEOffsetAttributes;
fePointLight: SVGFEPointLightAttributes;
feSpecularLighting: SVGFESpecularLightingAttributes;
feSpotLight: SVGFESpotLightAttributes;
feTile: SVGFETileAttributes;
feTurbulence: SVGFETurbulenceAttributes;
filter: SVGFilterAttributes;
foreignObject: SVGForeignObjectAttributes;
g: SVGGAttributes;
image: SVGImageAttributes;
line: SVGLineAttributes;
linearGradient: SVGLinearGradientAttributes;
marker: SVGMarkerAttributes;
mask: SVGMaskAttributes;
metadata: SVGAttributes;
mpath: SVGMPathAttributes;
path: SVGPathAttributes;
pattern: SVGPatternAttributes;
polygon: SVGPolygonAttributes;
polyline: SVGPolylineAttributes;
radialGradient: SVGRadialGradientAttributes;
rect: SVGRectAttributes;
script: SVGScriptAttributes;
set: SVGSetAttributes;
stop: SVGStopAttributes;
style: SVGStyleAttributes;
svg: SVGSVGAttributes;
switch: SVGSwitchAttributes;
symbol: SVGSymbolAttributes;
text: SVGTextAttributes;
textPath: SVGTextPathAttributes;
title: SVGAttributes;
tspan: SVGTSpanAttributes;
use: SVGUseAttributes;
view: SVGViewAttributes;
			}
		
			export interface MathMLAttributes extends GlobalAttributes {
				/**
 * The dir global attribute is an enumerated attribute that indicates the directionality of the MathML element.
 * @example
 * <!-- Moroccan style -->
 * <math display="block" dir="ltr">
 *   <msqrt>
 *     <mi>س</mi>
 *   </msqrt>
 *   <mo>=</mo>
 *   <msup>
 *     <mn>3</mn>
 *     <mi>ب</mi>
 *   </msup>
 * </math>
 * 
 * <!-- Maghreb/Machrek style -->
 * <math display="block" dir="rtl">
 *   <msqrt>
 *     <mi>س</mi>
 *   </msqrt>
 *   <mo>=</mo>
 *   <msup>
 *     <mn>٣</mn>
 *     <mi>ب</mi>
 *   </msup>
 * </math>
 */
dir: JSXAttributeValue;
				/**
 * The displaystyle global attribute is a boolean setting the math-style of a MathML element.
 * @example
 * <math>
 *   <munder>
 *     <mo>∑</mo>
 *     <mi>A</mi>
 *   </munder>
 *   <munder displaystyle="true">
 *     <mo>∑</mo>
 *     <mi>A</mi>
 *   </munder>
 * </math>
 */
displaystyle: JSXAttributeValue;
				/**
 * The href global attribute creates a hyperlink on the MathML element pointing to the specified URL.
 * @example
 * <math href="https://example.com/"></math>
 */
href: JSXAttributeValue;
				/**
 * The mathbackground global attribute sets the background-color of a MathML element.
 * @example
 * <math display="block" mathbackground="wheat">
 *   <msqrt>
 *     <mi>x</mi>
 *   </msqrt>
 * </math>
 * @deprecated
 */
mathbackground: JSXAttributeValue;
				/**
 * The mathcolor global attribute sets the color of a MathML element.
 * @example
 * <math display="block">
 *   <msqrt mathcolor="tomato">
 *     <mi mathcolor="darkgreen">x</mi>
 *   </msqrt>
 * </math>
 * @deprecated
 */
mathcolor: JSXAttributeValue;
				/**
 * The mathsize global attribute sets the font-size of a MathML element.
 * @example
 * <math display="block">
 *   <msup mathsize="16px">
 *     <mi>a</mi>
 *     <mn>2</mn>
 *   </msup>
 *   <mo>+</mo>
 *   <msup mathsize="24px">
 *     <mi>b</mi>
 *     <mn>2</mn>
 *   </msup>
 *   <mo>=</mo>
 *   <msup mathsize="32px">
 *     <mi>c</mi>
 *     <mn>2</mn>
 *   </msup>
 * </math>
 * @deprecated
 */
mathsize: JSXAttributeValue;
				/**
 * The scriptlevel global attribute sets the math-depth of a MathML element.
 * @example
 * <math scriptlevel="-1">
 *   <!-- decrease math-depth by 1 -->
 *   <math scriptlevel="+2">
 *     <!-- increase math-depth by 2 -->
 *     <math scriptlevel="0">
 *       <!-- reset math-depth to 0 -->
 *     </math>
 *   </math>
 * </math>
 */
scriptlevel: JSXAttributeValue;
				/**
 * @deprecated
 */
actiontype: JSXAttributeValue;
				/**
 * @deprecated
 */
selection: JSXAttributeValue;
				display: JSXAttributeValue;
				notation: JSXAttributeValue;
				/**
 * @deprecated
 */
denomalign: JSXAttributeValue;
				linethickness: JSXAttributeValue;
				/**
 * @deprecated
 */
numalign: JSXAttributeValue;
				mathvariant: JSXAttributeValue;
				/**
 * @deprecated
 */
subscriptshift: JSXAttributeValue;
				/**
 * @deprecated
 */
superscriptshift: JSXAttributeValue;
				accent: JSXAttributeValue;
				form: JSXAttributeValue;
				largeop: JSXAttributeValue;
				lspace: JSXAttributeValue;
				maxsize: JSXAttributeValue;
				minsize: JSXAttributeValue;
				movablelimits: JSXAttributeValue;
				rspace: JSXAttributeValue;
				stretchy: JSXAttributeValue;
				symmetric: JSXAttributeValue;
				depth: JSXAttributeValue;
				height: JSXAttributeValue;
				voffset: JSXAttributeValue;
				width: JSXAttributeValue;
				/**
 * @deprecated
 */
background: JSXAttributeValue;
				/**
 * @deprecated
 */
color: JSXAttributeValue;
				/**
 * @deprecated
 */
fontsize: JSXAttributeValue;
				/**
 * @deprecated
 */
fontstyle: JSXAttributeValue;
				/**
 * @deprecated
 */
fontweight: JSXAttributeValue;
				align: JSXAttributeValue;
				columnalign: JSXAttributeValue;
				columnlines: JSXAttributeValue;
				columnspacing: JSXAttributeValue;
				frame: JSXAttributeValue;
				framespacing: JSXAttributeValue;
				rowalign: JSXAttributeValue;
				rowlines: JSXAttributeValue;
				rowspacing: JSXAttributeValue;
				columnspan: JSXAttributeValue;
				rowspan: JSXAttributeValue;
				accentunder: JSXAttributeValue;
			}
		


			/** Map of MathML tag names to their attribute interfaces */
			export interface MathMLAttributesTagNamesMap {
				annotation: MathMLAttributes;
"annotation-xml": MathMLAttributes;
maction: MathMLAttributes;
math: MathMLAttributes;
merror: MathMLAttributes;
mfrac: MathMLAttributes;
mi: MathMLAttributes;
mmultiscripts: MathMLAttributes;
mn: MathMLAttributes;
mo: MathMLAttributes;
mover: MathMLAttributes;
mpadded: MathMLAttributes;
mphantom: MathMLAttributes;
mprescripts: MathMLAttributes;
mroot: MathMLAttributes;
mrow: MathMLAttributes;
ms: MathMLAttributes;
mspace: MathMLAttributes;
msqrt: MathMLAttributes;
mstyle: MathMLAttributes;
msub: MathMLAttributes;
msubsup: MathMLAttributes;
msup: MathMLAttributes;
mtable: MathMLAttributes;
mtd: MathMLAttributes;
mtext: MathMLAttributes;
mtr: MathMLAttributes;
munder: MathMLAttributes;
munderover: MathMLAttributes;
semantics: MathMLAttributes;
			}
		

		
		/**
		 * HTML void elements that cannot have child content
		 * Based on HTML5 specification and current browser implementations
		 * @see https://html.spec.whatwg.org/multipage/syntax.html#void-elements
		 */
		export type HTMLVoidTagNames = "area" | "base" | "br" | "col" | "command" | "embed" | "hr" | "img" | "input" | "link" | "meta" | "param" | "source" | "track" | "wbr";

		/**
		 * SVG elements that are typically self-closing
		 * These elements don't usually contain child content
		 */
		export type SVGVoidTagNames = "circle" | "ellipse" | "line" | "path" | "polygon" | "polyline" | "rect" | "use" | "image";

		/**
		 * MathML elements that are empty/self-closing
		 * These elements never contain child content
		 */
		export type MathMLVoidTagNames = "mspace";

		/**
		 * All void/self-closing elements across HTML, SVG, and MathML
		 */
		export type WebVoidElements = HTMLVoidTagNames | SVGVoidTagNames | MathMLVoidTagNames;
		
		// Legacy alias
		export type VoidElements = WebVoidElements;
	
	