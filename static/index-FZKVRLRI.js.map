{
  "version": 3,
  "sources": ["node_modules/prismjs/prism.js", "node_modules/sucrase/dist/parser/tokenizer/keywords.js", "node_modules/sucrase/dist/parser/tokenizer/types.js", "node_modules/sucrase/dist/parser/tokenizer/state.js", "node_modules/sucrase/dist/parser/util/charcodes.js", "node_modules/sucrase/dist/parser/traverser/base.js", "node_modules/sucrase/dist/parser/traverser/util.js", "node_modules/sucrase/dist/parser/util/whitespace.js", "node_modules/sucrase/dist/parser/util/identifier.js", "node_modules/sucrase/dist/parser/tokenizer/readWordTree.js", "node_modules/sucrase/dist/parser/tokenizer/readWord.js", "node_modules/sucrase/dist/parser/tokenizer/index.js", "node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js", "node_modules/sucrase/dist/util/getJSXPragmaInfo.js", "node_modules/sucrase/dist/transformers/Transformer.js", "node_modules/sucrase/dist/transformers/JSXTransformer.js", "node_modules/sucrase/dist/util/getNonTypeIdentifiers.js", "node_modules/sucrase/dist/CJSImportProcessor.js", "node_modules/sucrase/dist/computeSourceMap.js", "node_modules/sucrase/dist/HelperManager.js", "node_modules/sucrase/dist/identifyShadowedGlobals.js", "node_modules/sucrase/dist/util/getIdentifierNames.js", "node_modules/sucrase/dist/NameManager.js", "node_modules/ts-interface-checker/dist/util.js", "node_modules/ts-interface-checker/dist/types.js", "node_modules/ts-interface-checker/dist/index.js", "node_modules/sucrase/dist/Options-gen-types.js", "node_modules/sucrase/dist/Options.js", "node_modules/sucrase/dist/parser/traverser/lval.js", "node_modules/sucrase/dist/parser/plugins/typescript.js", "node_modules/sucrase/dist/parser/plugins/jsx/index.js", "node_modules/sucrase/dist/parser/plugins/types.js", "node_modules/sucrase/dist/parser/traverser/expression.js", "node_modules/sucrase/dist/parser/plugins/flow.js", "node_modules/sucrase/dist/parser/traverser/statement.js", "node_modules/sucrase/dist/parser/traverser/index.js", "node_modules/sucrase/dist/parser/index.js", "node_modules/sucrase/dist/util/isAsyncOperation.js", "node_modules/sucrase/dist/TokenProcessor.js", "node_modules/sucrase/dist/util/getClassInfo.js", "node_modules/sucrase/dist/util/elideImportEquals.js", "node_modules/sucrase/dist/util/getDeclarationInfo.js", "node_modules/sucrase/dist/util/shouldElideDefaultExport.js", "node_modules/sucrase/dist/transformers/CJSImportTransformer.js", "node_modules/sucrase/dist/transformers/ESMImportTransformer.js", "node_modules/sucrase/dist/transformers/FlowTransformer.js", "node_modules/sucrase/dist/transformers/JestHoistTransformer.js", "node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js", "node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js", "node_modules/sucrase/dist/transformers/OptionalChainingNullishTransformer.js", "node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js", "node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js", "node_modules/sucrase/dist/util/isIdentifier.js", "node_modules/sucrase/dist/transformers/TypeScriptTransformer.js", "node_modules/sucrase/dist/transformers/RootTransformer.js", "node_modules/lines-and-columns/dist/index.js", "node_modules/sucrase/dist/util/formatTokens.js", "node_modules/sucrase/dist/util/getTSImportedNames.js", "node_modules/@b9g/src/crank.ts", "node_modules/@b9g/src/dom.ts", "client/index.tsx", "node_modules/prismjs/components/prism-javascript.js", "node_modules/prismjs/components/prism-jsx.js", "node_modules/prismjs/components/prism-typescript.js", "node_modules/prismjs/components/prism-tsx.js", "node_modules/prismjs/components/prism-diff.js", "node_modules/prismjs/components/prism-bash.js", "node_modules/@b9g/src/subseq.ts", "node_modules/@b9g/src/edit.ts", "node_modules/@b9g/src/contentarea.ts", "node_modules/@b9g/src/keyer.ts", "node_modules/@b9g/src/history.ts", "shared/prism.tsx", "shared/contentarea.tsx", "node_modules/sucrase/dist/index.mjs"],
  "sourcesContent": ["\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element && !lang.test(element.className)) {\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\tif (element) {\n\t\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism\u2019s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you\u2019re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading\u2026';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '\u2716 Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '\u2716 Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\n\t/**\n\t * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.\n\t *\n\t * @param {HTMLElement} element\n\t * @param {string} language\n\t * @returns {void}\n\t */\n\tfunction setLanguageClass(element, language) {\n\t\tvar className = element.className;\n\t\tclassName = className.replace(lang, ' ') + ' language-' + language;\n\t\telement.className = className.replace(/\\s+/g, ' ').trim();\n\t}\n\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tsetLanguageClass(code, language);\n\t\t\tsetLanguageClass(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', src, true);\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tif (xhr.readyState == 4) {\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\t// mark as loaded\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t\t// highlight code\n\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\t\t\t\t\t\tPrism.highlightElement(code);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// mark as failed\n\t\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\t\tcode.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcode.textContent = FAILURE_EMPTY_MESSAGE;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\txhr.send(null);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var ContextualKeyword; (function (ContextualKeyword) {\n  const NONE = 0; ContextualKeyword[ContextualKeyword[\"NONE\"] = NONE] = \"NONE\";\n  const _abstract = NONE + 1; ContextualKeyword[ContextualKeyword[\"_abstract\"] = _abstract] = \"_abstract\";\n  const _as = _abstract + 1; ContextualKeyword[ContextualKeyword[\"_as\"] = _as] = \"_as\";\n  const _asserts = _as + 1; ContextualKeyword[ContextualKeyword[\"_asserts\"] = _asserts] = \"_asserts\";\n  const _async = _asserts + 1; ContextualKeyword[ContextualKeyword[\"_async\"] = _async] = \"_async\";\n  const _await = _async + 1; ContextualKeyword[ContextualKeyword[\"_await\"] = _await] = \"_await\";\n  const _checks = _await + 1; ContextualKeyword[ContextualKeyword[\"_checks\"] = _checks] = \"_checks\";\n  const _constructor = _checks + 1; ContextualKeyword[ContextualKeyword[\"_constructor\"] = _constructor] = \"_constructor\";\n  const _declare = _constructor + 1; ContextualKeyword[ContextualKeyword[\"_declare\"] = _declare] = \"_declare\";\n  const _enum = _declare + 1; ContextualKeyword[ContextualKeyword[\"_enum\"] = _enum] = \"_enum\";\n  const _exports = _enum + 1; ContextualKeyword[ContextualKeyword[\"_exports\"] = _exports] = \"_exports\";\n  const _from = _exports + 1; ContextualKeyword[ContextualKeyword[\"_from\"] = _from] = \"_from\";\n  const _get = _from + 1; ContextualKeyword[ContextualKeyword[\"_get\"] = _get] = \"_get\";\n  const _global = _get + 1; ContextualKeyword[ContextualKeyword[\"_global\"] = _global] = \"_global\";\n  const _implements = _global + 1; ContextualKeyword[ContextualKeyword[\"_implements\"] = _implements] = \"_implements\";\n  const _infer = _implements + 1; ContextualKeyword[ContextualKeyword[\"_infer\"] = _infer] = \"_infer\";\n  const _interface = _infer + 1; ContextualKeyword[ContextualKeyword[\"_interface\"] = _interface] = \"_interface\";\n  const _is = _interface + 1; ContextualKeyword[ContextualKeyword[\"_is\"] = _is] = \"_is\";\n  const _keyof = _is + 1; ContextualKeyword[ContextualKeyword[\"_keyof\"] = _keyof] = \"_keyof\";\n  const _mixins = _keyof + 1; ContextualKeyword[ContextualKeyword[\"_mixins\"] = _mixins] = \"_mixins\";\n  const _module = _mixins + 1; ContextualKeyword[ContextualKeyword[\"_module\"] = _module] = \"_module\";\n  const _namespace = _module + 1; ContextualKeyword[ContextualKeyword[\"_namespace\"] = _namespace] = \"_namespace\";\n  const _of = _namespace + 1; ContextualKeyword[ContextualKeyword[\"_of\"] = _of] = \"_of\";\n  const _opaque = _of + 1; ContextualKeyword[ContextualKeyword[\"_opaque\"] = _opaque] = \"_opaque\";\n  const _override = _opaque + 1; ContextualKeyword[ContextualKeyword[\"_override\"] = _override] = \"_override\";\n  const _private = _override + 1; ContextualKeyword[ContextualKeyword[\"_private\"] = _private] = \"_private\";\n  const _protected = _private + 1; ContextualKeyword[ContextualKeyword[\"_protected\"] = _protected] = \"_protected\";\n  const _proto = _protected + 1; ContextualKeyword[ContextualKeyword[\"_proto\"] = _proto] = \"_proto\";\n  const _public = _proto + 1; ContextualKeyword[ContextualKeyword[\"_public\"] = _public] = \"_public\";\n  const _readonly = _public + 1; ContextualKeyword[ContextualKeyword[\"_readonly\"] = _readonly] = \"_readonly\";\n  const _require = _readonly + 1; ContextualKeyword[ContextualKeyword[\"_require\"] = _require] = \"_require\";\n  const _set = _require + 1; ContextualKeyword[ContextualKeyword[\"_set\"] = _set] = \"_set\";\n  const _static = _set + 1; ContextualKeyword[ContextualKeyword[\"_static\"] = _static] = \"_static\";\n  const _type = _static + 1; ContextualKeyword[ContextualKeyword[\"_type\"] = _type] = \"_type\";\n  const _unique = _type + 1; ContextualKeyword[ContextualKeyword[\"_unique\"] = _unique] = \"_unique\";\n})(ContextualKeyword || (exports.ContextualKeyword = ContextualKeyword = {}));\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n/**\n * Enum of all token types, with bit fields to signify meaningful properties.\n */\nvar TokenType; (function (TokenType) {\n  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.\n  const PRECEDENCE_MASK = 0xf; TokenType[TokenType[\"PRECEDENCE_MASK\"] = PRECEDENCE_MASK] = \"PRECEDENCE_MASK\";\n  const IS_KEYWORD = 1 << 4; TokenType[TokenType[\"IS_KEYWORD\"] = IS_KEYWORD] = \"IS_KEYWORD\";\n  const IS_ASSIGN = 1 << 5; TokenType[TokenType[\"IS_ASSIGN\"] = IS_ASSIGN] = \"IS_ASSIGN\";\n  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType[\"IS_RIGHT_ASSOCIATIVE\"] = IS_RIGHT_ASSOCIATIVE] = \"IS_RIGHT_ASSOCIATIVE\";\n  const IS_PREFIX = 1 << 7; TokenType[TokenType[\"IS_PREFIX\"] = IS_PREFIX] = \"IS_PREFIX\";\n  const IS_POSTFIX = 1 << 8; TokenType[TokenType[\"IS_POSTFIX\"] = IS_POSTFIX] = \"IS_POSTFIX\";\n\n  const num = 0; TokenType[TokenType[\"num\"] = num] = \"num\"; // num\n  const bigint = 512; TokenType[TokenType[\"bigint\"] = bigint] = \"bigint\"; // bigint\n  const decimal = 1024; TokenType[TokenType[\"decimal\"] = decimal] = \"decimal\"; // decimal\n  const regexp = 1536; TokenType[TokenType[\"regexp\"] = regexp] = \"regexp\"; // regexp\n  const string = 2048; TokenType[TokenType[\"string\"] = string] = \"string\"; // string\n  const name = 2560; TokenType[TokenType[\"name\"] = name] = \"name\"; // name\n  const eof = 3072; TokenType[TokenType[\"eof\"] = eof] = \"eof\"; // eof\n  const bracketL = 3584; TokenType[TokenType[\"bracketL\"] = bracketL] = \"bracketL\"; // [\n  const bracketR = 4096; TokenType[TokenType[\"bracketR\"] = bracketR] = \"bracketR\"; // ]\n  const braceL = 4608; TokenType[TokenType[\"braceL\"] = braceL] = \"braceL\"; // {\n  const braceBarL = 5120; TokenType[TokenType[\"braceBarL\"] = braceBarL] = \"braceBarL\"; // {|\n  const braceR = 5632; TokenType[TokenType[\"braceR\"] = braceR] = \"braceR\"; // }\n  const braceBarR = 6144; TokenType[TokenType[\"braceBarR\"] = braceBarR] = \"braceBarR\"; // |}\n  const parenL = 6656; TokenType[TokenType[\"parenL\"] = parenL] = \"parenL\"; // (\n  const parenR = 7168; TokenType[TokenType[\"parenR\"] = parenR] = \"parenR\"; // )\n  const comma = 7680; TokenType[TokenType[\"comma\"] = comma] = \"comma\"; // ,\n  const semi = 8192; TokenType[TokenType[\"semi\"] = semi] = \"semi\"; // ;\n  const colon = 8704; TokenType[TokenType[\"colon\"] = colon] = \"colon\"; // :\n  const doubleColon = 9216; TokenType[TokenType[\"doubleColon\"] = doubleColon] = \"doubleColon\"; // ::\n  const dot = 9728; TokenType[TokenType[\"dot\"] = dot] = \"dot\"; // .\n  const question = 10240; TokenType[TokenType[\"question\"] = question] = \"question\"; // ?\n  const questionDot = 10752; TokenType[TokenType[\"questionDot\"] = questionDot] = \"questionDot\"; // ?.\n  const arrow = 11264; TokenType[TokenType[\"arrow\"] = arrow] = \"arrow\"; // =>\n  const template = 11776; TokenType[TokenType[\"template\"] = template] = \"template\"; // template\n  const ellipsis = 12288; TokenType[TokenType[\"ellipsis\"] = ellipsis] = \"ellipsis\"; // ...\n  const backQuote = 12800; TokenType[TokenType[\"backQuote\"] = backQuote] = \"backQuote\"; // `\n  const dollarBraceL = 13312; TokenType[TokenType[\"dollarBraceL\"] = dollarBraceL] = \"dollarBraceL\"; // ${\n  const at = 13824; TokenType[TokenType[\"at\"] = at] = \"at\"; // @\n  const hash = 14336; TokenType[TokenType[\"hash\"] = hash] = \"hash\"; // #\n  const eq = 14880; TokenType[TokenType[\"eq\"] = eq] = \"eq\"; // = isAssign\n  const assign = 15392; TokenType[TokenType[\"assign\"] = assign] = \"assign\"; // _= isAssign\n  const preIncDec = 16256; TokenType[TokenType[\"preIncDec\"] = preIncDec] = \"preIncDec\"; // ++/-- prefix postfix\n  const postIncDec = 16768; TokenType[TokenType[\"postIncDec\"] = postIncDec] = \"postIncDec\"; // ++/-- prefix postfix\n  const bang = 17024; TokenType[TokenType[\"bang\"] = bang] = \"bang\"; // ! prefix\n  const tilde = 17536; TokenType[TokenType[\"tilde\"] = tilde] = \"tilde\"; // ~ prefix\n  const pipeline = 17921; TokenType[TokenType[\"pipeline\"] = pipeline] = \"pipeline\"; // |> prec:1\n  const nullishCoalescing = 18434; TokenType[TokenType[\"nullishCoalescing\"] = nullishCoalescing] = \"nullishCoalescing\"; // ?? prec:2\n  const logicalOR = 18946; TokenType[TokenType[\"logicalOR\"] = logicalOR] = \"logicalOR\"; // || prec:2\n  const logicalAND = 19459; TokenType[TokenType[\"logicalAND\"] = logicalAND] = \"logicalAND\"; // && prec:3\n  const bitwiseOR = 19972; TokenType[TokenType[\"bitwiseOR\"] = bitwiseOR] = \"bitwiseOR\"; // | prec:4\n  const bitwiseXOR = 20485; TokenType[TokenType[\"bitwiseXOR\"] = bitwiseXOR] = \"bitwiseXOR\"; // ^ prec:5\n  const bitwiseAND = 20998; TokenType[TokenType[\"bitwiseAND\"] = bitwiseAND] = \"bitwiseAND\"; // & prec:6\n  const equality = 21511; TokenType[TokenType[\"equality\"] = equality] = \"equality\"; // ==/!= prec:7\n  const lessThan = 22024; TokenType[TokenType[\"lessThan\"] = lessThan] = \"lessThan\"; // < prec:8\n  const greaterThan = 22536; TokenType[TokenType[\"greaterThan\"] = greaterThan] = \"greaterThan\"; // > prec:8\n  const relationalOrEqual = 23048; TokenType[TokenType[\"relationalOrEqual\"] = relationalOrEqual] = \"relationalOrEqual\"; // <=/>= prec:8\n  const bitShift = 23561; TokenType[TokenType[\"bitShift\"] = bitShift] = \"bitShift\"; // <</>> prec:9\n  const plus = 24202; TokenType[TokenType[\"plus\"] = plus] = \"plus\"; // + prec:10 prefix\n  const minus = 24714; TokenType[TokenType[\"minus\"] = minus] = \"minus\"; // - prec:10 prefix\n  const modulo = 25099; TokenType[TokenType[\"modulo\"] = modulo] = \"modulo\"; // % prec:11\n  const star = 25611; TokenType[TokenType[\"star\"] = star] = \"star\"; // * prec:11\n  const slash = 26123; TokenType[TokenType[\"slash\"] = slash] = \"slash\"; // / prec:11\n  const exponent = 26700; TokenType[TokenType[\"exponent\"] = exponent] = \"exponent\"; // ** prec:12 rightAssociative\n  const jsxName = 27136; TokenType[TokenType[\"jsxName\"] = jsxName] = \"jsxName\"; // jsxName\n  const jsxText = 27648; TokenType[TokenType[\"jsxText\"] = jsxText] = \"jsxText\"; // jsxText\n  const jsxTagStart = 28160; TokenType[TokenType[\"jsxTagStart\"] = jsxTagStart] = \"jsxTagStart\"; // jsxTagStart\n  const jsxTagEnd = 28672; TokenType[TokenType[\"jsxTagEnd\"] = jsxTagEnd] = \"jsxTagEnd\"; // jsxTagEnd\n  const typeParameterStart = 29184; TokenType[TokenType[\"typeParameterStart\"] = typeParameterStart] = \"typeParameterStart\"; // typeParameterStart\n  const nonNullAssertion = 29696; TokenType[TokenType[\"nonNullAssertion\"] = nonNullAssertion] = \"nonNullAssertion\"; // nonNullAssertion\n  const _break = 30224; TokenType[TokenType[\"_break\"] = _break] = \"_break\"; // break keyword\n  const _case = 30736; TokenType[TokenType[\"_case\"] = _case] = \"_case\"; // case keyword\n  const _catch = 31248; TokenType[TokenType[\"_catch\"] = _catch] = \"_catch\"; // catch keyword\n  const _continue = 31760; TokenType[TokenType[\"_continue\"] = _continue] = \"_continue\"; // continue keyword\n  const _debugger = 32272; TokenType[TokenType[\"_debugger\"] = _debugger] = \"_debugger\"; // debugger keyword\n  const _default = 32784; TokenType[TokenType[\"_default\"] = _default] = \"_default\"; // default keyword\n  const _do = 33296; TokenType[TokenType[\"_do\"] = _do] = \"_do\"; // do keyword\n  const _else = 33808; TokenType[TokenType[\"_else\"] = _else] = \"_else\"; // else keyword\n  const _finally = 34320; TokenType[TokenType[\"_finally\"] = _finally] = \"_finally\"; // finally keyword\n  const _for = 34832; TokenType[TokenType[\"_for\"] = _for] = \"_for\"; // for keyword\n  const _function = 35344; TokenType[TokenType[\"_function\"] = _function] = \"_function\"; // function keyword\n  const _if = 35856; TokenType[TokenType[\"_if\"] = _if] = \"_if\"; // if keyword\n  const _return = 36368; TokenType[TokenType[\"_return\"] = _return] = \"_return\"; // return keyword\n  const _switch = 36880; TokenType[TokenType[\"_switch\"] = _switch] = \"_switch\"; // switch keyword\n  const _throw = 37520; TokenType[TokenType[\"_throw\"] = _throw] = \"_throw\"; // throw keyword prefix\n  const _try = 37904; TokenType[TokenType[\"_try\"] = _try] = \"_try\"; // try keyword\n  const _var = 38416; TokenType[TokenType[\"_var\"] = _var] = \"_var\"; // var keyword\n  const _let = 38928; TokenType[TokenType[\"_let\"] = _let] = \"_let\"; // let keyword\n  const _const = 39440; TokenType[TokenType[\"_const\"] = _const] = \"_const\"; // const keyword\n  const _while = 39952; TokenType[TokenType[\"_while\"] = _while] = \"_while\"; // while keyword\n  const _with = 40464; TokenType[TokenType[\"_with\"] = _with] = \"_with\"; // with keyword\n  const _new = 40976; TokenType[TokenType[\"_new\"] = _new] = \"_new\"; // new keyword\n  const _this = 41488; TokenType[TokenType[\"_this\"] = _this] = \"_this\"; // this keyword\n  const _super = 42000; TokenType[TokenType[\"_super\"] = _super] = \"_super\"; // super keyword\n  const _class = 42512; TokenType[TokenType[\"_class\"] = _class] = \"_class\"; // class keyword\n  const _extends = 43024; TokenType[TokenType[\"_extends\"] = _extends] = \"_extends\"; // extends keyword\n  const _export = 43536; TokenType[TokenType[\"_export\"] = _export] = \"_export\"; // export keyword\n  const _import = 44048; TokenType[TokenType[\"_import\"] = _import] = \"_import\"; // import keyword\n  const _yield = 44560; TokenType[TokenType[\"_yield\"] = _yield] = \"_yield\"; // yield keyword\n  const _null = 45072; TokenType[TokenType[\"_null\"] = _null] = \"_null\"; // null keyword\n  const _true = 45584; TokenType[TokenType[\"_true\"] = _true] = \"_true\"; // true keyword\n  const _false = 46096; TokenType[TokenType[\"_false\"] = _false] = \"_false\"; // false keyword\n  const _in = 46616; TokenType[TokenType[\"_in\"] = _in] = \"_in\"; // in prec:8 keyword\n  const _instanceof = 47128; TokenType[TokenType[\"_instanceof\"] = _instanceof] = \"_instanceof\"; // instanceof prec:8 keyword\n  const _typeof = 47760; TokenType[TokenType[\"_typeof\"] = _typeof] = \"_typeof\"; // typeof keyword prefix\n  const _void = 48272; TokenType[TokenType[\"_void\"] = _void] = \"_void\"; // void keyword prefix\n  const _delete = 48784; TokenType[TokenType[\"_delete\"] = _delete] = \"_delete\"; // delete keyword prefix\n  const _async = 49168; TokenType[TokenType[\"_async\"] = _async] = \"_async\"; // async keyword\n  const _get = 49680; TokenType[TokenType[\"_get\"] = _get] = \"_get\"; // get keyword\n  const _set = 50192; TokenType[TokenType[\"_set\"] = _set] = \"_set\"; // set keyword\n  const _declare = 50704; TokenType[TokenType[\"_declare\"] = _declare] = \"_declare\"; // declare keyword\n  const _readonly = 51216; TokenType[TokenType[\"_readonly\"] = _readonly] = \"_readonly\"; // readonly keyword\n  const _abstract = 51728; TokenType[TokenType[\"_abstract\"] = _abstract] = \"_abstract\"; // abstract keyword\n  const _static = 52240; TokenType[TokenType[\"_static\"] = _static] = \"_static\"; // static keyword\n  const _public = 52752; TokenType[TokenType[\"_public\"] = _public] = \"_public\"; // public keyword\n  const _private = 53264; TokenType[TokenType[\"_private\"] = _private] = \"_private\"; // private keyword\n  const _protected = 53776; TokenType[TokenType[\"_protected\"] = _protected] = \"_protected\"; // protected keyword\n  const _override = 54288; TokenType[TokenType[\"_override\"] = _override] = \"_override\"; // override keyword\n  const _as = 54800; TokenType[TokenType[\"_as\"] = _as] = \"_as\"; // as keyword\n  const _enum = 55312; TokenType[TokenType[\"_enum\"] = _enum] = \"_enum\"; // enum keyword\n  const _type = 55824; TokenType[TokenType[\"_type\"] = _type] = \"_type\"; // type keyword\n  const _implements = 56336; TokenType[TokenType[\"_implements\"] = _implements] = \"_implements\"; // implements keyword\n})(TokenType || (exports.TokenType = TokenType = {}));\n function formatTokenType(tokenType) {\n  switch (tokenType) {\n    case TokenType.num:\n      return \"num\";\n    case TokenType.bigint:\n      return \"bigint\";\n    case TokenType.decimal:\n      return \"decimal\";\n    case TokenType.regexp:\n      return \"regexp\";\n    case TokenType.string:\n      return \"string\";\n    case TokenType.name:\n      return \"name\";\n    case TokenType.eof:\n      return \"eof\";\n    case TokenType.bracketL:\n      return \"[\";\n    case TokenType.bracketR:\n      return \"]\";\n    case TokenType.braceL:\n      return \"{\";\n    case TokenType.braceBarL:\n      return \"{|\";\n    case TokenType.braceR:\n      return \"}\";\n    case TokenType.braceBarR:\n      return \"|}\";\n    case TokenType.parenL:\n      return \"(\";\n    case TokenType.parenR:\n      return \")\";\n    case TokenType.comma:\n      return \",\";\n    case TokenType.semi:\n      return \";\";\n    case TokenType.colon:\n      return \":\";\n    case TokenType.doubleColon:\n      return \"::\";\n    case TokenType.dot:\n      return \".\";\n    case TokenType.question:\n      return \"?\";\n    case TokenType.questionDot:\n      return \"?.\";\n    case TokenType.arrow:\n      return \"=>\";\n    case TokenType.template:\n      return \"template\";\n    case TokenType.ellipsis:\n      return \"...\";\n    case TokenType.backQuote:\n      return \"`\";\n    case TokenType.dollarBraceL:\n      return \"${\";\n    case TokenType.at:\n      return \"@\";\n    case TokenType.hash:\n      return \"#\";\n    case TokenType.eq:\n      return \"=\";\n    case TokenType.assign:\n      return \"_=\";\n    case TokenType.preIncDec:\n      return \"++/--\";\n    case TokenType.postIncDec:\n      return \"++/--\";\n    case TokenType.bang:\n      return \"!\";\n    case TokenType.tilde:\n      return \"~\";\n    case TokenType.pipeline:\n      return \"|>\";\n    case TokenType.nullishCoalescing:\n      return \"??\";\n    case TokenType.logicalOR:\n      return \"||\";\n    case TokenType.logicalAND:\n      return \"&&\";\n    case TokenType.bitwiseOR:\n      return \"|\";\n    case TokenType.bitwiseXOR:\n      return \"^\";\n    case TokenType.bitwiseAND:\n      return \"&\";\n    case TokenType.equality:\n      return \"==/!=\";\n    case TokenType.lessThan:\n      return \"<\";\n    case TokenType.greaterThan:\n      return \">\";\n    case TokenType.relationalOrEqual:\n      return \"<=/>=\";\n    case TokenType.bitShift:\n      return \"<</>>\";\n    case TokenType.plus:\n      return \"+\";\n    case TokenType.minus:\n      return \"-\";\n    case TokenType.modulo:\n      return \"%\";\n    case TokenType.star:\n      return \"*\";\n    case TokenType.slash:\n      return \"/\";\n    case TokenType.exponent:\n      return \"**\";\n    case TokenType.jsxName:\n      return \"jsxName\";\n    case TokenType.jsxText:\n      return \"jsxText\";\n    case TokenType.jsxTagStart:\n      return \"jsxTagStart\";\n    case TokenType.jsxTagEnd:\n      return \"jsxTagEnd\";\n    case TokenType.typeParameterStart:\n      return \"typeParameterStart\";\n    case TokenType.nonNullAssertion:\n      return \"nonNullAssertion\";\n    case TokenType._break:\n      return \"break\";\n    case TokenType._case:\n      return \"case\";\n    case TokenType._catch:\n      return \"catch\";\n    case TokenType._continue:\n      return \"continue\";\n    case TokenType._debugger:\n      return \"debugger\";\n    case TokenType._default:\n      return \"default\";\n    case TokenType._do:\n      return \"do\";\n    case TokenType._else:\n      return \"else\";\n    case TokenType._finally:\n      return \"finally\";\n    case TokenType._for:\n      return \"for\";\n    case TokenType._function:\n      return \"function\";\n    case TokenType._if:\n      return \"if\";\n    case TokenType._return:\n      return \"return\";\n    case TokenType._switch:\n      return \"switch\";\n    case TokenType._throw:\n      return \"throw\";\n    case TokenType._try:\n      return \"try\";\n    case TokenType._var:\n      return \"var\";\n    case TokenType._let:\n      return \"let\";\n    case TokenType._const:\n      return \"const\";\n    case TokenType._while:\n      return \"while\";\n    case TokenType._with:\n      return \"with\";\n    case TokenType._new:\n      return \"new\";\n    case TokenType._this:\n      return \"this\";\n    case TokenType._super:\n      return \"super\";\n    case TokenType._class:\n      return \"class\";\n    case TokenType._extends:\n      return \"extends\";\n    case TokenType._export:\n      return \"export\";\n    case TokenType._import:\n      return \"import\";\n    case TokenType._yield:\n      return \"yield\";\n    case TokenType._null:\n      return \"null\";\n    case TokenType._true:\n      return \"true\";\n    case TokenType._false:\n      return \"false\";\n    case TokenType._in:\n      return \"in\";\n    case TokenType._instanceof:\n      return \"instanceof\";\n    case TokenType._typeof:\n      return \"typeof\";\n    case TokenType._void:\n      return \"void\";\n    case TokenType._delete:\n      return \"delete\";\n    case TokenType._async:\n      return \"async\";\n    case TokenType._get:\n      return \"get\";\n    case TokenType._set:\n      return \"set\";\n    case TokenType._declare:\n      return \"declare\";\n    case TokenType._readonly:\n      return \"readonly\";\n    case TokenType._abstract:\n      return \"abstract\";\n    case TokenType._static:\n      return \"static\";\n    case TokenType._public:\n      return \"public\";\n    case TokenType._private:\n      return \"private\";\n    case TokenType._protected:\n      return \"protected\";\n    case TokenType._override:\n      return \"override\";\n    case TokenType._as:\n      return \"as\";\n    case TokenType._enum:\n      return \"enum\";\n    case TokenType._type:\n      return \"type\";\n    case TokenType._implements:\n      return \"implements\";\n    default:\n      return \"\";\n  }\n} exports.formatTokenType = formatTokenType;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _keywords = require('./keywords');\nvar _types = require('./types');\n\n class Scope {\n  \n  \n  \n\n  constructor(startTokenIndex, endTokenIndex, isFunctionScope) {\n    this.startTokenIndex = startTokenIndex;\n    this.endTokenIndex = endTokenIndex;\n    this.isFunctionScope = isFunctionScope;\n  }\n} exports.Scope = Scope;\n\n class StateSnapshot {\n  constructor(\n     potentialArrowAt,\n     noAnonFunctionType,\n     tokensLength,\n     scopesLength,\n     pos,\n     type,\n     contextualKeyword,\n     start,\n     end,\n     isType,\n     scopeDepth,\n     error,\n  ) {;this.potentialArrowAt = potentialArrowAt;this.noAnonFunctionType = noAnonFunctionType;this.tokensLength = tokensLength;this.scopesLength = scopesLength;this.pos = pos;this.type = type;this.contextualKeyword = contextualKeyword;this.start = start;this.end = end;this.isType = isType;this.scopeDepth = scopeDepth;this.error = error;}\n} exports.StateSnapshot = StateSnapshot;\n\n class State {constructor() { State.prototype.__init.call(this);State.prototype.__init2.call(this);State.prototype.__init3.call(this);State.prototype.__init4.call(this);State.prototype.__init5.call(this);State.prototype.__init6.call(this);State.prototype.__init7.call(this);State.prototype.__init8.call(this);State.prototype.__init9.call(this);State.prototype.__init10.call(this);State.prototype.__init11.call(this);State.prototype.__init12.call(this); }\n  // Used to signify the start of a potential arrow function\n  __init() {this.potentialArrowAt = -1}\n\n  // Used by Flow to handle an edge case involving function type parsing.\n  __init2() {this.noAnonFunctionType = false}\n\n  // Token store.\n  __init3() {this.tokens = []}\n\n  // Array of all observed scopes, ordered by their ending position.\n  __init4() {this.scopes = []}\n\n  // The current position of the tokenizer in the input.\n  __init5() {this.pos = 0}\n\n  // Information about the current token.\n  __init6() {this.type = _types.TokenType.eof}\n  __init7() {this.contextualKeyword = _keywords.ContextualKeyword.NONE}\n  __init8() {this.start = 0}\n  __init9() {this.end = 0}\n\n  __init10() {this.isType = false}\n  __init11() {this.scopeDepth = 0}\n\n  /**\n   * If the parser is in an error state, then the token is always tt.eof and all functions can\n   * keep executing but should be written so they don't get into an infinite loop in this situation.\n   *\n   * This approach, combined with the ability to snapshot and restore state, allows us to implement\n   * backtracking without exceptions and without needing to explicitly propagate error states\n   * everywhere.\n   */\n  __init12() {this.error = null}\n\n  snapshot() {\n    return new StateSnapshot(\n      this.potentialArrowAt,\n      this.noAnonFunctionType,\n      this.tokens.length,\n      this.scopes.length,\n      this.pos,\n      this.type,\n      this.contextualKeyword,\n      this.start,\n      this.end,\n      this.isType,\n      this.scopeDepth,\n      this.error,\n    );\n  }\n\n  restoreFromSnapshot(snapshot) {\n    this.potentialArrowAt = snapshot.potentialArrowAt;\n    this.noAnonFunctionType = snapshot.noAnonFunctionType;\n    this.tokens.length = snapshot.tokensLength;\n    this.scopes.length = snapshot.scopesLength;\n    this.pos = snapshot.pos;\n    this.type = snapshot.type;\n    this.contextualKeyword = snapshot.contextualKeyword;\n    this.start = snapshot.start;\n    this.end = snapshot.end;\n    this.isType = snapshot.isType;\n    this.scopeDepth = snapshot.scopeDepth;\n    this.error = snapshot.error;\n  }\n} exports.default = State;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var charCodes; (function (charCodes) {\n  const backSpace = 8; charCodes[charCodes[\"backSpace\"] = backSpace] = \"backSpace\";\n  const lineFeed = 10; charCodes[charCodes[\"lineFeed\"] = lineFeed] = \"lineFeed\"; //  '\\n'\n  const carriageReturn = 13; charCodes[charCodes[\"carriageReturn\"] = carriageReturn] = \"carriageReturn\"; //  '\\r'\n  const shiftOut = 14; charCodes[charCodes[\"shiftOut\"] = shiftOut] = \"shiftOut\";\n  const space = 32; charCodes[charCodes[\"space\"] = space] = \"space\";\n  const exclamationMark = 33; charCodes[charCodes[\"exclamationMark\"] = exclamationMark] = \"exclamationMark\"; //  '!'\n  const quotationMark = 34; charCodes[charCodes[\"quotationMark\"] = quotationMark] = \"quotationMark\"; //  '\"'\n  const numberSign = 35; charCodes[charCodes[\"numberSign\"] = numberSign] = \"numberSign\"; //  '#'\n  const dollarSign = 36; charCodes[charCodes[\"dollarSign\"] = dollarSign] = \"dollarSign\"; //  '$'\n  const percentSign = 37; charCodes[charCodes[\"percentSign\"] = percentSign] = \"percentSign\"; //  '%'\n  const ampersand = 38; charCodes[charCodes[\"ampersand\"] = ampersand] = \"ampersand\"; //  '&'\n  const apostrophe = 39; charCodes[charCodes[\"apostrophe\"] = apostrophe] = \"apostrophe\"; //  '''\n  const leftParenthesis = 40; charCodes[charCodes[\"leftParenthesis\"] = leftParenthesis] = \"leftParenthesis\"; //  '('\n  const rightParenthesis = 41; charCodes[charCodes[\"rightParenthesis\"] = rightParenthesis] = \"rightParenthesis\"; //  ')'\n  const asterisk = 42; charCodes[charCodes[\"asterisk\"] = asterisk] = \"asterisk\"; //  '*'\n  const plusSign = 43; charCodes[charCodes[\"plusSign\"] = plusSign] = \"plusSign\"; //  '+'\n  const comma = 44; charCodes[charCodes[\"comma\"] = comma] = \"comma\"; //  ','\n  const dash = 45; charCodes[charCodes[\"dash\"] = dash] = \"dash\"; //  '-'\n  const dot = 46; charCodes[charCodes[\"dot\"] = dot] = \"dot\"; //  '.'\n  const slash = 47; charCodes[charCodes[\"slash\"] = slash] = \"slash\"; //  '/'\n  const digit0 = 48; charCodes[charCodes[\"digit0\"] = digit0] = \"digit0\"; //  '0'\n  const digit1 = 49; charCodes[charCodes[\"digit1\"] = digit1] = \"digit1\"; //  '1'\n  const digit2 = 50; charCodes[charCodes[\"digit2\"] = digit2] = \"digit2\"; //  '2'\n  const digit3 = 51; charCodes[charCodes[\"digit3\"] = digit3] = \"digit3\"; //  '3'\n  const digit4 = 52; charCodes[charCodes[\"digit4\"] = digit4] = \"digit4\"; //  '4'\n  const digit5 = 53; charCodes[charCodes[\"digit5\"] = digit5] = \"digit5\"; //  '5'\n  const digit6 = 54; charCodes[charCodes[\"digit6\"] = digit6] = \"digit6\"; //  '6'\n  const digit7 = 55; charCodes[charCodes[\"digit7\"] = digit7] = \"digit7\"; //  '7'\n  const digit8 = 56; charCodes[charCodes[\"digit8\"] = digit8] = \"digit8\"; //  '8'\n  const digit9 = 57; charCodes[charCodes[\"digit9\"] = digit9] = \"digit9\"; //  '9'\n  const colon = 58; charCodes[charCodes[\"colon\"] = colon] = \"colon\"; //  ':'\n  const semicolon = 59; charCodes[charCodes[\"semicolon\"] = semicolon] = \"semicolon\"; //  ';'\n  const lessThan = 60; charCodes[charCodes[\"lessThan\"] = lessThan] = \"lessThan\"; //  '<'\n  const equalsTo = 61; charCodes[charCodes[\"equalsTo\"] = equalsTo] = \"equalsTo\"; //  '='\n  const greaterThan = 62; charCodes[charCodes[\"greaterThan\"] = greaterThan] = \"greaterThan\"; //  '>'\n  const questionMark = 63; charCodes[charCodes[\"questionMark\"] = questionMark] = \"questionMark\"; //  '?'\n  const atSign = 64; charCodes[charCodes[\"atSign\"] = atSign] = \"atSign\"; //  '@'\n  const uppercaseA = 65; charCodes[charCodes[\"uppercaseA\"] = uppercaseA] = \"uppercaseA\"; //  'A'\n  const uppercaseB = 66; charCodes[charCodes[\"uppercaseB\"] = uppercaseB] = \"uppercaseB\"; //  'B'\n  const uppercaseC = 67; charCodes[charCodes[\"uppercaseC\"] = uppercaseC] = \"uppercaseC\"; //  'C'\n  const uppercaseD = 68; charCodes[charCodes[\"uppercaseD\"] = uppercaseD] = \"uppercaseD\"; //  'D'\n  const uppercaseE = 69; charCodes[charCodes[\"uppercaseE\"] = uppercaseE] = \"uppercaseE\"; //  'E'\n  const uppercaseF = 70; charCodes[charCodes[\"uppercaseF\"] = uppercaseF] = \"uppercaseF\"; //  'F'\n  const uppercaseG = 71; charCodes[charCodes[\"uppercaseG\"] = uppercaseG] = \"uppercaseG\"; //  'G'\n  const uppercaseH = 72; charCodes[charCodes[\"uppercaseH\"] = uppercaseH] = \"uppercaseH\"; //  'H'\n  const uppercaseI = 73; charCodes[charCodes[\"uppercaseI\"] = uppercaseI] = \"uppercaseI\"; //  'I'\n  const uppercaseJ = 74; charCodes[charCodes[\"uppercaseJ\"] = uppercaseJ] = \"uppercaseJ\"; //  'J'\n  const uppercaseK = 75; charCodes[charCodes[\"uppercaseK\"] = uppercaseK] = \"uppercaseK\"; //  'K'\n  const uppercaseL = 76; charCodes[charCodes[\"uppercaseL\"] = uppercaseL] = \"uppercaseL\"; //  'L'\n  const uppercaseM = 77; charCodes[charCodes[\"uppercaseM\"] = uppercaseM] = \"uppercaseM\"; //  'M'\n  const uppercaseN = 78; charCodes[charCodes[\"uppercaseN\"] = uppercaseN] = \"uppercaseN\"; //  'N'\n  const uppercaseO = 79; charCodes[charCodes[\"uppercaseO\"] = uppercaseO] = \"uppercaseO\"; //  'O'\n  const uppercaseP = 80; charCodes[charCodes[\"uppercaseP\"] = uppercaseP] = \"uppercaseP\"; //  'P'\n  const uppercaseQ = 81; charCodes[charCodes[\"uppercaseQ\"] = uppercaseQ] = \"uppercaseQ\"; //  'Q'\n  const uppercaseR = 82; charCodes[charCodes[\"uppercaseR\"] = uppercaseR] = \"uppercaseR\"; //  'R'\n  const uppercaseS = 83; charCodes[charCodes[\"uppercaseS\"] = uppercaseS] = \"uppercaseS\"; //  'S'\n  const uppercaseT = 84; charCodes[charCodes[\"uppercaseT\"] = uppercaseT] = \"uppercaseT\"; //  'T'\n  const uppercaseU = 85; charCodes[charCodes[\"uppercaseU\"] = uppercaseU] = \"uppercaseU\"; //  'U'\n  const uppercaseV = 86; charCodes[charCodes[\"uppercaseV\"] = uppercaseV] = \"uppercaseV\"; //  'V'\n  const uppercaseW = 87; charCodes[charCodes[\"uppercaseW\"] = uppercaseW] = \"uppercaseW\"; //  'W'\n  const uppercaseX = 88; charCodes[charCodes[\"uppercaseX\"] = uppercaseX] = \"uppercaseX\"; //  'X'\n  const uppercaseY = 89; charCodes[charCodes[\"uppercaseY\"] = uppercaseY] = \"uppercaseY\"; //  'Y'\n  const uppercaseZ = 90; charCodes[charCodes[\"uppercaseZ\"] = uppercaseZ] = \"uppercaseZ\"; //  'Z'\n  const leftSquareBracket = 91; charCodes[charCodes[\"leftSquareBracket\"] = leftSquareBracket] = \"leftSquareBracket\"; //  '['\n  const backslash = 92; charCodes[charCodes[\"backslash\"] = backslash] = \"backslash\"; //  '\\    '\n  const rightSquareBracket = 93; charCodes[charCodes[\"rightSquareBracket\"] = rightSquareBracket] = \"rightSquareBracket\"; //  ']'\n  const caret = 94; charCodes[charCodes[\"caret\"] = caret] = \"caret\"; //  '^'\n  const underscore = 95; charCodes[charCodes[\"underscore\"] = underscore] = \"underscore\"; //  '_'\n  const graveAccent = 96; charCodes[charCodes[\"graveAccent\"] = graveAccent] = \"graveAccent\"; //  '`'\n  const lowercaseA = 97; charCodes[charCodes[\"lowercaseA\"] = lowercaseA] = \"lowercaseA\"; //  'a'\n  const lowercaseB = 98; charCodes[charCodes[\"lowercaseB\"] = lowercaseB] = \"lowercaseB\"; //  'b'\n  const lowercaseC = 99; charCodes[charCodes[\"lowercaseC\"] = lowercaseC] = \"lowercaseC\"; //  'c'\n  const lowercaseD = 100; charCodes[charCodes[\"lowercaseD\"] = lowercaseD] = \"lowercaseD\"; //  'd'\n  const lowercaseE = 101; charCodes[charCodes[\"lowercaseE\"] = lowercaseE] = \"lowercaseE\"; //  'e'\n  const lowercaseF = 102; charCodes[charCodes[\"lowercaseF\"] = lowercaseF] = \"lowercaseF\"; //  'f'\n  const lowercaseG = 103; charCodes[charCodes[\"lowercaseG\"] = lowercaseG] = \"lowercaseG\"; //  'g'\n  const lowercaseH = 104; charCodes[charCodes[\"lowercaseH\"] = lowercaseH] = \"lowercaseH\"; //  'h'\n  const lowercaseI = 105; charCodes[charCodes[\"lowercaseI\"] = lowercaseI] = \"lowercaseI\"; //  'i'\n  const lowercaseJ = 106; charCodes[charCodes[\"lowercaseJ\"] = lowercaseJ] = \"lowercaseJ\"; //  'j'\n  const lowercaseK = 107; charCodes[charCodes[\"lowercaseK\"] = lowercaseK] = \"lowercaseK\"; //  'k'\n  const lowercaseL = 108; charCodes[charCodes[\"lowercaseL\"] = lowercaseL] = \"lowercaseL\"; //  'l'\n  const lowercaseM = 109; charCodes[charCodes[\"lowercaseM\"] = lowercaseM] = \"lowercaseM\"; //  'm'\n  const lowercaseN = 110; charCodes[charCodes[\"lowercaseN\"] = lowercaseN] = \"lowercaseN\"; //  'n'\n  const lowercaseO = 111; charCodes[charCodes[\"lowercaseO\"] = lowercaseO] = \"lowercaseO\"; //  'o'\n  const lowercaseP = 112; charCodes[charCodes[\"lowercaseP\"] = lowercaseP] = \"lowercaseP\"; //  'p'\n  const lowercaseQ = 113; charCodes[charCodes[\"lowercaseQ\"] = lowercaseQ] = \"lowercaseQ\"; //  'q'\n  const lowercaseR = 114; charCodes[charCodes[\"lowercaseR\"] = lowercaseR] = \"lowercaseR\"; //  'r'\n  const lowercaseS = 115; charCodes[charCodes[\"lowercaseS\"] = lowercaseS] = \"lowercaseS\"; //  's'\n  const lowercaseT = 116; charCodes[charCodes[\"lowercaseT\"] = lowercaseT] = \"lowercaseT\"; //  't'\n  const lowercaseU = 117; charCodes[charCodes[\"lowercaseU\"] = lowercaseU] = \"lowercaseU\"; //  'u'\n  const lowercaseV = 118; charCodes[charCodes[\"lowercaseV\"] = lowercaseV] = \"lowercaseV\"; //  'v'\n  const lowercaseW = 119; charCodes[charCodes[\"lowercaseW\"] = lowercaseW] = \"lowercaseW\"; //  'w'\n  const lowercaseX = 120; charCodes[charCodes[\"lowercaseX\"] = lowercaseX] = \"lowercaseX\"; //  'x'\n  const lowercaseY = 121; charCodes[charCodes[\"lowercaseY\"] = lowercaseY] = \"lowercaseY\"; //  'y'\n  const lowercaseZ = 122; charCodes[charCodes[\"lowercaseZ\"] = lowercaseZ] = \"lowercaseZ\"; //  'z'\n  const leftCurlyBrace = 123; charCodes[charCodes[\"leftCurlyBrace\"] = leftCurlyBrace] = \"leftCurlyBrace\"; //  '{'\n  const verticalBar = 124; charCodes[charCodes[\"verticalBar\"] = verticalBar] = \"verticalBar\"; //  '|'\n  const rightCurlyBrace = 125; charCodes[charCodes[\"rightCurlyBrace\"] = rightCurlyBrace] = \"rightCurlyBrace\"; //  '}'\n  const tilde = 126; charCodes[charCodes[\"tilde\"] = tilde] = \"tilde\"; //  '~'\n  const nonBreakingSpace = 160; charCodes[charCodes[\"nonBreakingSpace\"] = nonBreakingSpace] = \"nonBreakingSpace\";\n  // eslint-disable-next-line no-irregular-whitespace\n  const oghamSpaceMark = 5760; charCodes[charCodes[\"oghamSpaceMark\"] = oghamSpaceMark] = \"oghamSpaceMark\"; // '\u1680'\n  const lineSeparator = 8232; charCodes[charCodes[\"lineSeparator\"] = lineSeparator] = \"lineSeparator\";\n  const paragraphSeparator = 8233; charCodes[charCodes[\"paragraphSeparator\"] = paragraphSeparator] = \"paragraphSeparator\";\n})(charCodes || (exports.charCodes = charCodes = {}));\n\n function isDigit(code) {\n  return (\n    (code >= charCodes.digit0 && code <= charCodes.digit9) ||\n    (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||\n    (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF)\n  );\n} exports.isDigit = isDigit;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _state = require('../tokenizer/state'); var _state2 = _interopRequireDefault(_state);\nvar _charcodes = require('../util/charcodes');\n\n exports.isJSXEnabled;\n exports.isTypeScriptEnabled;\n exports.isFlowEnabled;\n exports.state;\n exports.input;\n exports.nextContextId;\n\n function getNextContextId() {\n  return exports.nextContextId++;\n} exports.getNextContextId = getNextContextId;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n function augmentError(error) {\n  if (\"pos\" in error) {\n    const loc = locationForIndex(error.pos);\n    error.message += ` (${loc.line}:${loc.column})`;\n    error.loc = loc;\n  }\n  return error;\n} exports.augmentError = augmentError;\n\n class Loc {\n  \n  \n  constructor(line, column) {\n    this.line = line;\n    this.column = column;\n  }\n} exports.Loc = Loc;\n\n function locationForIndex(pos) {\n  let line = 1;\n  let column = 1;\n  for (let i = 0; i < pos; i++) {\n    if (exports.input.charCodeAt(i) === _charcodes.charCodes.lineFeed) {\n      line++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return new Loc(line, column);\n} exports.locationForIndex = locationForIndex;\n\n function initParser(\n  inputCode,\n  isJSXEnabledArg,\n  isTypeScriptEnabledArg,\n  isFlowEnabledArg,\n) {\n  exports.input = inputCode;\n  exports.state = new (0, _state2.default)();\n  exports.nextContextId = 1;\n  exports.isJSXEnabled = isJSXEnabledArg;\n  exports.isTypeScriptEnabled = isTypeScriptEnabledArg;\n  exports.isFlowEnabled = isFlowEnabledArg;\n} exports.initParser = initParser;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _index = require('../tokenizer/index');\n\nvar _types = require('../tokenizer/types');\nvar _charcodes = require('../util/charcodes');\nvar _base = require('./base');\n\n// ## Parser utilities\n\n// Tests whether parsed token is a contextual keyword.\n function isContextual(contextualKeyword) {\n  return _base.state.contextualKeyword === contextualKeyword;\n} exports.isContextual = isContextual;\n\n function isLookaheadContextual(contextualKeyword) {\n  const l = _index.lookaheadTypeAndKeyword.call(void 0, );\n  return l.type === _types.TokenType.name && l.contextualKeyword === contextualKeyword;\n} exports.isLookaheadContextual = isLookaheadContextual;\n\n// Consumes contextual keyword if possible.\n function eatContextual(contextualKeyword) {\n  return _base.state.contextualKeyword === contextualKeyword && _index.eat.call(void 0, _types.TokenType.name);\n} exports.eatContextual = eatContextual;\n\n// Asserts that following token is given contextual keyword.\n function expectContextual(contextualKeyword) {\n  if (!eatContextual(contextualKeyword)) {\n    unexpected();\n  }\n} exports.expectContextual = expectContextual;\n\n// Test whether a semicolon can be inserted at the current position.\n function canInsertSemicolon() {\n  return _index.match.call(void 0, _types.TokenType.eof) || _index.match.call(void 0, _types.TokenType.braceR) || hasPrecedingLineBreak();\n} exports.canInsertSemicolon = canInsertSemicolon;\n\n function hasPrecedingLineBreak() {\n  const prevToken = _base.state.tokens[_base.state.tokens.length - 1];\n  const lastTokEnd = prevToken ? prevToken.end : 0;\n  for (let i = lastTokEnd; i < _base.state.start; i++) {\n    const code = _base.input.charCodeAt(i);\n    if (\n      code === _charcodes.charCodes.lineFeed ||\n      code === _charcodes.charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n} exports.hasPrecedingLineBreak = hasPrecedingLineBreak;\n\n function hasFollowingLineBreak() {\n  const nextStart = _index.nextTokenStart.call(void 0, );\n  for (let i = _base.state.end; i < nextStart; i++) {\n    const code = _base.input.charCodeAt(i);\n    if (\n      code === _charcodes.charCodes.lineFeed ||\n      code === _charcodes.charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n} exports.hasFollowingLineBreak = hasFollowingLineBreak;\n\n function isLineTerminator() {\n  return _index.eat.call(void 0, _types.TokenType.semi) || canInsertSemicolon();\n} exports.isLineTerminator = isLineTerminator;\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n function semicolon() {\n  if (!isLineTerminator()) {\n    unexpected('Unexpected token, expected \";\"');\n  }\n} exports.semicolon = semicolon;\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\n function expect(type) {\n  const matched = _index.eat.call(void 0, type);\n  if (!matched) {\n    unexpected(`Unexpected token, expected \"${_types.formatTokenType.call(void 0, type)}\"`);\n  }\n} exports.expect = expect;\n\n/**\n * Transition the parser to an error state. All code needs to be written to naturally unwind in this\n * state, which allows us to backtrack without exceptions and without error plumbing everywhere.\n */\n function unexpected(message = \"Unexpected token\", pos = _base.state.start) {\n  if (_base.state.error) {\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const err = new SyntaxError(message);\n  err.pos = pos;\n  _base.state.error = err;\n  _base.state.pos = _base.input.length;\n  _index.finishToken.call(void 0, _types.TokenType.eof);\n} exports.unexpected = unexpected;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _charcodes = require('./charcodes');\n\n// https://tc39.github.io/ecma262/#sec-white-space\n const WHITESPACE_CHARS = [\n  0x0009,\n  0x000b,\n  0x000c,\n  _charcodes.charCodes.space,\n  _charcodes.charCodes.nonBreakingSpace,\n  _charcodes.charCodes.oghamSpaceMark,\n  0x2000, // EN QUAD\n  0x2001, // EM QUAD\n  0x2002, // EN SPACE\n  0x2003, // EM SPACE\n  0x2004, // THREE-PER-EM SPACE\n  0x2005, // FOUR-PER-EM SPACE\n  0x2006, // SIX-PER-EM SPACE\n  0x2007, // FIGURE SPACE\n  0x2008, // PUNCTUATION SPACE\n  0x2009, // THIN SPACE\n  0x200a, // HAIR SPACE\n  0x202f, // NARROW NO-BREAK SPACE\n  0x205f, // MEDIUM MATHEMATICAL SPACE\n  0x3000, // IDEOGRAPHIC SPACE\n  0xfeff, // ZERO WIDTH NO-BREAK SPACE\n]; exports.WHITESPACE_CHARS = WHITESPACE_CHARS;\n\n const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g; exports.skipWhiteSpace = skipWhiteSpace;\n\n const IS_WHITESPACE = new Uint8Array(65536); exports.IS_WHITESPACE = IS_WHITESPACE;\nfor (const char of exports.WHITESPACE_CHARS) {\n  exports.IS_WHITESPACE[char] = 1;\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _charcodes = require('./charcodes');\nvar _whitespace = require('./whitespace');\n\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\n\n const IS_IDENTIFIER_CHAR = new Uint8Array(65536); exports.IS_IDENTIFIER_CHAR = IS_IDENTIFIER_CHAR;\nfor (let i = 0; i < 128; i++) {\n  exports.IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  exports.IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of _whitespace.WHITESPACE_CHARS) {\n  exports.IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nexports.IS_IDENTIFIER_CHAR[0x2028] = 0;\nexports.IS_IDENTIFIER_CHAR[0x2029] = 0;\n\n const IS_IDENTIFIER_START = exports.IS_IDENTIFIER_CHAR.slice(); exports.IS_IDENTIFIER_START = IS_IDENTIFIER_START;\nfor (let numChar = _charcodes.charCodes.digit0; numChar <= _charcodes.charCodes.digit9; numChar++) {\n  exports.IS_IDENTIFIER_START[numChar] = 0;\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\nvar _keywords = require('./keywords');\nvar _types = require('./types');\n\n// prettier-ignore\n const READ_WORD_TREE = new Int32Array([\n  // \"\"\n  -1, 27, 594, 729, 1566, 2187, 2673, 3294, -1, 3510, -1, 4428, 4563, 4644, 4941, 5319, 5697, -1, 6237, 6696, 7155, 7587, 7749, 7911, -1, 8127, -1,\n  // \"a\"\n  -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243, -1, -1, -1, 486, -1, -1, -1,\n  // \"ab\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,\n  // \"abs\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,\n  // \"abst\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstr\"\n  -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstra\"\n  -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstrac\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,\n  // \"abstract\"\n  _keywords.ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"as\"\n  _keywords.ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1, -1, -1, -1, -1, 405, -1,\n  // \"ass\"\n  -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asse\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asser\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, -1, -1, -1,\n  // \"assert\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, -1, -1, -1, -1, -1,\n  // \"asserts\"\n  _keywords.ContextualKeyword._asserts << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asyn\"\n  -1, -1, -1, 459, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"async\"\n  _keywords.ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"aw\"\n  -1, 513, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awai\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1,\n  // \"await\"\n  _keywords.ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"b\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"br\"\n  -1, -1, -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"bre\"\n  -1, 675, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"brea\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 702, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"break\"\n  (_types.TokenType._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"c\"\n  -1, 756, -1, -1, -1, -1, -1, -1, 918, -1, -1, -1, 1053, -1, -1, 1161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ca\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 783, 837, -1, -1, -1, -1, -1, -1,\n  // \"cas\"\n  -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"case\"\n  (_types.TokenType._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cat\"\n  -1, -1, -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catch\"\n  (_types.TokenType._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ch\"\n  -1, -1, -1, -1, -1, 945, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"che\"\n  -1, -1, -1, 972, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"chec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"check\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1026, -1, -1, -1, -1, -1, -1, -1,\n  // \"checks\"\n  _keywords.ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cl\"\n  -1, 1080, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, -1, -1, -1, -1,\n  // \"clas\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1,\n  // \"class\"\n  (_types.TokenType._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"co\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"con\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, 1431, -1, -1, -1, -1, -1, -1,\n  // \"cons\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1242, -1, -1, -1, -1, -1, -1,\n  // \"const\"\n  (_types.TokenType._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1296, -1, -1, -1, -1, -1,\n  // \"constru\"\n  -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"construc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1350, -1, -1, -1, -1, -1, -1,\n  // \"construct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1404, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructor\"\n  _keywords.ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cont\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"conti\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1485, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"contin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1512, -1, -1, -1, -1, -1,\n  // \"continu\"\n  -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"continue\"\n  (_types.TokenType._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"d\"\n  -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"de\"\n  -1, -1, 1620, 1782, -1, -1, 1917, -1, -1, -1, -1, -1, 2052, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"deb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1647, -1, -1, -1, -1, -1,\n  // \"debu\"\n  -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debug\"\n  -1, -1, -1, -1, -1, -1, -1, 1701, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugg\"\n  -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1755, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugger\"\n  (_types.TokenType._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1809, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decl\"\n  -1, 1836, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declar\"\n  -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declare\"\n  _keywords.ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"def\"\n  -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1971, -1, -1, -1, -1, -1,\n  // \"defau\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defaul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2025, -1, -1, -1, -1, -1, -1,\n  // \"default\"\n  (_types.TokenType._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"del\"\n  -1, -1, -1, -1, -1, 2079, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dele\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2106, -1, -1, -1, -1, -1, -1,\n  // \"delet\"\n  -1, -1, -1, -1, -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"delete\"\n  (_types.TokenType._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"do\"\n  (_types.TokenType._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"e\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, 2295, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2376, -1, -1,\n  // \"el\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2241, -1, -1, -1, -1, -1, -1, -1,\n  // \"els\"\n  -1, -1, -1, -1, -1, 2268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"else\"\n  (_types.TokenType._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"en\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1,\n  // \"enu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"enum\"\n  _keywords.ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ex\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2403, -1, -1, -1, 2538, -1, -1, -1, -1, -1, -1,\n  // \"exp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2484, -1, -1, -1, -1, -1, -1,\n  // \"export\"\n  (_types.TokenType._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1, -1, -1,\n  // \"exports\"\n  _keywords.ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ext\"\n  -1, -1, -1, -1, -1, 2565, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exten\"\n  -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"extend\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1,\n  // \"extends\"\n  (_types.TokenType._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"f\"\n  -1, 2700, -1, -1, -1, -1, -1, -1, -1, 2808, -1, -1, -1, -1, -1, 2970, -1, -1, 3024, -1, -1, 3105, -1, -1, -1, -1, -1,\n  // \"fa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2727, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fal\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1,\n  // \"fals\"\n  -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"false\"\n  (_types.TokenType._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2835, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fin\"\n  -1, 2862, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fina\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2889, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"final\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"finall\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1,\n  // \"finally\"\n  (_types.TokenType._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"for\"\n  (_types.TokenType._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3051, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"from\"\n  _keywords.ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fun\"\n  -1, -1, -1, 3159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"func\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1,\n  // \"funct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 3213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functio\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"function\"\n  (_types.TokenType._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"g\"\n  -1, -1, -1, -1, -1, 3321, -1, -1, -1, -1, -1, -1, 3375, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1,\n  // \"get\"\n  _keywords.ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"gl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glo\"\n  -1, -1, 3429, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glob\"\n  -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"globa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3483, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"global\"\n  _keywords.ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"i\"\n  -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1, 3564, 3888, -1, -1, -1, -1, 4401, -1, -1, -1, -1, -1, -1, -1,\n  // \"if\"\n  (_types.TokenType._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"im\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3618, -1, -1, 3807, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impl\"\n  -1, -1, -1, -1, -1, 3645, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imple\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implem\"\n  -1, -1, -1, -1, -1, 3699, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impleme\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implemen\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3753, -1, -1, -1, -1, -1, -1,\n  // \"implement\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1,\n  // \"implements\"\n  _keywords.ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, -1, -1, -1, -1, -1, -1,\n  // \"import\"\n  (_types.TokenType._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"in\"\n  (_types.TokenType._in << 1) + 1, -1, -1, -1, -1, -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3996, 4212, -1, -1, -1, -1, -1, -1,\n  // \"inf\"\n  -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infer\"\n  _keywords.ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ins\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1,\n  // \"inst\"\n  -1, 4050, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"insta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4077, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instan\"\n  -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanc\"\n  -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instance\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceo\"\n  -1, -1, -1, -1, -1, -1, 4185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceof\"\n  (_types.TokenType._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"int\"\n  -1, -1, -1, -1, -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inter\"\n  -1, -1, -1, -1, -1, -1, 4293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interf\"\n  -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfa\"\n  -1, -1, -1, 4347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfac\"\n  -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interface\"\n  _keywords.ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"is\"\n  _keywords.ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"k\"\n  -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ke\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4482, -1,\n  // \"key\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyo\"\n  -1, -1, -1, -1, -1, -1, 4536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyof\"\n  _keywords.ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"l\"\n  -1, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"le\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4617, -1, -1, -1, -1, -1, -1,\n  // \"let\"\n  (_types.TokenType._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"m\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4671, -1, -1, -1, -1, -1, 4806, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4698, -1, -1,\n  // \"mix\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4752, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixins\"\n  _keywords.ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mo\"\n  -1, -1, -1, -1, 4833, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mod\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1,\n  // \"modu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4887, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"modul\"\n  -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"module\"\n  _keywords.ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"n\"\n  -1, 4968, -1, -1, -1, 5184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1,\n  // \"na\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nam\"\n  -1, -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"name\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5049, -1, -1, -1, -1, -1, -1, -1,\n  // \"names\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namesp\"\n  -1, 5103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespa\"\n  -1, -1, -1, 5130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespac\"\n  -1, -1, -1, -1, -1, 5157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespace\"\n  _keywords.ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ne\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5211, -1, -1, -1,\n  // \"new\"\n  (_types.TokenType._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"null\"\n  (_types.TokenType._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"o\"\n  -1, -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5373, -1, -1, -1, -1, -1, 5508, -1, -1, -1, -1,\n  // \"of\"\n  _keywords.ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"op\"\n  -1, 5400, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1, -1,\n  // \"opaqu\"\n  -1, -1, -1, -1, -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaque\"\n  _keywords.ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ov\"\n  -1, -1, -1, -1, -1, 5535, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ove\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"over\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5589, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overri\"\n  -1, -1, -1, -1, 5643, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overrid\"\n  -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"override\"\n  _keywords.ContextualKeyword._override << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"p\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5724, -1, -1, 6102, -1, -1, -1, -1, -1,\n  // \"pr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5751, -1, -1, -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pri\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5778, -1, -1, -1, -1,\n  // \"priv\"\n  -1, 5805, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"priva\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1,\n  // \"privat\"\n  -1, -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"private\"\n  _keywords.ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5913, -1, -1, -1, -1, -1, -1,\n  // \"prot\"\n  -1, -1, -1, -1, -1, 5940, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"prote\"\n  -1, -1, -1, 5967, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, -1,\n  // \"protect\"\n  -1, -1, -1, -1, -1, 6021, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protecte\"\n  -1, -1, -1, -1, 6048, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protected\"\n  _keywords.ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"proto\"\n  _keywords.ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pu\"\n  -1, -1, 6129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pub\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publi\"\n  -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"public\"\n  _keywords.ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"r\"\n  -1, -1, -1, -1, -1, 6264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"re\"\n  -1, 6291, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6453, -1, -1, 6588, -1, -1, -1, -1, -1, -1,\n  // \"rea\"\n  -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"read\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"reado\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6372, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readon\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readonl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1,\n  // \"readonly\"\n  _keywords.ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"req\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6480, -1, -1, -1, -1, -1,\n  // \"requ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6507, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requir\"\n  -1, -1, -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"require\"\n  _keywords.ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ret\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6615, -1, -1, -1, -1, -1,\n  // \"retu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"retur\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"return\"\n  (_types.TokenType._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"s\"\n  -1, -1, -1, -1, -1, 6723, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6777, 6912, -1, 7020, -1, -1, -1,\n  // \"se\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1,\n  // \"set\"\n  _keywords.ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"st\"\n  -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6831, -1, -1, -1, -1, -1, -1,\n  // \"stat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"stati\"\n  -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"static\"\n  _keywords.ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"su\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6939, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sup\"\n  -1, -1, -1, -1, -1, 6966, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"supe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"super\"\n  (_types.TokenType._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sw\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"swi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1,\n  // \"swit\"\n  -1, -1, -1, 7101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switch\"\n  (_types.TokenType._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"t\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7182, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, 7452, -1,\n  // \"th\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1, -1, -1, 7263, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7236, -1, -1, -1, -1, -1, -1, -1,\n  // \"this\"\n  (_types.TokenType._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7317, -1, -1, -1,\n  // \"throw\"\n  (_types.TokenType._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"tr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7371, -1, -1, -1, 7425, -1,\n  // \"tru\"\n  -1, -1, -1, -1, -1, 7398, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"true\"\n  (_types.TokenType._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"try\"\n  (_types.TokenType._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ty\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7479, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typ\"\n  -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"type\"\n  _keywords.ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeo\"\n  -1, -1, -1, -1, -1, -1, 7560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeof\"\n  (_types.TokenType._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"u\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7614, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"un\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uni\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uniq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1,\n  // \"uniqu\"\n  -1, -1, -1, -1, -1, 7722, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"unique\"\n  _keywords.ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"v\"\n  -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"va\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7803, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"var\"\n  (_types.TokenType._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"vo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7857, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"voi\"\n  -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"void\"\n  (_types.TokenType._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"w\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7938, 8046, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wh\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7965, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7992, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whil\"\n  -1, -1, -1, -1, -1, 8019, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"while\"\n  (_types.TokenType._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8073, -1, -1, -1, -1, -1, -1,\n  // \"wit\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 8100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"with\"\n  (_types.TokenType._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"y\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yi\"\n  -1, -1, -1, -1, -1, 8181, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yiel\"\n  -1, -1, -1, -1, 8235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yield\"\n  (_types.TokenType._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n]); exports.READ_WORD_TREE = READ_WORD_TREE;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _base = require('../traverser/base');\nvar _charcodes = require('../util/charcodes');\nvar _identifier = require('../util/identifier');\nvar _index = require('./index');\nvar _readWordTree = require('./readWordTree');\nvar _types = require('./types');\n\n/**\n * Read an identifier, producing either a name token or matching on one of the existing keywords.\n * For performance, we pre-generate big decision tree that we traverse. Each node represents a\n * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if\n * not), and the other 26 values are the transitions to other nodes, or -1 to stop.\n */\n function readWord() {\n  let treePos = 0;\n  let code = 0;\n  let pos = _base.state.pos;\n  while (pos < _base.input.length) {\n    code = _base.input.charCodeAt(pos);\n    if (code < _charcodes.charCodes.lowercaseA || code > _charcodes.charCodes.lowercaseZ) {\n      break;\n    }\n    const next = _readWordTree.READ_WORD_TREE[treePos + (code - _charcodes.charCodes.lowercaseA) + 1];\n    if (next === -1) {\n      break;\n    } else {\n      treePos = next;\n      pos++;\n    }\n  }\n\n  const keywordValue = _readWordTree.READ_WORD_TREE[treePos];\n  if (keywordValue > -1 && !_identifier.IS_IDENTIFIER_CHAR[code]) {\n    _base.state.pos = pos;\n    if (keywordValue & 1) {\n      _index.finishToken.call(void 0, keywordValue >>> 1);\n    } else {\n      _index.finishToken.call(void 0, _types.TokenType.name, keywordValue >>> 1);\n    }\n    return;\n  }\n\n  while (pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(pos);\n    if (_identifier.IS_IDENTIFIER_CHAR[ch]) {\n      pos++;\n    } else if (ch === _charcodes.charCodes.backslash) {\n      // \\u\n      pos += 2;\n      if (_base.input.charCodeAt(pos) === _charcodes.charCodes.leftCurlyBrace) {\n        while (pos < _base.input.length && _base.input.charCodeAt(pos) !== _charcodes.charCodes.rightCurlyBrace) {\n          pos++;\n        }\n        pos++;\n      }\n    } else if (ch === _charcodes.charCodes.atSign && _base.input.charCodeAt(pos + 1) === _charcodes.charCodes.atSign) {\n      pos += 2;\n    } else {\n      break;\n    }\n  }\n  _base.state.pos = pos;\n  _index.finishToken.call(void 0, _types.TokenType.name);\n} exports.default = readWord;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }/* eslint max-len: 0 */\n\nvar _base = require('../traverser/base');\nvar _util = require('../traverser/util');\nvar _charcodes = require('../util/charcodes');\nvar _identifier = require('../util/identifier');\nvar _whitespace = require('../util/whitespace');\nvar _keywords = require('./keywords');\nvar _readWord = require('./readWord'); var _readWord2 = _interopRequireDefault(_readWord);\nvar _types = require('./types');\n\nvar IdentifierRole; (function (IdentifierRole) {\n  const Access = 0; IdentifierRole[IdentifierRole[\"Access\"] = Access] = \"Access\";\n  const ExportAccess = Access + 1; IdentifierRole[IdentifierRole[\"ExportAccess\"] = ExportAccess] = \"ExportAccess\";\n  const TopLevelDeclaration = ExportAccess + 1; IdentifierRole[IdentifierRole[\"TopLevelDeclaration\"] = TopLevelDeclaration] = \"TopLevelDeclaration\";\n  const FunctionScopedDeclaration = TopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"FunctionScopedDeclaration\"] = FunctionScopedDeclaration] = \"FunctionScopedDeclaration\";\n  const BlockScopedDeclaration = FunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"BlockScopedDeclaration\"] = BlockScopedDeclaration] = \"BlockScopedDeclaration\";\n  const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandTopLevelDeclaration\"] = ObjectShorthandTopLevelDeclaration] = \"ObjectShorthandTopLevelDeclaration\";\n  const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandFunctionScopedDeclaration\"] = ObjectShorthandFunctionScopedDeclaration] = \"ObjectShorthandFunctionScopedDeclaration\";\n  const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandBlockScopedDeclaration\"] = ObjectShorthandBlockScopedDeclaration] = \"ObjectShorthandBlockScopedDeclaration\";\n  const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthand\"] = ObjectShorthand] = \"ObjectShorthand\";\n  // Any identifier bound in an import statement, e.g. both A and b from\n  // `import A, * as b from 'A';`\n  const ImportDeclaration = ObjectShorthand + 1; IdentifierRole[IdentifierRole[\"ImportDeclaration\"] = ImportDeclaration] = \"ImportDeclaration\";\n  const ObjectKey = ImportDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectKey\"] = ObjectKey] = \"ObjectKey\";\n  // The `foo` in `import {foo as bar} from \"./abc\";`.\n  const ImportAccess = ObjectKey + 1; IdentifierRole[IdentifierRole[\"ImportAccess\"] = ImportAccess] = \"ImportAccess\";\n})(IdentifierRole || (exports.IdentifierRole = IdentifierRole = {}));\n\n function isDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isDeclaration = isDeclaration;\n\n function isNonTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isNonTopLevelDeclaration = isNonTopLevelDeclaration;\n\n function isTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ImportDeclaration\n  );\n} exports.isTopLevelDeclaration = isTopLevelDeclaration;\n\n function isBlockScopedDeclaration(token) {\n  const role = token.identifierRole;\n  // Treat top-level declarations as block scope since the distinction doesn't matter here.\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n} exports.isBlockScopedDeclaration = isBlockScopedDeclaration;\n\n function isFunctionScopedDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n} exports.isFunctionScopedDeclaration = isFunctionScopedDeclaration;\n\n function isObjectShorthandDeclaration(token) {\n  return (\n    token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n} exports.isObjectShorthandDeclaration = isObjectShorthandDeclaration;\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n class Token {\n  constructor() {\n    this.type = _base.state.type;\n    this.contextualKeyword = _base.state.contextualKeyword;\n    this.start = _base.state.start;\n    this.end = _base.state.end;\n    this.scopeDepth = _base.state.scopeDepth;\n    this.isType = _base.state.isType;\n    this.identifierRole = null;\n    this.shadowsGlobal = false;\n    this.isAsyncOperation = false;\n    this.contextId = null;\n    this.rhsEndIndex = null;\n    this.isExpression = false;\n    this.numNullishCoalesceStarts = 0;\n    this.numNullishCoalesceEnds = 0;\n    this.isOptionalChainStart = false;\n    this.isOptionalChainEnd = false;\n    this.subscriptStartIndex = null;\n    this.nullishStartIndex = null;\n  }\n\n  \n  \n  \n  \n  \n  \n  \n  // Initially false for all tokens, then may be computed in a follow-up step that does scope\n  // analysis.\n  \n  // Initially false for all tokens, but may be set during transform to mark it as containing an\n  // await operation.\n  \n  \n  // For assignments, the index of the RHS. For export tokens, the end of the export.\n  \n  // For class tokens, records if the class is a class expression or a class statement.\n  \n  // Number of times to insert a `nullishCoalesce(` snippet before this token.\n  \n  // Number of times to insert a `)` snippet after this token.\n  \n  // If true, insert an `optionalChain([` snippet before this token.\n  \n  // If true, insert a `])` snippet after this token.\n  \n  // Tag for `.`, `?.`, `[`, `?.[`, `(`, and `?.(` to denote the \"root\" token for this\n  // subscript chain. This can be used to determine if this chain is an optional chain.\n  \n  // Tag for `??` operators to denote the root token for this nullish coalescing call.\n  \n} exports.Token = Token;\n\n// ## Tokenizer\n\n// Move to the next token\n function next() {\n  _base.state.tokens.push(new Token());\n  nextToken();\n} exports.next = next;\n\n// Call instead of next when inside a template, since that needs to be handled differently.\n function nextTemplateToken() {\n  _base.state.tokens.push(new Token());\n  _base.state.start = _base.state.pos;\n  readTmplToken();\n} exports.nextTemplateToken = nextTemplateToken;\n\n// The tokenizer never parses regexes by default. Instead, the parser is responsible for\n// instructing it to parse a regex when we see a slash at the start of an expression.\n function retokenizeSlashAsRegex() {\n  if (_base.state.type === _types.TokenType.assign) {\n    --_base.state.pos;\n  }\n  readRegexp();\n} exports.retokenizeSlashAsRegex = retokenizeSlashAsRegex;\n\n function pushTypeContext(existingTokensInType) {\n  for (let i = _base.state.tokens.length - existingTokensInType; i < _base.state.tokens.length; i++) {\n    _base.state.tokens[i].isType = true;\n  }\n  const oldIsType = _base.state.isType;\n  _base.state.isType = true;\n  return oldIsType;\n} exports.pushTypeContext = pushTypeContext;\n\n function popTypeContext(oldIsType) {\n  _base.state.isType = oldIsType;\n} exports.popTypeContext = popTypeContext;\n\n function eat(type) {\n  if (match(type)) {\n    next();\n    return true;\n  } else {\n    return false;\n  }\n} exports.eat = eat;\n\n function eatTypeToken(tokenType) {\n  const oldIsType = _base.state.isType;\n  _base.state.isType = true;\n  eat(tokenType);\n  _base.state.isType = oldIsType;\n} exports.eatTypeToken = eatTypeToken;\n\n function match(type) {\n  return _base.state.type === type;\n} exports.match = match;\n\n function lookaheadType() {\n  const snapshot = _base.state.snapshot();\n  next();\n  const type = _base.state.type;\n  _base.state.restoreFromSnapshot(snapshot);\n  return type;\n} exports.lookaheadType = lookaheadType;\n\n class TypeAndKeyword {\n  \n  \n  constructor(type, contextualKeyword) {\n    this.type = type;\n    this.contextualKeyword = contextualKeyword;\n  }\n} exports.TypeAndKeyword = TypeAndKeyword;\n\n function lookaheadTypeAndKeyword() {\n  const snapshot = _base.state.snapshot();\n  next();\n  const type = _base.state.type;\n  const contextualKeyword = _base.state.contextualKeyword;\n  _base.state.restoreFromSnapshot(snapshot);\n  return new TypeAndKeyword(type, contextualKeyword);\n} exports.lookaheadTypeAndKeyword = lookaheadTypeAndKeyword;\n\n function nextTokenStart() {\n  return nextTokenStartSince(_base.state.pos);\n} exports.nextTokenStart = nextTokenStart;\n\n function nextTokenStartSince(pos) {\n  _whitespace.skipWhiteSpace.lastIndex = pos;\n  const skip = _whitespace.skipWhiteSpace.exec(_base.input);\n  return pos + skip[0].length;\n} exports.nextTokenStartSince = nextTokenStartSince;\n\n function lookaheadCharCode() {\n  return _base.input.charCodeAt(nextTokenStart());\n} exports.lookaheadCharCode = lookaheadCharCode;\n\n// Read a single token, updating the parser object's token-related\n// properties.\n function nextToken() {\n  skipSpace();\n  _base.state.start = _base.state.pos;\n  if (_base.state.pos >= _base.input.length) {\n    const tokens = _base.state.tokens;\n    // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.\n    // Also check the token positions rather than the types since sometimes we rewrite the token\n    // type to something else.\n    if (\n      tokens.length >= 2 &&\n      tokens[tokens.length - 1].start >= _base.input.length &&\n      tokens[tokens.length - 2].start >= _base.input.length\n    ) {\n      _util.unexpected.call(void 0, \"Unexpectedly reached the end of input.\");\n    }\n    finishToken(_types.TokenType.eof);\n    return;\n  }\n  readToken(_base.input.charCodeAt(_base.state.pos));\n} exports.nextToken = nextToken;\n\nfunction readToken(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (\n    _identifier.IS_IDENTIFIER_START[code] ||\n    code === _charcodes.charCodes.backslash ||\n    (code === _charcodes.charCodes.atSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.atSign)\n  ) {\n    _readWord2.default.call(void 0, );\n  } else {\n    getTokenFromCode(code);\n  }\n}\n\nfunction skipBlockComment() {\n  while (\n    _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.asterisk ||\n    _base.input.charCodeAt(_base.state.pos + 1) !== _charcodes.charCodes.slash\n  ) {\n    _base.state.pos++;\n    if (_base.state.pos > _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated comment\", _base.state.pos - 2);\n      return;\n    }\n  }\n  _base.state.pos += 2;\n}\n\n function skipLineComment(startSkip) {\n  let ch = _base.input.charCodeAt((_base.state.pos += startSkip));\n  if (_base.state.pos < _base.input.length) {\n    while (\n      ch !== _charcodes.charCodes.lineFeed &&\n      ch !== _charcodes.charCodes.carriageReturn &&\n      ch !== _charcodes.charCodes.lineSeparator &&\n      ch !== _charcodes.charCodes.paragraphSeparator &&\n      ++_base.state.pos < _base.input.length\n    ) {\n      ch = _base.input.charCodeAt(_base.state.pos);\n    }\n  }\n} exports.skipLineComment = skipLineComment;\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments.\n function skipSpace() {\n  while (_base.state.pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    switch (ch) {\n      case _charcodes.charCodes.carriageReturn:\n        if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.lineFeed) {\n          ++_base.state.pos;\n        }\n\n      case _charcodes.charCodes.lineFeed:\n      case _charcodes.charCodes.lineSeparator:\n      case _charcodes.charCodes.paragraphSeparator:\n        ++_base.state.pos;\n        break;\n\n      case _charcodes.charCodes.slash:\n        switch (_base.input.charCodeAt(_base.state.pos + 1)) {\n          case _charcodes.charCodes.asterisk:\n            _base.state.pos += 2;\n            skipBlockComment();\n            break;\n\n          case _charcodes.charCodes.slash:\n            skipLineComment(2);\n            break;\n\n          default:\n            return;\n        }\n        break;\n\n      default:\n        if (_whitespace.IS_WHITESPACE[ch]) {\n          ++_base.state.pos;\n        } else {\n          return;\n        }\n    }\n  }\n} exports.skipSpace = skipSpace;\n\n// Called at the end of every token. Sets various fields, and skips the space after the token, so\n// that the next one's `start` will point at the right position.\n function finishToken(\n  type,\n  contextualKeyword = _keywords.ContextualKeyword.NONE,\n) {\n  _base.state.end = _base.state.pos;\n  _base.state.type = type;\n  _base.state.contextualKeyword = contextualKeyword;\n} exports.finishToken = finishToken;\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\nfunction readToken_dot() {\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar >= _charcodes.charCodes.digit0 && nextChar <= _charcodes.charCodes.digit9) {\n    readNumber(true);\n    return;\n  }\n\n  if (nextChar === _charcodes.charCodes.dot && _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.dot) {\n    _base.state.pos += 3;\n    finishToken(_types.TokenType.ellipsis);\n  } else {\n    ++_base.state.pos;\n    finishToken(_types.TokenType.dot);\n  }\n}\n\nfunction readToken_slash() {\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else {\n    finishOp(_types.TokenType.slash, 1);\n  }\n}\n\nfunction readToken_mult_modulo(code) {\n  // '%*'\n  let tokenType = code === _charcodes.charCodes.asterisk ? _types.TokenType.star : _types.TokenType.modulo;\n  let width = 1;\n  let nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  // Exponentiation operator **\n  if (code === _charcodes.charCodes.asterisk && nextChar === _charcodes.charCodes.asterisk) {\n    width++;\n    nextChar = _base.input.charCodeAt(_base.state.pos + 2);\n    tokenType = _types.TokenType.exponent;\n  }\n\n  // Match *= or %=, disallowing *=> which can be valid in flow.\n  if (\n    nextChar === _charcodes.charCodes.equalsTo &&\n    _base.input.charCodeAt(_base.state.pos + 2) !== _charcodes.charCodes.greaterThan\n  ) {\n    width++;\n    tokenType = _types.TokenType.assign;\n  }\n\n  finishOp(tokenType, width);\n}\n\nfunction readToken_pipe_amp(code) {\n  // '|&'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    if (_base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo) {\n      // ||= or &&=\n      finishOp(_types.TokenType.assign, 3);\n    } else {\n      // || or &&\n      finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.logicalOR : _types.TokenType.logicalAND, 2);\n    }\n    return;\n  }\n\n  if (code === _charcodes.charCodes.verticalBar) {\n    // '|>'\n    if (nextChar === _charcodes.charCodes.greaterThan) {\n      finishOp(_types.TokenType.pipeline, 2);\n      return;\n    } else if (nextChar === _charcodes.charCodes.rightCurlyBrace && _base.isFlowEnabled) {\n      // '|}'\n      finishOp(_types.TokenType.braceBarR, 2);\n      return;\n    }\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n    return;\n  }\n\n  finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.bitwiseOR : _types.TokenType.bitwiseAND, 1);\n}\n\nfunction readToken_caret() {\n  // '^'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else {\n    finishOp(_types.TokenType.bitwiseXOR, 1);\n  }\n}\n\nfunction readToken_plus_min(code) {\n  // '+-'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    // Tentatively call this a prefix operator, but it might be changed to postfix later.\n    finishOp(_types.TokenType.preIncDec, 2);\n    return;\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.assign, 2);\n  } else if (code === _charcodes.charCodes.plusSign) {\n    finishOp(_types.TokenType.plus, 1);\n  } else {\n    finishOp(_types.TokenType.minus, 1);\n  }\n}\n\n// '<>'\nfunction readToken_lt_gt(code) {\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n\n  if (nextChar === code) {\n    const size =\n      code === _charcodes.charCodes.greaterThan && _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.greaterThan\n        ? 3\n        : 2;\n    if (_base.input.charCodeAt(_base.state.pos + size) === _charcodes.charCodes.equalsTo) {\n      finishOp(_types.TokenType.assign, size + 1);\n      return;\n    }\n    // Avoid right-shift for things like Array<Array<string>>.\n    if (code === _charcodes.charCodes.greaterThan && _base.state.isType) {\n      finishOp(_types.TokenType.greaterThan, 1);\n      return;\n    }\n    finishOp(_types.TokenType.bitShift, size);\n    return;\n  }\n\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    // <= | >=\n    finishOp(_types.TokenType.relationalOrEqual, 2);\n  } else if (code === _charcodes.charCodes.lessThan) {\n    finishOp(_types.TokenType.lessThan, 1);\n  } else {\n    finishOp(_types.TokenType.greaterThan, 1);\n  }\n}\n\nfunction readToken_eq_excl(code) {\n  // '=!'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  if (nextChar === _charcodes.charCodes.equalsTo) {\n    finishOp(_types.TokenType.equality, _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo ? 3 : 2);\n    return;\n  }\n  if (code === _charcodes.charCodes.equalsTo && nextChar === _charcodes.charCodes.greaterThan) {\n    // '=>'\n    _base.state.pos += 2;\n    finishToken(_types.TokenType.arrow);\n    return;\n  }\n  finishOp(code === _charcodes.charCodes.equalsTo ? _types.TokenType.eq : _types.TokenType.bang, 1);\n}\n\nfunction readToken_question() {\n  // '?'\n  const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n  const nextChar2 = _base.input.charCodeAt(_base.state.pos + 2);\n  if (nextChar === _charcodes.charCodes.questionMark && !_base.state.isType) {\n    if (nextChar2 === _charcodes.charCodes.equalsTo) {\n      // '??='\n      finishOp(_types.TokenType.assign, 3);\n    } else {\n      // '??'\n      finishOp(_types.TokenType.nullishCoalescing, 2);\n    }\n  } else if (\n    nextChar === _charcodes.charCodes.dot &&\n    !(nextChar2 >= _charcodes.charCodes.digit0 && nextChar2 <= _charcodes.charCodes.digit9)\n  ) {\n    // '.' not followed by a number\n    _base.state.pos += 2;\n    finishToken(_types.TokenType.questionDot);\n  } else {\n    ++_base.state.pos;\n    finishToken(_types.TokenType.question);\n  }\n}\n\n function getTokenFromCode(code) {\n  switch (code) {\n    case _charcodes.charCodes.numberSign:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.hash);\n      return;\n\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n\n    case _charcodes.charCodes.dot:\n      readToken_dot();\n      return;\n\n    // Punctuation tokens.\n    case _charcodes.charCodes.leftParenthesis:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.parenL);\n      return;\n    case _charcodes.charCodes.rightParenthesis:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.parenR);\n      return;\n    case _charcodes.charCodes.semicolon:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.semi);\n      return;\n    case _charcodes.charCodes.comma:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.comma);\n      return;\n    case _charcodes.charCodes.leftSquareBracket:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.bracketL);\n      return;\n    case _charcodes.charCodes.rightSquareBracket:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.bracketR);\n      return;\n\n    case _charcodes.charCodes.leftCurlyBrace:\n      if (_base.isFlowEnabled && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.verticalBar) {\n        finishOp(_types.TokenType.braceBarL, 2);\n      } else {\n        ++_base.state.pos;\n        finishToken(_types.TokenType.braceL);\n      }\n      return;\n\n    case _charcodes.charCodes.rightCurlyBrace:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.braceR);\n      return;\n\n    case _charcodes.charCodes.colon:\n      if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.colon) {\n        finishOp(_types.TokenType.doubleColon, 2);\n      } else {\n        ++_base.state.pos;\n        finishToken(_types.TokenType.colon);\n      }\n      return;\n\n    case _charcodes.charCodes.questionMark:\n      readToken_question();\n      return;\n    case _charcodes.charCodes.atSign:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.at);\n      return;\n\n    case _charcodes.charCodes.graveAccent:\n      ++_base.state.pos;\n      finishToken(_types.TokenType.backQuote);\n      return;\n\n    case _charcodes.charCodes.digit0: {\n      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);\n      // '0x', '0X', '0o', '0O', '0b', '0B'\n      if (\n        nextChar === _charcodes.charCodes.lowercaseX ||\n        nextChar === _charcodes.charCodes.uppercaseX ||\n        nextChar === _charcodes.charCodes.lowercaseO ||\n        nextChar === _charcodes.charCodes.uppercaseO ||\n        nextChar === _charcodes.charCodes.lowercaseB ||\n        nextChar === _charcodes.charCodes.uppercaseB\n      ) {\n        readRadixNumber();\n        return;\n      }\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case _charcodes.charCodes.digit1:\n    case _charcodes.charCodes.digit2:\n    case _charcodes.charCodes.digit3:\n    case _charcodes.charCodes.digit4:\n    case _charcodes.charCodes.digit5:\n    case _charcodes.charCodes.digit6:\n    case _charcodes.charCodes.digit7:\n    case _charcodes.charCodes.digit8:\n    case _charcodes.charCodes.digit9:\n      readNumber(false);\n      return;\n\n    // Quotes produce strings.\n    case _charcodes.charCodes.quotationMark:\n    case _charcodes.charCodes.apostrophe:\n      readString(code);\n      return;\n\n    // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case _charcodes.charCodes.slash:\n      readToken_slash();\n      return;\n\n    case _charcodes.charCodes.percentSign:\n    case _charcodes.charCodes.asterisk:\n      readToken_mult_modulo(code);\n      return;\n\n    case _charcodes.charCodes.verticalBar:\n    case _charcodes.charCodes.ampersand:\n      readToken_pipe_amp(code);\n      return;\n\n    case _charcodes.charCodes.caret:\n      readToken_caret();\n      return;\n\n    case _charcodes.charCodes.plusSign:\n    case _charcodes.charCodes.dash:\n      readToken_plus_min(code);\n      return;\n\n    case _charcodes.charCodes.lessThan:\n    case _charcodes.charCodes.greaterThan:\n      readToken_lt_gt(code);\n      return;\n\n    case _charcodes.charCodes.equalsTo:\n    case _charcodes.charCodes.exclamationMark:\n      readToken_eq_excl(code);\n      return;\n\n    case _charcodes.charCodes.tilde:\n      finishOp(_types.TokenType.tilde, 1);\n      return;\n\n    default:\n      break;\n  }\n\n  _util.unexpected.call(void 0, `Unexpected character '${String.fromCharCode(code)}'`, _base.state.pos);\n} exports.getTokenFromCode = getTokenFromCode;\n\nfunction finishOp(type, size) {\n  _base.state.pos += size;\n  finishToken(type);\n}\n\nfunction readRegexp() {\n  const start = _base.state.pos;\n  let escaped = false;\n  let inClass = false;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated regular expression\", start);\n      return;\n    }\n    const code = _base.input.charCodeAt(_base.state.pos);\n    if (escaped) {\n      escaped = false;\n    } else {\n      if (code === _charcodes.charCodes.leftSquareBracket) {\n        inClass = true;\n      } else if (code === _charcodes.charCodes.rightSquareBracket && inClass) {\n        inClass = false;\n      } else if (code === _charcodes.charCodes.slash && !inClass) {\n        break;\n      }\n      escaped = code === _charcodes.charCodes.backslash;\n    }\n    ++_base.state.pos;\n  }\n  ++_base.state.pos;\n  // Need to use `skipWord` because '\\uXXXX' sequences are allowed here (don't ask).\n  skipWord();\n\n  finishToken(_types.TokenType.regexp);\n}\n\n// Read an integer. We allow any valid digit, including hex digits, plus numeric separators, and\n// stop at any other character.\nfunction readInt() {\n  while (true) {\n    const code = _base.input.charCodeAt(_base.state.pos);\n    if (\n      (code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9) ||\n      (code >= _charcodes.charCodes.lowercaseA && code <= _charcodes.charCodes.lowercaseF) ||\n      (code >= _charcodes.charCodes.uppercaseA && code <= _charcodes.charCodes.uppercaseF) ||\n      code === _charcodes.charCodes.underscore\n    ) {\n      _base.state.pos++;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction readRadixNumber() {\n  let isBigInt = false;\n  const start = _base.state.pos;\n\n  _base.state.pos += 2; // 0x\n  readInt();\n\n  const nextChar = _base.input.charCodeAt(_base.state.pos);\n  if (nextChar === _charcodes.charCodes.lowercaseN) {\n    ++_base.state.pos;\n    isBigInt = true;\n  } else if (nextChar === _charcodes.charCodes.lowercaseM) {\n    _util.unexpected.call(void 0, \"Invalid decimal\", start);\n  }\n\n  if (isBigInt) {\n    finishToken(_types.TokenType.bigint);\n    return;\n  }\n\n  finishToken(_types.TokenType.num);\n}\n\n// Read an integer, octal integer, or floating-point number.\nfunction readNumber(startsWithDot) {\n  let isBigInt = false;\n  let isDecimal = false;\n\n  if (!startsWithDot) {\n    readInt();\n  }\n\n  let nextChar = _base.input.charCodeAt(_base.state.pos);\n  if (nextChar === _charcodes.charCodes.dot) {\n    ++_base.state.pos;\n    readInt();\n    nextChar = _base.input.charCodeAt(_base.state.pos);\n  }\n\n  if (nextChar === _charcodes.charCodes.uppercaseE || nextChar === _charcodes.charCodes.lowercaseE) {\n    nextChar = _base.input.charCodeAt(++_base.state.pos);\n    if (nextChar === _charcodes.charCodes.plusSign || nextChar === _charcodes.charCodes.dash) {\n      ++_base.state.pos;\n    }\n    readInt();\n    nextChar = _base.input.charCodeAt(_base.state.pos);\n  }\n\n  if (nextChar === _charcodes.charCodes.lowercaseN) {\n    ++_base.state.pos;\n    isBigInt = true;\n  } else if (nextChar === _charcodes.charCodes.lowercaseM) {\n    ++_base.state.pos;\n    isDecimal = true;\n  }\n\n  if (isBigInt) {\n    finishToken(_types.TokenType.bigint);\n    return;\n  }\n\n  if (isDecimal) {\n    finishToken(_types.TokenType.decimal);\n    return;\n  }\n\n  finishToken(_types.TokenType.num);\n}\n\nfunction readString(quote) {\n  _base.state.pos++;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated string constant\");\n      return;\n    }\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (ch === _charcodes.charCodes.backslash) {\n      _base.state.pos++;\n    } else if (ch === quote) {\n      break;\n    }\n    _base.state.pos++;\n  }\n  _base.state.pos++;\n  finishToken(_types.TokenType.string);\n}\n\n// Reads template string tokens.\nfunction readTmplToken() {\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated template\");\n      return;\n    }\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (\n      ch === _charcodes.charCodes.graveAccent ||\n      (ch === _charcodes.charCodes.dollarSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.leftCurlyBrace)\n    ) {\n      if (_base.state.pos === _base.state.start && match(_types.TokenType.template)) {\n        if (ch === _charcodes.charCodes.dollarSign) {\n          _base.state.pos += 2;\n          finishToken(_types.TokenType.dollarBraceL);\n          return;\n        } else {\n          ++_base.state.pos;\n          finishToken(_types.TokenType.backQuote);\n          return;\n        }\n      }\n      finishToken(_types.TokenType.template);\n      return;\n    }\n    if (ch === _charcodes.charCodes.backslash) {\n      _base.state.pos++;\n    }\n    _base.state.pos++;\n  }\n}\n\n// Skip to the end of the current word. Note that this is the same as the snippet at the end of\n// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough\n// measurements.\n function skipWord() {\n  while (_base.state.pos < _base.input.length) {\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (_identifier.IS_IDENTIFIER_CHAR[ch]) {\n      _base.state.pos++;\n    } else if (ch === _charcodes.charCodes.backslash) {\n      // \\u\n      _base.state.pos += 2;\n      if (_base.input.charCodeAt(_base.state.pos) === _charcodes.charCodes.leftCurlyBrace) {\n        while (\n          _base.state.pos < _base.input.length &&\n          _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.rightCurlyBrace\n        ) {\n          _base.state.pos++;\n        }\n        _base.state.pos++;\n      }\n    } else {\n      break;\n    }\n  }\n} exports.skipWord = skipWord;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});const entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexports. default = entities;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\n function getJSXPragmaInfo(options) {\n  const [base, suffix] = splitPragma(options.jsxPragma || \"React.createElement\");\n  const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || \"React.Fragment\");\n  return {base, suffix, fragmentBase, fragmentSuffix};\n} exports.default = getJSXPragmaInfo;\n\nfunction splitPragma(pragma) {\n  let dotIndex = pragma.indexOf(\".\");\n  if (dotIndex === -1) {\n    dotIndex = pragma.length;\n  }\n  return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); class Transformer {\n  // Return true if anything was processed, false otherwise.\n  \n\n  getPrefixCode() {\n    return \"\";\n  }\n\n  getHoistedCode() {\n    return \"\";\n  }\n\n  getSuffixCode() {\n    return \"\";\n  }\n} exports.default = Transformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _xhtml = require('../parser/plugins/jsx/xhtml'); var _xhtml2 = _interopRequireDefault(_xhtml);\nvar _types = require('../parser/tokenizer/types');\nvar _charcodes = require('../parser/util/charcodes');\n\nvar _getJSXPragmaInfo = require('../util/getJSXPragmaInfo'); var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n class JSXTransformer extends _Transformer2.default {\n  __init() {this.lastLineNumber = 1}\n  __init2() {this.lastIndex = 0}\n  __init3() {this.filenameVarName = null}\n  \n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.options = options;JSXTransformer.prototype.__init.call(this);JSXTransformer.prototype.__init2.call(this);JSXTransformer.prototype.__init3.call(this);;\n    this.jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n      this.processJSXTag();\n      return true;\n    }\n    return false;\n  }\n\n  getPrefixCode() {\n    if (this.filenameVarName) {\n      return `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || \"\")};`;\n    } else {\n      return \"\";\n    }\n  }\n\n  /**\n   * Lazily calculate line numbers to avoid unneeded work. We assume this is always called in\n   * increasing order by index.\n   */\n  getLineNumberForIndex(index) {\n    const code = this.tokens.code;\n    while (this.lastIndex < index && this.lastIndex < code.length) {\n      if (code[this.lastIndex] === \"\\n\") {\n        this.lastLineNumber++;\n      }\n      this.lastIndex++;\n    }\n    return this.lastLineNumber;\n  }\n\n  getFilenameVarName() {\n    if (!this.filenameVarName) {\n      this.filenameVarName = this.nameManager.claimFreeName(\"_jsxFileName\");\n    }\n    return this.filenameVarName;\n  }\n\n  processProps(firstTokenStart) {\n    const lineNumber = this.getLineNumberForIndex(firstTokenStart);\n    const devProps = this.options.production\n      ? \"\"\n      : `__self: this, __source: {fileName: ${this.getFilenameVarName()}, lineNumber: ${lineNumber}}`;\n    if (!this.tokens.matches1(_types.TokenType.jsxName) && !this.tokens.matches1(_types.TokenType.braceL)) {\n      if (devProps) {\n        this.tokens.appendCode(`, {${devProps}}`);\n      } else {\n        this.tokens.appendCode(`, null`);\n      }\n      return;\n    }\n    this.tokens.appendCode(`, {`);\n    while (true) {\n      if (this.tokens.matches2(_types.TokenType.jsxName, _types.TokenType.eq)) {\n        this.processPropKeyName();\n        this.tokens.replaceToken(\": \");\n        if (this.tokens.matches1(_types.TokenType.braceL)) {\n          this.tokens.replaceToken(\"\");\n          this.rootTransformer.processBalancedCode();\n          this.tokens.replaceToken(\"\");\n        } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n          this.processJSXTag();\n        } else {\n          this.processStringPropValue();\n        }\n      } else if (this.tokens.matches1(_types.TokenType.jsxName)) {\n        this.processPropKeyName();\n        this.tokens.appendCode(\": true\");\n      } else if (this.tokens.matches1(_types.TokenType.braceL)) {\n        this.tokens.replaceToken(\"\");\n        this.rootTransformer.processBalancedCode();\n        this.tokens.replaceToken(\"\");\n      } else {\n        break;\n      }\n      this.tokens.appendCode(\",\");\n    }\n    if (devProps) {\n      this.tokens.appendCode(` ${devProps}}`);\n    } else {\n      this.tokens.appendCode(\"}\");\n    }\n  }\n\n  processPropKeyName() {\n    const keyName = this.tokens.identifierName();\n    if (keyName.includes(\"-\")) {\n      this.tokens.replaceToken(`'${keyName}'`);\n    } else {\n      this.tokens.copyToken();\n    }\n  }\n\n  processStringPropValue() {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXStringValueLiteral(valueCode);\n    this.tokens.replaceToken(literalCode + replacementCode);\n  }\n\n  /**\n   * Process the first part of a tag, before any props.\n   */\n  processTagIntro() {\n    // Walk forward until we see one of these patterns:\n    // jsxName to start the first prop, preceded by another jsxName to end the tag name.\n    // jsxName to start the first prop, preceded by greaterThan to end the type argument.\n    // [open brace] to start the first prop.\n    // [jsxTagEnd] to end the open-tag.\n    // [slash, jsxTagEnd] to end the self-closing tag.\n    let introEnd = this.tokens.currentIndex() + 1;\n    while (\n      this.tokens.tokens[introEnd].isType ||\n      (!this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.jsxName, _types.TokenType.jsxName) &&\n        !this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.greaterThan, _types.TokenType.jsxName) &&\n        !this.tokens.matches1AtIndex(introEnd, _types.TokenType.braceL) &&\n        !this.tokens.matches1AtIndex(introEnd, _types.TokenType.jsxTagEnd) &&\n        !this.tokens.matches2AtIndex(introEnd, _types.TokenType.slash, _types.TokenType.jsxTagEnd))\n    ) {\n      introEnd++;\n    }\n    if (introEnd === this.tokens.currentIndex() + 1) {\n      const tagName = this.tokens.identifierName();\n      if (startsWithLowerCase(tagName)) {\n        this.tokens.replaceToken(`'${tagName}'`);\n      }\n    }\n    while (this.tokens.currentIndex() < introEnd) {\n      this.rootTransformer.processToken();\n    }\n  }\n\n  processChildren() {\n    while (true) {\n      if (this.tokens.matches2(_types.TokenType.jsxTagStart, _types.TokenType.slash)) {\n        // Closing tag, so no more children.\n        return;\n      }\n      if (this.tokens.matches1(_types.TokenType.braceL)) {\n        if (this.tokens.matches2(_types.TokenType.braceL, _types.TokenType.braceR)) {\n          // Empty interpolations and comment-only interpolations are allowed\n          // and don't create an extra child arg.\n          this.tokens.replaceToken(\"\");\n          this.tokens.replaceToken(\"\");\n        } else {\n          // Interpolated expression.\n          this.tokens.replaceToken(\", \");\n          this.rootTransformer.processBalancedCode();\n          this.tokens.replaceToken(\"\");\n        }\n      } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {\n        // Child JSX element\n        this.tokens.appendCode(\", \");\n        this.processJSXTag();\n      } else if (this.tokens.matches1(_types.TokenType.jsxText)) {\n        this.processChildTextElement();\n      } else {\n        throw new Error(\"Unexpected token when processing JSX children.\");\n      }\n    }\n  }\n\n  processChildTextElement() {\n    const token = this.tokens.currentToken();\n    const valueCode = this.tokens.code.slice(token.start, token.end);\n    const replacementCode = formatJSXTextReplacement(valueCode);\n    const literalCode = formatJSXTextLiteral(valueCode);\n    if (literalCode === '\"\"') {\n      this.tokens.replaceToken(replacementCode);\n    } else {\n      this.tokens.replaceToken(`, ${literalCode}${replacementCode}`);\n    }\n  }\n\n  processJSXTag() {\n    const {jsxPragmaInfo} = this;\n    const resolvedPragmaBaseName = this.importProcessor\n      ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.base) || jsxPragmaInfo.base\n      : jsxPragmaInfo.base;\n    const firstTokenStart = this.tokens.currentToken().start;\n    // First tag is always jsxTagStart.\n    this.tokens.replaceToken(`${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`);\n\n    if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n      // Fragment syntax.\n      const resolvedFragmentPragmaBaseName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.fragmentBase) ||\n          jsxPragmaInfo.fragmentBase\n        : jsxPragmaInfo.fragmentBase;\n      this.tokens.replaceToken(\n        `${resolvedFragmentPragmaBaseName}${jsxPragmaInfo.fragmentSuffix}, null`,\n      );\n      // Tag with children.\n      this.processChildren();\n      while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n        this.tokens.replaceToken(\"\");\n      }\n      this.tokens.replaceToken(\")\");\n    } else {\n      // Normal open tag or self-closing tag.\n      this.processTagIntro();\n      this.processProps(firstTokenStart);\n\n      if (this.tokens.matches2(_types.TokenType.slash, _types.TokenType.jsxTagEnd)) {\n        // Self-closing tag.\n        this.tokens.replaceToken(\"\");\n        this.tokens.replaceToken(\")\");\n      } else if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n        this.tokens.replaceToken(\"\");\n        // Tag with children.\n        this.processChildren();\n        while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {\n          this.tokens.replaceToken(\"\");\n        }\n        this.tokens.replaceToken(\")\");\n      } else {\n        throw new Error(\"Expected either /> or > at the end of the tag.\");\n      }\n    }\n  }\n} exports.default = JSXTransformer;\n\n/**\n * Spec for identifiers: https://tc39.github.io/ecma262/#prod-IdentifierStart.\n *\n * Really only treat anything starting with a-z as tag names.  `_`, `$`, `\u00E9`\n * should be treated as copmonent names\n */\n function startsWithLowerCase(s) {\n  const firstChar = s.charCodeAt(0);\n  return firstChar >= _charcodes.charCodes.lowercaseA && firstChar <= _charcodes.charCodes.lowercaseZ;\n} exports.startsWithLowerCase = startsWithLowerCase;\n\n/**\n * Turn the given jsxText string into a JS string literal. Leading and trailing\n * whitespace on lines is removed, except immediately after the open-tag and\n * before the close-tag. Empty lines are completely removed, and spaces are\n * added between lines after that.\n *\n * We use JSON.stringify to introduce escape characters as necessary, and trim\n * the start and end of each line and remove blank lines.\n */\nfunction formatJSXTextLiteral(text) {\n  let result = \"\";\n  let whitespace = \"\";\n\n  let isInInitialLineWhitespace = false;\n  let seenNonWhitespace = false;\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \" \" || c === \"\\t\" || c === \"\\r\") {\n      if (!isInInitialLineWhitespace) {\n        whitespace += c;\n      }\n    } else if (c === \"\\n\") {\n      whitespace = \"\";\n      isInInitialLineWhitespace = true;\n    } else {\n      if (seenNonWhitespace && isInInitialLineWhitespace) {\n        result += \" \";\n      }\n      result += whitespace;\n      whitespace = \"\";\n      if (c === \"&\") {\n        const {entity, newI} = processEntity(text, i + 1);\n        i = newI - 1;\n        result += entity;\n      } else {\n        result += c;\n      }\n      seenNonWhitespace = true;\n      isInInitialLineWhitespace = false;\n    }\n  }\n  if (!isInInitialLineWhitespace) {\n    result += whitespace;\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Produce the code that should be printed after the JSX text string literal,\n * with most content removed, but all newlines preserved and all spacing at the\n * end preserved.\n */\nfunction formatJSXTextReplacement(text) {\n  let numNewlines = 0;\n  let numSpaces = 0;\n  for (const c of text) {\n    if (c === \"\\n\") {\n      numNewlines++;\n      numSpaces = 0;\n    } else if (c === \" \") {\n      numSpaces++;\n    }\n  }\n  return \"\\n\".repeat(numNewlines) + \" \".repeat(numSpaces);\n}\n\n/**\n * Format a string in the value position of a JSX prop.\n *\n * Use the same implementation as convertAttribute from\n * babel-helper-builder-react-jsx.\n */\nfunction formatJSXStringValueLiteral(text) {\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    const c = text[i];\n    if (c === \"\\n\") {\n      if (/\\s/.test(text[i + 1])) {\n        result += \" \";\n        while (i < text.length && /\\s/.test(text[i + 1])) {\n          i++;\n        }\n      } else {\n        result += \"\\n\";\n      }\n    } else if (c === \"&\") {\n      const {entity, newI} = processEntity(text, i + 1);\n      result += entity;\n      i = newI - 1;\n    } else {\n      result += c;\n    }\n  }\n  return JSON.stringify(result);\n}\n\n/**\n * Modified from jsxReadString in Babylon.\n */\nfunction processEntity(text, indexAfterAmpersand) {\n  let str = \"\";\n  let count = 0;\n  let entity;\n  let i = indexAfterAmpersand;\n\n  while (i < text.length && count++ < 10) {\n    const ch = text[i];\n    i++;\n    if (ch === \";\") {\n      if (str[0] === \"#\") {\n        if (str[1] === \"x\") {\n          str = str.substr(2);\n          if (HEX_NUMBER.test(str)) {\n            entity = String.fromCodePoint(parseInt(str, 16));\n          }\n        } else {\n          str = str.substr(1);\n          if (DECIMAL_NUMBER.test(str)) {\n            entity = String.fromCodePoint(parseInt(str, 10));\n          }\n        }\n      } else {\n        entity = _xhtml2.default[str];\n      }\n      break;\n    }\n    str += ch;\n  }\n  if (!entity) {\n    return {entity: \"&\", newI: indexAfterAmpersand};\n  }\n  return {entity, newI: i};\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _tokenizer = require('../parser/tokenizer');\nvar _types = require('../parser/tokenizer/types');\n\nvar _JSXTransformer = require('../transformers/JSXTransformer');\nvar _getJSXPragmaInfo = require('./getJSXPragmaInfo'); var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);\n\n function getNonTypeIdentifiers(tokens, options) {\n  const jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);\n  const nonTypeIdentifiers = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (\n      token.type === _types.TokenType.name &&\n      !token.isType &&\n      (token.identifierRole === _tokenizer.IdentifierRole.Access ||\n        token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand ||\n        token.identifierRole === _tokenizer.IdentifierRole.ExportAccess) &&\n      !token.shadowsGlobal\n    ) {\n      nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n    }\n    if (token.type === _types.TokenType.jsxTagStart) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n    }\n    if (\n      token.type === _types.TokenType.jsxTagStart &&\n      i + 1 < tokens.tokens.length &&\n      tokens.tokens[i + 1].type === _types.TokenType.jsxTagEnd\n    ) {\n      nonTypeIdentifiers.add(jsxPragmaInfo.base);\n      nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);\n    }\n    if (token.type === _types.TokenType.jsxName && token.identifierRole === _tokenizer.IdentifierRole.Access) {\n      const identifierName = tokens.identifierNameForToken(token);\n      // Lower-case single-component tag names like \"div\" don't count.\n      if (!_JSXTransformer.startsWithLowerCase.call(void 0, identifierName) || tokens.tokens[i + 1].type === _types.TokenType.dot) {\n        nonTypeIdentifiers.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return nonTypeIdentifiers;\n} exports.getNonTypeIdentifiers = getNonTypeIdentifiers;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _tokenizer = require('./parser/tokenizer');\nvar _keywords = require('./parser/tokenizer/keywords');\nvar _types = require('./parser/tokenizer/types');\n\nvar _getNonTypeIdentifiers = require('./util/getNonTypeIdentifiers');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Class responsible for preprocessing and bookkeeping import and export declarations within the\n * file.\n *\n * TypeScript uses a simpler mechanism that does not use functions like interopRequireDefault and\n * interopRequireWildcard, so we also allow that mode for compatibility.\n */\n class CJSImportProcessor {\n   __init() {this.nonTypeIdentifiers = new Set()}\n   __init2() {this.importInfoByPath = new Map()}\n   __init3() {this.importsToReplace = new Map()}\n   __init4() {this.identifierReplacements = new Map()}\n   __init5() {this.exportBindingsByLocalName = new Map()}\n\n  constructor(\n     nameManager,\n     tokens,\n     enableLegacyTypeScriptModuleInterop,\n     options,\n     isTypeScriptTransformEnabled,\n     helperManager,\n  ) {;this.nameManager = nameManager;this.tokens = tokens;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.options = options;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.helperManager = helperManager;CJSImportProcessor.prototype.__init.call(this);CJSImportProcessor.prototype.__init2.call(this);CJSImportProcessor.prototype.__init3.call(this);CJSImportProcessor.prototype.__init4.call(this);CJSImportProcessor.prototype.__init5.call(this);}\n\n  preprocessTokens() {\n    for (let i = 0; i < this.tokens.tokens.length; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType._import) &&\n        !this.tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)\n      ) {\n        this.preprocessImportAtIndex(i);\n      }\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType._export) &&\n        !this.tokens.matches2AtIndex(i, _types.TokenType._export, _types.TokenType.eq)\n      ) {\n        this.preprocessExportAtIndex(i);\n      }\n    }\n    this.generateImportReplacements();\n  }\n\n  /**\n   * In TypeScript, import statements that only import types should be removed. This does not count\n   * bare imports.\n   */\n  pruneTypeOnlyImports() {\n    this.nonTypeIdentifiers = _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, this.tokens, this.options);\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      if (\n        importInfo.hasBareImport ||\n        importInfo.hasStarExport ||\n        importInfo.exportStarNames.length > 0 ||\n        importInfo.namedExports.length > 0\n      ) {\n        continue;\n      }\n      const names = [\n        ...importInfo.defaultNames,\n        ...importInfo.wildcardNames,\n        ...importInfo.namedImports.map(({localName}) => localName),\n      ];\n      if (names.every((name) => this.isTypeName(name))) {\n        this.importsToReplace.set(path, \"\");\n      }\n    }\n  }\n\n  isTypeName(name) {\n    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);\n  }\n\n   generateImportReplacements() {\n    for (const [path, importInfo] of this.importInfoByPath.entries()) {\n      const {\n        defaultNames,\n        wildcardNames,\n        namedImports,\n        namedExports,\n        exportStarNames,\n        hasStarExport,\n      } = importInfo;\n\n      if (\n        defaultNames.length === 0 &&\n        wildcardNames.length === 0 &&\n        namedImports.length === 0 &&\n        namedExports.length === 0 &&\n        exportStarNames.length === 0 &&\n        !hasStarExport\n      ) {\n        // Import is never used, so don't even assign a name.\n        this.importsToReplace.set(path, `require('${path}');`);\n        continue;\n      }\n\n      const primaryImportName = this.getFreeIdentifierForPath(path);\n      let secondaryImportName;\n      if (this.enableLegacyTypeScriptModuleInterop) {\n        secondaryImportName = primaryImportName;\n      } else {\n        secondaryImportName =\n          wildcardNames.length > 0 ? wildcardNames[0] : this.getFreeIdentifierForPath(path);\n      }\n      let requireCode = `var ${primaryImportName} = require('${path}');`;\n      if (wildcardNames.length > 0) {\n        for (const wildcardName of wildcardNames) {\n          const moduleExpr = this.enableLegacyTypeScriptModuleInterop\n            ? primaryImportName\n            : `${this.helperManager.getHelperName(\"interopRequireWildcard\")}(${primaryImportName})`;\n          requireCode += ` var ${wildcardName} = ${moduleExpr};`;\n        }\n      } else if (exportStarNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(\n          \"interopRequireWildcard\",\n        )}(${primaryImportName});`;\n      } else if (defaultNames.length > 0 && secondaryImportName !== primaryImportName) {\n        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(\n          \"interopRequireDefault\",\n        )}(${primaryImportName});`;\n      }\n\n      for (const {importedName, localName} of namedExports) {\n        requireCode += ` ${this.helperManager.getHelperName(\n          \"createNamedExportFrom\",\n        )}(${primaryImportName}, '${localName}', '${importedName}');`;\n      }\n      for (const exportStarName of exportStarNames) {\n        requireCode += ` exports.${exportStarName} = ${secondaryImportName};`;\n      }\n      if (hasStarExport) {\n        requireCode += ` ${this.helperManager.getHelperName(\n          \"createStarExport\",\n        )}(${primaryImportName});`;\n      }\n\n      this.importsToReplace.set(path, requireCode);\n\n      for (const defaultName of defaultNames) {\n        this.identifierReplacements.set(defaultName, `${secondaryImportName}.default`);\n      }\n      for (const {importedName, localName} of namedImports) {\n        this.identifierReplacements.set(localName, `${primaryImportName}.${importedName}`);\n      }\n    }\n  }\n\n   getFreeIdentifierForPath(path) {\n    const components = path.split(\"/\");\n    const lastComponent = components[components.length - 1];\n    const baseName = lastComponent.replace(/\\W/g, \"\");\n    return this.nameManager.claimFreeName(`_${baseName}`);\n  }\n\n   preprocessImportAtIndex(index) {\n    const defaultNames = [];\n    const wildcardNames = [];\n    const namedImports = [];\n\n    index++;\n    if (\n      (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._type) ||\n        this.tokens.matches1AtIndex(index, _types.TokenType._typeof)) &&\n      !this.tokens.matches1AtIndex(index + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(index + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // import type declaration, so no need to process anything.\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.parenL)) {\n      // Dynamic import, so nothing to do\n      return;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.name)) {\n      defaultNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n      if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n        index++;\n      }\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.star)) {\n      // * as\n      index += 2;\n      wildcardNames.push(this.tokens.identifierNameAtIndex(index));\n      index++;\n    }\n\n    if (this.tokens.matches1AtIndex(index, _types.TokenType.braceL)) {\n      const result = this.getNamedImports(index + 1);\n      index = result.newIndex;\n\n      for (const namedImport of result.namedImports) {\n        // Treat {default as X} as a default import to ensure usage of require interop helper\n        if (namedImport.importedName === \"default\") {\n          defaultNames.push(namedImport.localName);\n        } else {\n          namedImports.push(namedImport);\n        }\n      }\n    }\n\n    if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {\n      index++;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.defaultNames.push(...defaultNames);\n    importInfo.wildcardNames.push(...wildcardNames);\n    importInfo.namedImports.push(...namedImports);\n    if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0) {\n      importInfo.hasBareImport = true;\n    }\n  }\n\n   preprocessExportAtIndex(index) {\n    if (\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._var) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._let) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._const)\n    ) {\n      this.preprocessVarExportAtIndex(index);\n    } else if (\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._function) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._class)\n    ) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 2);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.name, _types.TokenType._function)) {\n      const exportName = this.tokens.identifierNameAtIndex(index + 3);\n      this.addExportBinding(exportName, exportName);\n    } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.braceL)) {\n      this.preprocessNamedExportAtIndex(index);\n    } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.star)) {\n      this.preprocessExportStarAtIndex(index);\n    }\n  }\n\n   preprocessVarExportAtIndex(index) {\n    let depth = 0;\n    // Handle cases like `export let {x} = y;`, starting at the open-brace in that case.\n    for (let i = index + 2; ; i++) {\n      if (\n        this.tokens.matches1AtIndex(i, _types.TokenType.braceL) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.dollarBraceL) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.bracketL)\n      ) {\n        depth++;\n      } else if (\n        this.tokens.matches1AtIndex(i, _types.TokenType.braceR) ||\n        this.tokens.matches1AtIndex(i, _types.TokenType.bracketR)\n      ) {\n        depth--;\n      } else if (depth === 0 && !this.tokens.matches1AtIndex(i, _types.TokenType.name)) {\n        break;\n      } else if (this.tokens.matches1AtIndex(1, _types.TokenType.eq)) {\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        i = endIndex - 1;\n      } else {\n        const token = this.tokens.tokens[i];\n        if (_tokenizer.isDeclaration.call(void 0, token)) {\n          const exportName = this.tokens.identifierNameAtIndex(i);\n          this.identifierReplacements.set(exportName, `exports.${exportName}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk this export statement just in case it's an export...from statement.\n   * If it is, combine it into the import info for that path. Otherwise, just\n   * bail out; it'll be handled later.\n   */\n   preprocessNamedExportAtIndex(index) {\n    // export {\n    index += 2;\n    const {newIndex, namedImports} = this.getNamedImports(index);\n    index = newIndex;\n\n    if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {\n      index++;\n    } else {\n      // Reinterpret \"a as b\" to be local/exported rather than imported/local.\n      for (const {importedName: localName, localName: exportedName} of namedImports) {\n        this.addExportBinding(localName, exportedName);\n      }\n      return;\n    }\n\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of import statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    importInfo.namedExports.push(...namedImports);\n  }\n\n   preprocessExportStarAtIndex(index) {\n    let exportedName = null;\n    if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.star, _types.TokenType._as)) {\n      // export * as\n      index += 3;\n      exportedName = this.tokens.identifierNameAtIndex(index);\n      // foo from\n      index += 2;\n    } else {\n      // export * from\n      index += 3;\n    }\n    if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {\n      throw new Error(\"Expected string token at the end of star export statement.\");\n    }\n    const path = this.tokens.stringValueAtIndex(index);\n    const importInfo = this.getImportInfo(path);\n    if (exportedName !== null) {\n      importInfo.exportStarNames.push(exportedName);\n    } else {\n      importInfo.hasStarExport = true;\n    }\n  }\n\n   getNamedImports(index) {\n    const namedImports = [];\n    while (true) {\n      if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n        index++;\n        break;\n      }\n\n      // Flow type imports should just be ignored.\n      let isTypeImport = false;\n      if (\n        (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._type) ||\n          this.tokens.matches1AtIndex(index, _types.TokenType._typeof)) &&\n        this.tokens.matches1AtIndex(index + 1, _types.TokenType.name) &&\n        !this.tokens.matchesContextualAtIndex(index + 1, _keywords.ContextualKeyword._as)\n      ) {\n        isTypeImport = true;\n        index++;\n      }\n\n      const importedName = this.tokens.identifierNameAtIndex(index);\n      let localName;\n      index++;\n      if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._as)) {\n        index++;\n        localName = this.tokens.identifierNameAtIndex(index);\n        index++;\n      } else {\n        localName = importedName;\n      }\n      if (!isTypeImport) {\n        namedImports.push({importedName, localName});\n      }\n      if (this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {\n        index += 2;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n        index++;\n        break;\n      } else if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n        index++;\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.tokens[index])}`);\n      }\n    }\n    return {newIndex: index, namedImports};\n  }\n\n  /**\n   * Get a mutable import info object for this path, creating one if it doesn't\n   * exist yet.\n   */\n   getImportInfo(path) {\n    const existingInfo = this.importInfoByPath.get(path);\n    if (existingInfo) {\n      return existingInfo;\n    }\n    const newInfo = {\n      defaultNames: [],\n      wildcardNames: [],\n      namedImports: [],\n      namedExports: [],\n      hasBareImport: false,\n      exportStarNames: [],\n      hasStarExport: false,\n    };\n    this.importInfoByPath.set(path, newInfo);\n    return newInfo;\n  }\n\n   addExportBinding(localName, exportedName) {\n    if (!this.exportBindingsByLocalName.has(localName)) {\n      this.exportBindingsByLocalName.set(localName, []);\n    }\n    this.exportBindingsByLocalName.get(localName).push(exportedName);\n  }\n\n  /**\n   * Return the code to use for the import for this path, or the empty string if\n   * the code has already been \"claimed\" by a previous import.\n   */\n  claimImportCode(importPath) {\n    const result = this.importsToReplace.get(importPath);\n    this.importsToReplace.set(importPath, \"\");\n    return result || \"\";\n  }\n\n  getIdentifierReplacement(identifierName) {\n    return this.identifierReplacements.get(identifierName) || null;\n  }\n\n  /**\n   * Return a string like `exports.foo = exports.bar`.\n   */\n  resolveExportBinding(assignedName) {\n    const exportedNames = this.exportBindingsByLocalName.get(assignedName);\n    if (!exportedNames || exportedNames.length === 0) {\n      return null;\n    }\n    return exportedNames.map((exportedName) => `exports.${exportedName}`).join(\" = \");\n  }\n\n  /**\n   * Return all imported/exported names where we might be interested in whether usages of those\n   * names are shadowed.\n   */\n  getGlobalNames() {\n    return new Set([\n      ...this.identifierReplacements.keys(),\n      ...this.exportBindingsByLocalName.keys(),\n    ]);\n  }\n} exports.default = CJSImportProcessor;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _charcodes = require('./parser/util/charcodes');\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Generate a simple source map indicating that each line maps directly to the original line.\n */\n function computeSourceMap(\n  code,\n  filePath,\n  {compiledFilename},\n) {\n  let mappings = \"AAAA\";\n  for (let i = 0; i < code.length; i++) {\n    if (code.charCodeAt(i) === _charcodes.charCodes.lineFeed) {\n      mappings += \";AACA\";\n    }\n  }\n  return {\n    version: 3,\n    file: compiledFilename || \"\",\n    sources: [filePath],\n    mappings,\n    names: [],\n  };\n} exports.default = computeSourceMap;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nconst HELPERS = {\n  interopRequireWildcard: `\n    function interopRequireWildcard(obj) {\n      if (obj && obj.__esModule) {\n        return obj;\n      } else {\n        var newObj = {};\n        if (obj != null) {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n        newObj.default = obj;\n        return newObj;\n      }\n    }\n  `,\n  interopRequireDefault: `\n    function interopRequireDefault(obj) {\n      return obj && obj.__esModule ? obj : { default: obj };\n    }\n  `,\n  createNamedExportFrom: `\n    function createNamedExportFrom(obj, localName, importedName) {\n      Object.defineProperty(exports, localName, {enumerable: true, get: () => obj[importedName]});\n    }\n  `,\n  // Note that TypeScript and Babel do this differently; TypeScript does a simple existence\n  // check in the exports object and does a plain assignment, whereas Babel uses\n  // defineProperty and builds an object of explicitly-exported names so that star exports can\n  // always take lower precedence. For now, we do the easier TypeScript thing.\n  createStarExport: `\n    function createStarExport(obj) {\n      Object.keys(obj)\n        .filter((key) => key !== \"default\" && key !== \"__esModule\")\n        .forEach((key) => {\n          if (exports.hasOwnProperty(key)) {\n            return;\n          }\n          Object.defineProperty(exports, key, {enumerable: true, get: () => obj[key]});\n        });\n    }\n  `,\n  nullishCoalesce: `\n    function nullishCoalesce(lhs, rhsFn) {\n      if (lhs != null) {\n        return lhs;\n      } else {\n        return rhsFn();\n      }\n    }\n  `,\n  asyncNullishCoalesce: `\n    async function asyncNullishCoalesce(lhs, rhsFn) {\n      if (lhs != null) {\n        return lhs;\n      } else {\n        return await rhsFn();\n      }\n    }\n  `,\n  optionalChain: `\n    function optionalChain(ops) {\n      let lastAccessLHS = undefined;\n      let value = ops[0];\n      let i = 1;\n      while (i < ops.length) {\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n          return undefined;\n        }\n        if (op === 'access' || op === 'optionalAccess') {\n          lastAccessLHS = value;\n          value = fn(value);\n        } else if (op === 'call' || op === 'optionalCall') {\n          value = fn((...args) => value.call(lastAccessLHS, ...args));\n          lastAccessLHS = undefined;\n        }\n      }\n      return value;\n    }\n  `,\n  asyncOptionalChain: `\n    async function asyncOptionalChain(ops) {\n      let lastAccessLHS = undefined;\n      let value = ops[0];\n      let i = 1;\n      while (i < ops.length) {\n        const op = ops[i];\n        const fn = ops[i + 1];\n        i += 2;\n        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n          return undefined;\n        }\n        if (op === 'access' || op === 'optionalAccess') {\n          lastAccessLHS = value;\n          value = await fn(value);\n        } else if (op === 'call' || op === 'optionalCall') {\n          value = await fn((...args) => value.call(lastAccessLHS, ...args));\n          lastAccessLHS = undefined;\n        }\n      }\n      return value;\n    }\n  `,\n  optionalChainDelete: `\n    function optionalChainDelete(ops) {\n      const result = OPTIONAL_CHAIN_NAME(ops);\n      return result == null ? true : result;\n    }\n  `,\n  asyncOptionalChainDelete: `\n    async function asyncOptionalChainDelete(ops) {\n      const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n      return result == null ? true : result;\n    }\n  `,\n};\n\n class HelperManager {\n  __init() {this.helperNames = {}}\n  constructor( nameManager) {;this.nameManager = nameManager;HelperManager.prototype.__init.call(this);}\n\n  getHelperName(baseName) {\n    let helperName = this.helperNames[baseName];\n    if (helperName) {\n      return helperName;\n    }\n    helperName = this.nameManager.claimFreeName(`_${baseName}`);\n    this.helperNames[baseName] = helperName;\n    return helperName;\n  }\n\n  emitHelpers() {\n    let resultCode = \"\";\n    if (this.helperNames.optionalChainDelete) {\n      this.getHelperName(\"optionalChain\");\n    }\n    if (this.helperNames.asyncOptionalChainDelete) {\n      this.getHelperName(\"asyncOptionalChain\");\n    }\n    for (const [baseName, helperCodeTemplate] of Object.entries(HELPERS)) {\n      const helperName = this.helperNames[baseName];\n      let helperCode = helperCodeTemplate;\n      if (baseName === \"optionalChainDelete\") {\n        helperCode = helperCode.replace(\"OPTIONAL_CHAIN_NAME\", this.helperNames.optionalChain);\n      } else if (baseName === \"asyncOptionalChainDelete\") {\n        helperCode = helperCode.replace(\n          \"ASYNC_OPTIONAL_CHAIN_NAME\",\n          this.helperNames.asyncOptionalChain,\n        );\n      }\n      if (helperName) {\n        resultCode += \" \";\n        resultCode += helperCode.replace(baseName, helperName).replace(/\\s+/g, \" \").trim();\n      }\n    }\n    return resultCode;\n  }\n} exports.HelperManager = HelperManager;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _tokenizer = require('./parser/tokenizer');\n\nvar _types = require('./parser/tokenizer/types');\n\n\n/**\n * Traverse the given tokens and modify them if necessary to indicate that some names shadow global\n * variables.\n */\n function identifyShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  if (!hasShadowedGlobals(tokens, globalNames)) {\n    return;\n  }\n  markShadowedGlobals(tokens, scopes, globalNames);\n} exports.default = identifyShadowedGlobals;\n\n/**\n * We can do a fast up-front check to see if there are any declarations to global names. If not,\n * then there's no point in computing scope assignments.\n */\n// Exported for testing.\n function hasShadowedGlobals(tokens, globalNames) {\n  for (const token of tokens.tokens) {\n    if (\n      token.type === _types.TokenType.name &&\n      _tokenizer.isNonTopLevelDeclaration.call(void 0, token) &&\n      globalNames.has(tokens.identifierNameForToken(token))\n    ) {\n      return true;\n    }\n  }\n  return false;\n} exports.hasShadowedGlobals = hasShadowedGlobals;\n\nfunction markShadowedGlobals(\n  tokens,\n  scopes,\n  globalNames,\n) {\n  const scopeStack = [];\n  let scopeIndex = scopes.length - 1;\n  // Scopes were generated at completion time, so they're sorted by end index, so we can maintain a\n  // good stack by going backwards through them.\n  for (let i = tokens.tokens.length - 1; ; i--) {\n    while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {\n      scopeStack.pop();\n    }\n    while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {\n      scopeStack.push(scopes[scopeIndex]);\n      scopeIndex--;\n    }\n    // Process scopes after the last iteration so we can make sure we pop all of them.\n    if (i < 0) {\n      break;\n    }\n\n    const token = tokens.tokens[i];\n    const name = tokens.identifierNameForToken(token);\n    if (scopeStack.length > 1 && token.type === _types.TokenType.name && globalNames.has(name)) {\n      if (_tokenizer.isBlockScopedDeclaration.call(void 0, token)) {\n        markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);\n      } else if (_tokenizer.isFunctionScopedDeclaration.call(void 0, token)) {\n        let stackIndex = scopeStack.length - 1;\n        while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {\n          stackIndex--;\n        }\n        if (stackIndex < 0) {\n          throw new Error(\"Did not find parent function scope.\");\n        }\n        markShadowedForScope(scopeStack[stackIndex], tokens, name);\n      }\n    }\n  }\n  if (scopeStack.length > 0) {\n    throw new Error(\"Expected empty scope stack after processing file.\");\n  }\n}\n\nfunction markShadowedForScope(scope, tokens, name) {\n  for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {\n    const token = tokens.tokens[i];\n    if (\n      (token.type === _types.TokenType.name || token.type === _types.TokenType.jsxName) &&\n      tokens.identifierNameForToken(token) === name\n    ) {\n      token.shadowsGlobal = true;\n    }\n  }\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _types = require('../parser/tokenizer/types');\n\n/**\n * Get all identifier names in the code, in order, including duplicates.\n */\n function getIdentifierNames(code, tokens) {\n  const names = [];\n  for (const token of tokens) {\n    if (token.type === _types.TokenType.name) {\n      names.push(code.slice(token.start, token.end));\n    }\n  }\n  return names;\n} exports.default = getIdentifierNames;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _getIdentifierNames = require('./util/getIdentifierNames'); var _getIdentifierNames2 = _interopRequireDefault(_getIdentifierNames);\n\n class NameManager {\n    __init() {this.usedNames = new Set()}\n\n  constructor(code, tokens) {;NameManager.prototype.__init.call(this);\n    this.usedNames = new Set(_getIdentifierNames2.default.call(void 0, code, tokens));\n  }\n\n  claimFreeName(name) {\n    const newName = this.findFreeName(name);\n    this.usedNames.add(newName);\n    return newName;\n  }\n\n  findFreeName(name) {\n    if (!this.usedNames.has(name)) {\n      return name;\n    }\n    let suffixNum = 2;\n    while (this.usedNames.has(name + String(suffixNum))) {\n      suffixNum++;\n    }\n    return name + String(suffixNum);\n  }\n} exports.default = NameManager;\n", "\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DetailContext = exports.NoopContext = exports.VError = void 0;\n/**\n * Error thrown by validation. Besides an informative message, it includes the path to the\n * property which triggered the failure.\n */\nvar VError = /** @class */ (function (_super) {\n    __extends(VError, _super);\n    function VError(path, message) {\n        var _this = _super.call(this, message) || this;\n        _this.path = path;\n        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work for info about this workaround.\n        Object.setPrototypeOf(_this, VError.prototype);\n        return _this;\n    }\n    return VError;\n}(Error));\nexports.VError = VError;\n/**\n * Fast implementation of IContext used for first-pass validation. If that fails, we can validate\n * using DetailContext to collect error messages. That's faster for the common case when messages\n * normally pass validation.\n */\nvar NoopContext = /** @class */ (function () {\n    function NoopContext() {\n    }\n    NoopContext.prototype.fail = function (relPath, message, score) {\n        return false;\n    };\n    NoopContext.prototype.unionResolver = function () { return this; };\n    NoopContext.prototype.createContext = function () { return this; };\n    NoopContext.prototype.resolveUnion = function (ur) { };\n    return NoopContext;\n}());\nexports.NoopContext = NoopContext;\n/**\n * Complete implementation of IContext that collects meaningfull errors.\n */\nvar DetailContext = /** @class */ (function () {\n    function DetailContext() {\n        // Stack of property names and associated messages for reporting helpful error messages.\n        this._propNames = [\"\"];\n        this._messages = [null];\n        // Score is used to choose the best union member whose DetailContext to use for reporting.\n        // Higher score means better match (or rather less severe mismatch).\n        this._score = 0;\n    }\n    DetailContext.prototype.fail = function (relPath, message, score) {\n        this._propNames.push(relPath);\n        this._messages.push(message);\n        this._score += score;\n        return false;\n    };\n    DetailContext.prototype.unionResolver = function () {\n        return new DetailUnionResolver();\n    };\n    DetailContext.prototype.resolveUnion = function (unionResolver) {\n        var _a, _b;\n        var u = unionResolver;\n        var best = null;\n        for (var _i = 0, _c = u.contexts; _i < _c.length; _i++) {\n            var ctx = _c[_i];\n            if (!best || ctx._score >= best._score) {\n                best = ctx;\n            }\n        }\n        if (best && best._score > 0) {\n            (_a = this._propNames).push.apply(_a, best._propNames);\n            (_b = this._messages).push.apply(_b, best._messages);\n        }\n    };\n    DetailContext.prototype.getError = function (path) {\n        var msgParts = [];\n        for (var i = this._propNames.length - 1; i >= 0; i--) {\n            var p = this._propNames[i];\n            path += (typeof p === \"number\") ? \"[\" + p + \"]\" : (p ? \".\" + p : \"\");\n            var m = this._messages[i];\n            if (m) {\n                msgParts.push(path + \" \" + m);\n            }\n        }\n        return new VError(path, msgParts.join(\"; \"));\n    };\n    DetailContext.prototype.getErrorDetail = function (path) {\n        var details = [];\n        for (var i = this._propNames.length - 1; i >= 0; i--) {\n            var p = this._propNames[i];\n            path += (typeof p === \"number\") ? \"[\" + p + \"]\" : (p ? \".\" + p : \"\");\n            var message = this._messages[i];\n            if (message) {\n                details.push({ path: path, message: message });\n            }\n        }\n        var detail = null;\n        for (var i = details.length - 1; i >= 0; i--) {\n            if (detail) {\n                details[i].nested = [detail];\n            }\n            detail = details[i];\n        }\n        return detail;\n    };\n    return DetailContext;\n}());\nexports.DetailContext = DetailContext;\nvar DetailUnionResolver = /** @class */ (function () {\n    function DetailUnionResolver() {\n        this.contexts = [];\n    }\n    DetailUnionResolver.prototype.createContext = function () {\n        var ctx = new DetailContext();\n        this.contexts.push(ctx);\n        return ctx;\n    };\n    return DetailUnionResolver;\n}());\n", "\"use strict\";\n/**\n * This module defines nodes used to define types and validations for objects and interfaces.\n */\n// tslint:disable:no-shadowed-variable prefer-for-of\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.basicTypes = exports.BasicType = exports.TParamList = exports.TParam = exports.param = exports.TFunc = exports.func = exports.TProp = exports.TOptional = exports.opt = exports.TIface = exports.iface = exports.TEnumLiteral = exports.enumlit = exports.TEnumType = exports.enumtype = exports.TIntersection = exports.intersection = exports.TUnion = exports.union = exports.TTuple = exports.tuple = exports.TArray = exports.array = exports.TLiteral = exports.lit = exports.TName = exports.name = exports.TType = void 0;\nvar util_1 = require(\"./util\");\n/** Node that represents a type. */\nvar TType = /** @class */ (function () {\n    function TType() {\n    }\n    return TType;\n}());\nexports.TType = TType;\n/** Parses a type spec into a TType node. */\nfunction parseSpec(typeSpec) {\n    return typeof typeSpec === \"string\" ? name(typeSpec) : typeSpec;\n}\nfunction getNamedType(suite, name) {\n    var ttype = suite[name];\n    if (!ttype) {\n        throw new Error(\"Unknown type \" + name);\n    }\n    return ttype;\n}\n/**\n * Defines a type name, either built-in, or defined in this suite. It can typically be included in\n * the specs as just a plain string.\n */\nfunction name(value) { return new TName(value); }\nexports.name = name;\nvar TName = /** @class */ (function (_super) {\n    __extends(TName, _super);\n    function TName(name) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this._failMsg = \"is not a \" + name;\n        return _this;\n    }\n    TName.prototype.getChecker = function (suite, strict, allowedProps) {\n        var _this = this;\n        var ttype = getNamedType(suite, this.name);\n        var checker = ttype.getChecker(suite, strict, allowedProps);\n        if (ttype instanceof BasicType || ttype instanceof TName) {\n            return checker;\n        }\n        // For complex types, add an additional \"is not a <Type>\" message on failure.\n        return function (value, ctx) { return checker(value, ctx) ? true : ctx.fail(null, _this._failMsg, 0); };\n    };\n    return TName;\n}(TType));\nexports.TName = TName;\n/**\n * Defines a literal value, e.g. lit('hello') or lit(123).\n */\nfunction lit(value) { return new TLiteral(value); }\nexports.lit = lit;\nvar TLiteral = /** @class */ (function (_super) {\n    __extends(TLiteral, _super);\n    function TLiteral(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        _this.name = JSON.stringify(value);\n        _this._failMsg = \"is not \" + _this.name;\n        return _this;\n    }\n    TLiteral.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        return function (value, ctx) { return (value === _this.value) ? true : ctx.fail(null, _this._failMsg, -1); };\n    };\n    return TLiteral;\n}(TType));\nexports.TLiteral = TLiteral;\n/**\n * Defines an array type, e.g. array('number').\n */\nfunction array(typeSpec) { return new TArray(parseSpec(typeSpec)); }\nexports.array = array;\nvar TArray = /** @class */ (function (_super) {\n    __extends(TArray, _super);\n    function TArray(ttype) {\n        var _this = _super.call(this) || this;\n        _this.ttype = ttype;\n        return _this;\n    }\n    TArray.prototype.getChecker = function (suite, strict) {\n        var itemChecker = this.ttype.getChecker(suite, strict);\n        return function (value, ctx) {\n            if (!Array.isArray(value)) {\n                return ctx.fail(null, \"is not an array\", 0);\n            }\n            for (var i = 0; i < value.length; i++) {\n                var ok = itemChecker(value[i], ctx);\n                if (!ok) {\n                    return ctx.fail(i, null, 1);\n                }\n            }\n            return true;\n        };\n    };\n    return TArray;\n}(TType));\nexports.TArray = TArray;\n/**\n * Defines a tuple type, e.g. tuple('string', 'number').\n */\nfunction tuple() {\n    var typeSpec = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        typeSpec[_i] = arguments[_i];\n    }\n    return new TTuple(typeSpec.map(function (t) { return parseSpec(t); }));\n}\nexports.tuple = tuple;\nvar TTuple = /** @class */ (function (_super) {\n    __extends(TTuple, _super);\n    function TTuple(ttypes) {\n        var _this = _super.call(this) || this;\n        _this.ttypes = ttypes;\n        return _this;\n    }\n    TTuple.prototype.getChecker = function (suite, strict) {\n        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict); });\n        var checker = function (value, ctx) {\n            if (!Array.isArray(value)) {\n                return ctx.fail(null, \"is not an array\", 0);\n            }\n            for (var i = 0; i < itemCheckers.length; i++) {\n                var ok = itemCheckers[i](value[i], ctx);\n                if (!ok) {\n                    return ctx.fail(i, null, 1);\n                }\n            }\n            return true;\n        };\n        if (!strict) {\n            return checker;\n        }\n        return function (value, ctx) {\n            if (!checker(value, ctx)) {\n                return false;\n            }\n            return value.length <= itemCheckers.length ? true :\n                ctx.fail(itemCheckers.length, \"is extraneous\", 2);\n        };\n    };\n    return TTuple;\n}(TType));\nexports.TTuple = TTuple;\n/**\n * Defines a union type, e.g. union('number', 'null').\n */\nfunction union() {\n    var typeSpec = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        typeSpec[_i] = arguments[_i];\n    }\n    return new TUnion(typeSpec.map(function (t) { return parseSpec(t); }));\n}\nexports.union = union;\nvar TUnion = /** @class */ (function (_super) {\n    __extends(TUnion, _super);\n    function TUnion(ttypes) {\n        var _this = _super.call(this) || this;\n        _this.ttypes = ttypes;\n        var names = ttypes.map(function (t) { return t instanceof TName || t instanceof TLiteral ? t.name : null; })\n            .filter(function (n) { return n; });\n        var otherTypes = ttypes.length - names.length;\n        if (names.length) {\n            if (otherTypes > 0) {\n                names.push(otherTypes + \" more\");\n            }\n            _this._failMsg = \"is none of \" + names.join(\", \");\n        }\n        else {\n            _this._failMsg = \"is none of \" + otherTypes + \" types\";\n        }\n        return _this;\n    }\n    TUnion.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict); });\n        return function (value, ctx) {\n            var ur = ctx.unionResolver();\n            for (var i = 0; i < itemCheckers.length; i++) {\n                var ok = itemCheckers[i](value, ur.createContext());\n                if (ok) {\n                    return true;\n                }\n            }\n            ctx.resolveUnion(ur);\n            return ctx.fail(null, _this._failMsg, 0);\n        };\n    };\n    return TUnion;\n}(TType));\nexports.TUnion = TUnion;\n/**\n * Defines an intersection type, e.g. intersection('number', 'null').\n */\nfunction intersection() {\n    var typeSpec = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        typeSpec[_i] = arguments[_i];\n    }\n    return new TIntersection(typeSpec.map(function (t) { return parseSpec(t); }));\n}\nexports.intersection = intersection;\nvar TIntersection = /** @class */ (function (_super) {\n    __extends(TIntersection, _super);\n    function TIntersection(ttypes) {\n        var _this = _super.call(this) || this;\n        _this.ttypes = ttypes;\n        return _this;\n    }\n    TIntersection.prototype.getChecker = function (suite, strict) {\n        var allowedProps = new Set();\n        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict, allowedProps); });\n        return function (value, ctx) {\n            var ok = itemCheckers.every(function (checker) { return checker(value, ctx); });\n            if (ok) {\n                return true;\n            }\n            return ctx.fail(null, null, 0);\n        };\n    };\n    return TIntersection;\n}(TType));\nexports.TIntersection = TIntersection;\n/**\n * Defines an enum type, e.g. enum({'A': 1, 'B': 2}).\n */\nfunction enumtype(values) {\n    return new TEnumType(values);\n}\nexports.enumtype = enumtype;\nvar TEnumType = /** @class */ (function (_super) {\n    __extends(TEnumType, _super);\n    function TEnumType(members) {\n        var _this = _super.call(this) || this;\n        _this.members = members;\n        _this.validValues = new Set();\n        _this._failMsg = \"is not a valid enum value\";\n        _this.validValues = new Set(Object.keys(members).map(function (name) { return members[name]; }));\n        return _this;\n    }\n    TEnumType.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        return function (value, ctx) {\n            return (_this.validValues.has(value) ? true : ctx.fail(null, _this._failMsg, 0));\n        };\n    };\n    return TEnumType;\n}(TType));\nexports.TEnumType = TEnumType;\n/**\n * Defines a literal enum value, such as Direction.Up, specified as enumlit(\"Direction\", \"Up\").\n */\nfunction enumlit(name, prop) {\n    return new TEnumLiteral(name, prop);\n}\nexports.enumlit = enumlit;\nvar TEnumLiteral = /** @class */ (function (_super) {\n    __extends(TEnumLiteral, _super);\n    function TEnumLiteral(enumName, prop) {\n        var _this = _super.call(this) || this;\n        _this.enumName = enumName;\n        _this.prop = prop;\n        _this._failMsg = \"is not \" + enumName + \".\" + prop;\n        return _this;\n    }\n    TEnumLiteral.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        var ttype = getNamedType(suite, this.enumName);\n        if (!(ttype instanceof TEnumType)) {\n            throw new Error(\"Type \" + this.enumName + \" used in enumlit is not an enum type\");\n        }\n        var val = ttype.members[this.prop];\n        if (!ttype.members.hasOwnProperty(this.prop)) {\n            throw new Error(\"Unknown value \" + this.enumName + \".\" + this.prop + \" used in enumlit\");\n        }\n        return function (value, ctx) { return (value === val) ? true : ctx.fail(null, _this._failMsg, -1); };\n    };\n    return TEnumLiteral;\n}(TType));\nexports.TEnumLiteral = TEnumLiteral;\nfunction makeIfaceProps(props) {\n    return Object.keys(props).map(function (name) { return makeIfaceProp(name, props[name]); });\n}\nfunction makeIfaceProp(name, prop) {\n    return prop instanceof TOptional ?\n        new TProp(name, prop.ttype, true) :\n        new TProp(name, parseSpec(prop), false);\n}\n/**\n * Defines an interface. The first argument is an array of interfaces that it extends, and the\n * second is an array of properties.\n */\nfunction iface(bases, props) {\n    return new TIface(bases, makeIfaceProps(props));\n}\nexports.iface = iface;\nvar TIface = /** @class */ (function (_super) {\n    __extends(TIface, _super);\n    function TIface(bases, props) {\n        var _this = _super.call(this) || this;\n        _this.bases = bases;\n        _this.props = props;\n        _this.propSet = new Set(props.map(function (p) { return p.name; }));\n        return _this;\n    }\n    TIface.prototype.getChecker = function (suite, strict, allowedProps) {\n        var _this = this;\n        var baseCheckers = this.bases.map(function (b) { return getNamedType(suite, b).getChecker(suite, strict); });\n        var propCheckers = this.props.map(function (prop) { return prop.ttype.getChecker(suite, strict); });\n        var testCtx = new util_1.NoopContext();\n        // Consider a prop required if it's not optional AND does not allow for undefined as a value.\n        var isPropRequired = this.props.map(function (prop, i) {\n            return !prop.isOpt && !propCheckers[i](undefined, testCtx);\n        });\n        var checker = function (value, ctx) {\n            if (typeof value !== \"object\" || value === null) {\n                return ctx.fail(null, \"is not an object\", 0);\n            }\n            for (var i = 0; i < baseCheckers.length; i++) {\n                if (!baseCheckers[i](value, ctx)) {\n                    return false;\n                }\n            }\n            for (var i = 0; i < propCheckers.length; i++) {\n                var name_1 = _this.props[i].name;\n                var v = value[name_1];\n                if (v === undefined) {\n                    if (isPropRequired[i]) {\n                        return ctx.fail(name_1, \"is missing\", 1);\n                    }\n                }\n                else {\n                    var ok = propCheckers[i](v, ctx);\n                    if (!ok) {\n                        return ctx.fail(name_1, null, 1);\n                    }\n                }\n            }\n            return true;\n        };\n        if (!strict) {\n            return checker;\n        }\n        var propSet = this.propSet;\n        if (allowedProps) {\n            this.propSet.forEach(function (prop) { return allowedProps.add(prop); });\n            propSet = allowedProps;\n        }\n        // In strict mode, check also for unknown enumerable properties.\n        return function (value, ctx) {\n            if (!checker(value, ctx)) {\n                return false;\n            }\n            for (var prop in value) {\n                if (!propSet.has(prop)) {\n                    return ctx.fail(prop, \"is extraneous\", 2);\n                }\n            }\n            return true;\n        };\n    };\n    return TIface;\n}(TType));\nexports.TIface = TIface;\n/**\n * Defines an optional property on an interface.\n */\nfunction opt(typeSpec) { return new TOptional(parseSpec(typeSpec)); }\nexports.opt = opt;\nvar TOptional = /** @class */ (function (_super) {\n    __extends(TOptional, _super);\n    function TOptional(ttype) {\n        var _this = _super.call(this) || this;\n        _this.ttype = ttype;\n        return _this;\n    }\n    TOptional.prototype.getChecker = function (suite, strict) {\n        var itemChecker = this.ttype.getChecker(suite, strict);\n        return function (value, ctx) {\n            return value === undefined || itemChecker(value, ctx);\n        };\n    };\n    return TOptional;\n}(TType));\nexports.TOptional = TOptional;\n/**\n * Defines a property in an interface.\n */\nvar TProp = /** @class */ (function () {\n    function TProp(name, ttype, isOpt) {\n        this.name = name;\n        this.ttype = ttype;\n        this.isOpt = isOpt;\n    }\n    return TProp;\n}());\nexports.TProp = TProp;\n/**\n * Defines a function. The first argument declares the function's return type, the rest declare\n * its parameters.\n */\nfunction func(resultSpec) {\n    var params = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        params[_i - 1] = arguments[_i];\n    }\n    return new TFunc(new TParamList(params), parseSpec(resultSpec));\n}\nexports.func = func;\nvar TFunc = /** @class */ (function (_super) {\n    __extends(TFunc, _super);\n    function TFunc(paramList, result) {\n        var _this = _super.call(this) || this;\n        _this.paramList = paramList;\n        _this.result = result;\n        return _this;\n    }\n    TFunc.prototype.getChecker = function (suite, strict) {\n        return function (value, ctx) {\n            return typeof value === \"function\" ? true : ctx.fail(null, \"is not a function\", 0);\n        };\n    };\n    return TFunc;\n}(TType));\nexports.TFunc = TFunc;\n/**\n * Defines a function parameter.\n */\nfunction param(name, typeSpec, isOpt) {\n    return new TParam(name, parseSpec(typeSpec), Boolean(isOpt));\n}\nexports.param = param;\nvar TParam = /** @class */ (function () {\n    function TParam(name, ttype, isOpt) {\n        this.name = name;\n        this.ttype = ttype;\n        this.isOpt = isOpt;\n    }\n    return TParam;\n}());\nexports.TParam = TParam;\n/**\n * Defines a function parameter list.\n */\nvar TParamList = /** @class */ (function (_super) {\n    __extends(TParamList, _super);\n    function TParamList(params) {\n        var _this = _super.call(this) || this;\n        _this.params = params;\n        return _this;\n    }\n    TParamList.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        var itemCheckers = this.params.map(function (t) { return t.ttype.getChecker(suite, strict); });\n        var testCtx = new util_1.NoopContext();\n        var isParamRequired = this.params.map(function (param, i) {\n            return !param.isOpt && !itemCheckers[i](undefined, testCtx);\n        });\n        var checker = function (value, ctx) {\n            if (!Array.isArray(value)) {\n                return ctx.fail(null, \"is not an array\", 0);\n            }\n            for (var i = 0; i < itemCheckers.length; i++) {\n                var p = _this.params[i];\n                if (value[i] === undefined) {\n                    if (isParamRequired[i]) {\n                        return ctx.fail(p.name, \"is missing\", 1);\n                    }\n                }\n                else {\n                    var ok = itemCheckers[i](value[i], ctx);\n                    if (!ok) {\n                        return ctx.fail(p.name, null, 1);\n                    }\n                }\n            }\n            return true;\n        };\n        if (!strict) {\n            return checker;\n        }\n        return function (value, ctx) {\n            if (!checker(value, ctx)) {\n                return false;\n            }\n            return value.length <= itemCheckers.length ? true :\n                ctx.fail(itemCheckers.length, \"is extraneous\", 2);\n        };\n    };\n    return TParamList;\n}(TType));\nexports.TParamList = TParamList;\n/**\n * Single TType implementation for all basic built-in types.\n */\nvar BasicType = /** @class */ (function (_super) {\n    __extends(BasicType, _super);\n    function BasicType(validator, message) {\n        var _this = _super.call(this) || this;\n        _this.validator = validator;\n        _this.message = message;\n        return _this;\n    }\n    BasicType.prototype.getChecker = function (suite, strict) {\n        var _this = this;\n        return function (value, ctx) { return _this.validator(value) ? true : ctx.fail(null, _this.message, 0); };\n    };\n    return BasicType;\n}(TType));\nexports.BasicType = BasicType;\n/**\n * Defines the suite of basic types.\n */\nexports.basicTypes = {\n    any: new BasicType(function (v) { return true; }, \"is invalid\"),\n    number: new BasicType(function (v) { return (typeof v === \"number\"); }, \"is not a number\"),\n    object: new BasicType(function (v) { return (typeof v === \"object\" && v); }, \"is not an object\"),\n    boolean: new BasicType(function (v) { return (typeof v === \"boolean\"); }, \"is not a boolean\"),\n    string: new BasicType(function (v) { return (typeof v === \"string\"); }, \"is not a string\"),\n    symbol: new BasicType(function (v) { return (typeof v === \"symbol\"); }, \"is not a symbol\"),\n    void: new BasicType(function (v) { return (v == null); }, \"is not void\"),\n    undefined: new BasicType(function (v) { return (v === undefined); }, \"is not undefined\"),\n    null: new BasicType(function (v) { return (v === null); }, \"is not null\"),\n    never: new BasicType(function (v) { return false; }, \"is unexpected\"),\n    Date: new BasicType(getIsNativeChecker(\"[object Date]\"), \"is not a Date\"),\n    RegExp: new BasicType(getIsNativeChecker(\"[object RegExp]\"), \"is not a RegExp\"),\n};\n// This approach for checking native object types mirrors that of lodash. Its advantage over\n// `isinstance` is that it can still return true for native objects created in different JS\n// execution environments.\nvar nativeToString = Object.prototype.toString;\nfunction getIsNativeChecker(tag) {\n    return function (v) { return typeof v === \"object\" && v && nativeToString.call(v) === tag; };\n}\nif (typeof Buffer !== \"undefined\") {\n    exports.basicTypes.Buffer = new BasicType(function (v) { return Buffer.isBuffer(v); }, \"is not a Buffer\");\n}\nvar _loop_1 = function (array_1) {\n    exports.basicTypes[array_1.name] = new BasicType(function (v) { return (v instanceof array_1); }, \"is not a \" + array_1.name);\n};\n// Support typed arrays of various flavors\nfor (var _i = 0, _a = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,\n    Int32Array, Uint32Array, Float32Array, Float64Array, ArrayBuffer]; _i < _a.length; _i++) {\n    var array_1 = _a[_i];\n    _loop_1(array_1);\n}\n", "\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Checker = exports.createCheckers = void 0;\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\n/**\n * Export functions used to define interfaces.\n */\nvar types_2 = require(\"./types\");\nObject.defineProperty(exports, \"TArray\", { enumerable: true, get: function () { return types_2.TArray; } });\nObject.defineProperty(exports, \"TEnumType\", { enumerable: true, get: function () { return types_2.TEnumType; } });\nObject.defineProperty(exports, \"TEnumLiteral\", { enumerable: true, get: function () { return types_2.TEnumLiteral; } });\nObject.defineProperty(exports, \"TFunc\", { enumerable: true, get: function () { return types_2.TFunc; } });\nObject.defineProperty(exports, \"TIface\", { enumerable: true, get: function () { return types_2.TIface; } });\nObject.defineProperty(exports, \"TLiteral\", { enumerable: true, get: function () { return types_2.TLiteral; } });\nObject.defineProperty(exports, \"TName\", { enumerable: true, get: function () { return types_2.TName; } });\nObject.defineProperty(exports, \"TOptional\", { enumerable: true, get: function () { return types_2.TOptional; } });\nObject.defineProperty(exports, \"TParam\", { enumerable: true, get: function () { return types_2.TParam; } });\nObject.defineProperty(exports, \"TParamList\", { enumerable: true, get: function () { return types_2.TParamList; } });\nObject.defineProperty(exports, \"TProp\", { enumerable: true, get: function () { return types_2.TProp; } });\nObject.defineProperty(exports, \"TTuple\", { enumerable: true, get: function () { return types_2.TTuple; } });\nObject.defineProperty(exports, \"TType\", { enumerable: true, get: function () { return types_2.TType; } });\nObject.defineProperty(exports, \"TUnion\", { enumerable: true, get: function () { return types_2.TUnion; } });\nObject.defineProperty(exports, \"TIntersection\", { enumerable: true, get: function () { return types_2.TIntersection; } });\nObject.defineProperty(exports, \"array\", { enumerable: true, get: function () { return types_2.array; } });\nObject.defineProperty(exports, \"enumlit\", { enumerable: true, get: function () { return types_2.enumlit; } });\nObject.defineProperty(exports, \"enumtype\", { enumerable: true, get: function () { return types_2.enumtype; } });\nObject.defineProperty(exports, \"func\", { enumerable: true, get: function () { return types_2.func; } });\nObject.defineProperty(exports, \"iface\", { enumerable: true, get: function () { return types_2.iface; } });\nObject.defineProperty(exports, \"lit\", { enumerable: true, get: function () { return types_2.lit; } });\nObject.defineProperty(exports, \"name\", { enumerable: true, get: function () { return types_2.name; } });\nObject.defineProperty(exports, \"opt\", { enumerable: true, get: function () { return types_2.opt; } });\nObject.defineProperty(exports, \"param\", { enumerable: true, get: function () { return types_2.param; } });\nObject.defineProperty(exports, \"tuple\", { enumerable: true, get: function () { return types_2.tuple; } });\nObject.defineProperty(exports, \"union\", { enumerable: true, get: function () { return types_2.union; } });\nObject.defineProperty(exports, \"intersection\", { enumerable: true, get: function () { return types_2.intersection; } });\nObject.defineProperty(exports, \"BasicType\", { enumerable: true, get: function () { return types_2.BasicType; } });\nvar util_2 = require(\"./util\");\nObject.defineProperty(exports, \"VError\", { enumerable: true, get: function () { return util_2.VError; } });\n/**\n * Takes one of more type suites (e.g. a module generated by `ts-interface-builder`), and combines\n * them into a suite of interface checkers. If a type is used by name, that name should be present\n * among the passed-in type suites.\n *\n * The returned object maps type names to Checker objects.\n */\nfunction createCheckers() {\n    var typeSuite = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        typeSuite[_i] = arguments[_i];\n    }\n    var fullSuite = Object.assign.apply(Object, __spreadArrays([{}, types_1.basicTypes], typeSuite));\n    var checkers = {};\n    for (var _a = 0, typeSuite_1 = typeSuite; _a < typeSuite_1.length; _a++) {\n        var suite_1 = typeSuite_1[_a];\n        for (var _b = 0, _c = Object.keys(suite_1); _b < _c.length; _b++) {\n            var name = _c[_b];\n            checkers[name] = new Checker(fullSuite, suite_1[name]);\n        }\n    }\n    return checkers;\n}\nexports.createCheckers = createCheckers;\n/**\n * Checker implements validation of objects, and also includes accessors to validate method calls.\n * Checkers should be created using `createCheckers()`.\n */\nvar Checker = /** @class */ (function () {\n    // Create checkers by using `createCheckers()` function.\n    function Checker(suite, ttype, _path) {\n        if (_path === void 0) { _path = 'value'; }\n        this.suite = suite;\n        this.ttype = ttype;\n        this._path = _path;\n        this.props = new Map();\n        if (ttype instanceof types_1.TIface) {\n            for (var _i = 0, _a = ttype.props; _i < _a.length; _i++) {\n                var p = _a[_i];\n                this.props.set(p.name, p.ttype);\n            }\n        }\n        this.checkerPlain = this.ttype.getChecker(suite, false);\n        this.checkerStrict = this.ttype.getChecker(suite, true);\n    }\n    /**\n     * Set the path to report in errors, instead of the default \"value\". (E.g. if the Checker is for\n     * a \"person\" interface, set path to \"person\" to report e.g. \"person.name is not a string\".)\n     */\n    Checker.prototype.setReportedPath = function (path) {\n        this._path = path;\n    };\n    /**\n     * Check that the given value satisfies this checker's type, or throw Error.\n     */\n    Checker.prototype.check = function (value) { return this._doCheck(this.checkerPlain, value); };\n    /**\n     * A fast check for whether or not the given value satisfies this Checker's type. This returns\n     * true or false, does not produce an error message, and is fast both on success and on failure.\n     */\n    Checker.prototype.test = function (value) {\n        return this.checkerPlain(value, new util_1.NoopContext());\n    };\n    /**\n     * Returns an error object describing the errors if the given value does not satisfy this\n     * Checker's type, or null if it does.\n     */\n    Checker.prototype.validate = function (value) {\n        return this._doValidate(this.checkerPlain, value);\n    };\n    /**\n     * Check that the given value satisfies this checker's type strictly. This checks that objects\n     * and tuples have no extra members. Note that this prevents backward compatibility, so usually\n     * a plain check() is more appropriate.\n     */\n    Checker.prototype.strictCheck = function (value) { return this._doCheck(this.checkerStrict, value); };\n    /**\n     * A fast strict check for whether or not the given value satisfies this Checker's type. Returns\n     * true or false, does not produce an error message, and is fast both on success and on failure.\n     */\n    Checker.prototype.strictTest = function (value) {\n        return this.checkerStrict(value, new util_1.NoopContext());\n    };\n    /**\n     * Returns an error object describing the errors if the given value does not satisfy this\n     * Checker's type strictly, or null if it does.\n     */\n    Checker.prototype.strictValidate = function (value) {\n        return this._doValidate(this.checkerStrict, value);\n    };\n    /**\n     * If this checker is for an interface, returns a Checker for the type required for the given\n     * property of this interface.\n     */\n    Checker.prototype.getProp = function (prop) {\n        var ttype = this.props.get(prop);\n        if (!ttype) {\n            throw new Error(\"Type has no property \" + prop);\n        }\n        return new Checker(this.suite, ttype, this._path + \".\" + prop);\n    };\n    /**\n     * If this checker is for an interface, returns a Checker for the argument-list required to call\n     * the given method of this interface. E.g. if this Checker is for the interface:\n     *    interface Foo {\n     *      find(s: string, pos?: number): number;\n     *    }\n     * Then methodArgs(\"find\").check(...) will succeed for [\"foo\"] and [\"foo\", 3], but not for [17].\n     */\n    Checker.prototype.methodArgs = function (methodName) {\n        var tfunc = this._getMethod(methodName);\n        return new Checker(this.suite, tfunc.paramList);\n    };\n    /**\n     * If this checker is for an interface, returns a Checker for the return value of the given\n     * method of this interface.\n     */\n    Checker.prototype.methodResult = function (methodName) {\n        var tfunc = this._getMethod(methodName);\n        return new Checker(this.suite, tfunc.result);\n    };\n    /**\n     * If this checker is for a function, returns a Checker for its argument-list.\n     */\n    Checker.prototype.getArgs = function () {\n        if (!(this.ttype instanceof types_1.TFunc)) {\n            throw new Error(\"getArgs() applied to non-function\");\n        }\n        return new Checker(this.suite, this.ttype.paramList);\n    };\n    /**\n     * If this checker is for a function, returns a Checker for its result.\n     */\n    Checker.prototype.getResult = function () {\n        if (!(this.ttype instanceof types_1.TFunc)) {\n            throw new Error(\"getResult() applied to non-function\");\n        }\n        return new Checker(this.suite, this.ttype.result);\n    };\n    /**\n     * Return the type for which this is a checker.\n     */\n    Checker.prototype.getType = function () {\n        return this.ttype;\n    };\n    /**\n     * Actual implementation of check() and strictCheck().\n     */\n    Checker.prototype._doCheck = function (checkerFunc, value) {\n        var noopCtx = new util_1.NoopContext();\n        if (!checkerFunc(value, noopCtx)) {\n            var detailCtx = new util_1.DetailContext();\n            checkerFunc(value, detailCtx);\n            throw detailCtx.getError(this._path);\n        }\n    };\n    Checker.prototype._doValidate = function (checkerFunc, value) {\n        var noopCtx = new util_1.NoopContext();\n        if (checkerFunc(value, noopCtx)) {\n            return null;\n        }\n        var detailCtx = new util_1.DetailContext();\n        checkerFunc(value, detailCtx);\n        return detailCtx.getErrorDetail(this._path);\n    };\n    Checker.prototype._getMethod = function (methodName) {\n        var ttype = this.props.get(methodName);\n        if (!ttype) {\n            throw new Error(\"Type has no property \" + methodName);\n        }\n        if (!(ttype instanceof types_1.TFunc)) {\n            throw new Error(\"Property \" + methodName + \" is not a method\");\n        }\n        return ttype;\n    };\n    return Checker;\n}());\nexports.Checker = Checker;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }/**\n * This module was automatically generated by `ts-interface-builder`\n */\nvar _tsinterfacechecker = require('ts-interface-checker'); var t = _interopRequireWildcard(_tsinterfacechecker);\n// tslint:disable:object-literal-key-quotes\n\n const Transform = t.union(\n  t.lit(\"jsx\"),\n  t.lit(\"typescript\"),\n  t.lit(\"flow\"),\n  t.lit(\"imports\"),\n  t.lit(\"react-hot-loader\"),\n  t.lit(\"jest\"),\n); exports.Transform = Transform;\n\n const SourceMapOptions = t.iface([], {\n  compiledFilename: \"string\",\n}); exports.SourceMapOptions = SourceMapOptions;\n\n const Options = t.iface([], {\n  transforms: t.array(\"Transform\"),\n  jsxPragma: t.opt(\"string\"),\n  jsxFragmentPragma: t.opt(\"string\"),\n  enableLegacyTypeScriptModuleInterop: t.opt(\"boolean\"),\n  enableLegacyBabel5ModuleInterop: t.opt(\"boolean\"),\n  sourceMapOptions: t.opt(\"SourceMapOptions\"),\n  filePath: t.opt(\"string\"),\n  production: t.opt(\"boolean\"),\n  disableESTransforms: t.opt(\"boolean\"),\n}); exports.Options = Options;\n\nconst exportedTypeSuite = {\n  Transform: exports.Transform,\n  SourceMapOptions: exports.SourceMapOptions,\n  Options: exports.Options,\n};\nexports. default = exportedTypeSuite;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _tsinterfacechecker = require('ts-interface-checker');\n\nvar _Optionsgentypes = require('./Options-gen-types'); var _Optionsgentypes2 = _interopRequireDefault(_Optionsgentypes);\n\nconst {Options: OptionsChecker} = _tsinterfacechecker.createCheckers.call(void 0, _Optionsgentypes2.default);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n function validateOptions(options) {\n  OptionsChecker.strictCheck(options);\n} exports.validateOptions = validateOptions;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _flow = require('../plugins/flow');\nvar _typescript = require('../plugins/typescript');\n\n\n\n\n\n\n\nvar _index = require('../tokenizer/index');\nvar _keywords = require('../tokenizer/keywords');\nvar _types = require('../tokenizer/types');\nvar _base = require('./base');\nvar _expression = require('./expression');\nvar _util = require('./util');\n\n function parseSpread() {\n  _index.next.call(void 0, );\n  _expression.parseMaybeAssign.call(void 0, false);\n} exports.parseSpread = parseSpread;\n\n function parseRest(isBlockScope) {\n  _index.next.call(void 0, );\n  parseBindingAtom(isBlockScope);\n} exports.parseRest = parseRest;\n\n function parseBindingIdentifier(isBlockScope) {\n  _expression.parseIdentifier.call(void 0, );\n  markPriorBindingIdentifier(isBlockScope);\n} exports.parseBindingIdentifier = parseBindingIdentifier;\n\n function parseImportedIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;\n} exports.parseImportedIdentifier = parseImportedIdentifier;\n\n function markPriorBindingIdentifier(isBlockScope) {\n  let identifierRole;\n  if (_base.state.scopeDepth === 0) {\n    identifierRole = _index.IdentifierRole.TopLevelDeclaration;\n  } else if (isBlockScope) {\n    identifierRole = _index.IdentifierRole.BlockScopedDeclaration;\n  } else {\n    identifierRole = _index.IdentifierRole.FunctionScopedDeclaration;\n  }\n  _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;\n} exports.markPriorBindingIdentifier = markPriorBindingIdentifier;\n\n// Parses lvalue (assignable) atom.\n function parseBindingAtom(isBlockScope) {\n  switch (_base.state.type) {\n    case _types.TokenType._this: {\n      // In TypeScript, \"this\" may be the name of a parameter, so allow it.\n      const oldIsType = _index.pushTypeContext.call(void 0, 0);\n      _index.next.call(void 0, );\n      _index.popTypeContext.call(void 0, oldIsType);\n      return;\n    }\n\n    case _types.TokenType._yield:\n    case _types.TokenType.name: {\n      _base.state.type = _types.TokenType.name;\n      parseBindingIdentifier(isBlockScope);\n      return;\n    }\n\n    case _types.TokenType.bracketL: {\n      _index.next.call(void 0, );\n      parseBindingList(_types.TokenType.bracketR, isBlockScope, true /* allowEmpty */);\n      return;\n    }\n\n    case _types.TokenType.braceL:\n      _expression.parseObj.call(void 0, true, isBlockScope);\n      return;\n\n    default:\n      _util.unexpected.call(void 0, );\n  }\n} exports.parseBindingAtom = parseBindingAtom;\n\n function parseBindingList(\n  close,\n  isBlockScope,\n  allowEmpty = false,\n  allowModifiers = false,\n  contextId = 0,\n) {\n  let first = true;\n\n  let hasRemovedComma = false;\n  const firstItemTokenIndex = _base.state.tokens.length;\n\n  while (!_index.eat.call(void 0, close) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n      // After a \"this\" type in TypeScript, we need to set the following comma (if any) to also be\n      // a type token so that it will be removed.\n      if (!hasRemovedComma && _base.state.tokens[firstItemTokenIndex].isType) {\n        _base.state.tokens[_base.state.tokens.length - 1].isType = true;\n        hasRemovedComma = true;\n      }\n    }\n    if (allowEmpty && _index.match.call(void 0, _types.TokenType.comma)) {\n      // Empty item; nothing further to parse for this item.\n    } else if (_index.eat.call(void 0, close)) {\n      break;\n    } else if (_index.match.call(void 0, _types.TokenType.ellipsis)) {\n      parseRest(isBlockScope);\n      parseAssignableListItemTypes();\n      // Support rest element trailing commas allowed by TypeScript <2.9.\n      _index.eat.call(void 0, _types.TokenType.comma);\n      _util.expect.call(void 0, close);\n      break;\n    } else {\n      parseAssignableListItem(allowModifiers, isBlockScope);\n    }\n  }\n} exports.parseBindingList = parseBindingList;\n\nfunction parseAssignableListItem(allowModifiers, isBlockScope) {\n  if (allowModifiers) {\n    _typescript.tsParseModifiers.call(void 0, [\n      _keywords.ContextualKeyword._public,\n      _keywords.ContextualKeyword._protected,\n      _keywords.ContextualKeyword._private,\n      _keywords.ContextualKeyword._readonly,\n      _keywords.ContextualKeyword._override,\n    ]);\n  }\n\n  parseMaybeDefault(isBlockScope);\n  parseAssignableListItemTypes();\n  parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);\n}\n\nfunction parseAssignableListItemTypes() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseAssignableListItemTypes.call(void 0, );\n  } else if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseAssignableListItemTypes.call(void 0, );\n  }\n}\n\n// Parses assignment pattern around given atom if possible.\n function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {\n  if (!leftAlreadyParsed) {\n    parseBindingAtom(isBlockScope);\n  }\n  if (!_index.eat.call(void 0, _types.TokenType.eq)) {\n    return;\n  }\n  const eqIndex = _base.state.tokens.length - 1;\n  _expression.parseMaybeAssign.call(void 0, );\n  _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n} exports.parseMaybeDefault = parseMaybeDefault;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\nvar _index = require('../tokenizer/index');\nvar _keywords = require('../tokenizer/keywords');\nvar _types = require('../tokenizer/types');\nvar _base = require('../traverser/base');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = require('../traverser/expression');\nvar _lval = require('../traverser/lval');\n\n\n\n\n\n\n\n\nvar _statement = require('../traverser/statement');\n\n\n\n\n\n\n\n\n\n\n\nvar _util = require('../traverser/util');\nvar _jsx = require('./jsx');\n\nfunction tsIsIdentifier() {\n  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n  // See https://github.com/Microsoft/TypeScript/issues/15008\n  return _index.match.call(void 0, _types.TokenType.name);\n}\n\nfunction isLiteralPropertyName() {\n  return (\n    _index.match.call(void 0, _types.TokenType.name) ||\n    Boolean(_base.state.type & _types.TokenType.IS_KEYWORD) ||\n    _index.match.call(void 0, _types.TokenType.string) ||\n    _index.match.call(void 0, _types.TokenType.num) ||\n    _index.match.call(void 0, _types.TokenType.bigint) ||\n    _index.match.call(void 0, _types.TokenType.decimal)\n  );\n}\n\nfunction tsNextTokenCanFollowModifier() {\n  // Note: TypeScript's implementation is much more complicated because\n  // more things are considered modifiers there.\n  // This implementation only handles modifiers not handled by babylon itself. And \"static\".\n  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n  const snapshot = _base.state.snapshot();\n\n  _index.next.call(void 0, );\n  const canFollowModifier =\n    (_index.match.call(void 0, _types.TokenType.bracketL) ||\n      _index.match.call(void 0, _types.TokenType.braceL) ||\n      _index.match.call(void 0, _types.TokenType.star) ||\n      _index.match.call(void 0, _types.TokenType.ellipsis) ||\n      _index.match.call(void 0, _types.TokenType.hash) ||\n      isLiteralPropertyName()) &&\n    !_util.hasPrecedingLineBreak.call(void 0, );\n\n  if (canFollowModifier) {\n    return true;\n  } else {\n    _base.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n}\n\n function tsParseModifiers(allowedModifiers) {\n  while (true) {\n    const modifier = tsParseModifier(allowedModifiers);\n    if (modifier === null) {\n      break;\n    }\n  }\n} exports.tsParseModifiers = tsParseModifiers;\n\n/** Parses a modifier matching one the given modifier names. */\n function tsParseModifier(\n  allowedModifiers,\n) {\n  if (!_index.match.call(void 0, _types.TokenType.name)) {\n    return null;\n  }\n\n  const modifier = _base.state.contextualKeyword;\n  if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {\n    switch (modifier) {\n      case _keywords.ContextualKeyword._readonly:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._readonly;\n        break;\n      case _keywords.ContextualKeyword._abstract:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;\n        break;\n      case _keywords.ContextualKeyword._static:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;\n        break;\n      case _keywords.ContextualKeyword._public:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._public;\n        break;\n      case _keywords.ContextualKeyword._private:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._private;\n        break;\n      case _keywords.ContextualKeyword._protected:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._protected;\n        break;\n      case _keywords.ContextualKeyword._override:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._override;\n        break;\n      case _keywords.ContextualKeyword._declare:\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;\n        break;\n      default:\n        break;\n    }\n    return modifier;\n  }\n  return null;\n} exports.tsParseModifier = tsParseModifier;\n\nfunction tsParseEntityName() {\n  _expression.parseIdentifier.call(void 0, );\n  while (_index.eat.call(void 0, _types.TokenType.dot)) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction tsParseTypeReference() {\n  tsParseEntityName();\n  if (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseThisTypePredicate() {\n  _index.next.call(void 0, );\n  tsParseTypeAnnotation();\n}\n\nfunction tsParseThisTypeNode() {\n  _index.next.call(void 0, );\n}\n\nfunction tsParseTypeQuery() {\n  _util.expect.call(void 0, _types.TokenType._typeof);\n  if (_index.match.call(void 0, _types.TokenType._import)) {\n    tsParseImportType();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseImportType() {\n  _util.expect.call(void 0, _types.TokenType._import);\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  _util.expect.call(void 0, _types.TokenType.string);\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  if (_index.eat.call(void 0, _types.TokenType.dot)) {\n    tsParseEntityName();\n  }\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseTypeParameter() {\n  _expression.parseIdentifier.call(void 0, );\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    tsParseType();\n  }\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    tsParseType();\n  }\n}\n\n function tsTryParseTypeParameters() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeParameters();\n  }\n} exports.tsTryParseTypeParameters = tsTryParseTypeParameters;\n\nfunction tsParseTypeParameters() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {\n    _index.next.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  while (!_index.eat.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    tsParseTypeParameter();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\n// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n// but here it's always false, because this is only used for types.\nfunction tsFillSignature(returnToken) {\n  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n  const returnTokenRequired = returnToken === _types.TokenType.arrow;\n  tsTryParseTypeParameters();\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  // Create a scope even though we're doing type parsing so we don't accidentally\n  // treat params as top-level bindings.\n  _base.state.scopeDepth++;\n  tsParseBindingListForSignature(false /* isBlockScope */);\n  _base.state.scopeDepth--;\n  if (returnTokenRequired) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  } else if (_index.match.call(void 0, returnToken)) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  }\n}\n\nfunction tsParseBindingListForSignature(isBlockScope) {\n  _lval.parseBindingList.call(void 0, _types.TokenType.parenR, isBlockScope);\n}\n\nfunction tsParseTypeMemberSemicolon() {\n  if (!_index.eat.call(void 0, _types.TokenType.comma)) {\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction tsParseSignatureMember() {\n  tsFillSignature(_types.TokenType.colon);\n  tsParseTypeMemberSemicolon();\n}\n\nfunction tsIsUnambiguouslyIndexSignature() {\n  const snapshot = _base.state.snapshot();\n  _index.next.call(void 0, ); // Skip '{'\n  const isIndexSignature = _index.eat.call(void 0, _types.TokenType.name) && _index.match.call(void 0, _types.TokenType.colon);\n  _base.state.restoreFromSnapshot(snapshot);\n  return isIndexSignature;\n}\n\nfunction tsTryParseIndexSignature() {\n  if (!(_index.match.call(void 0, _types.TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {\n    return false;\n  }\n\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  _expression.parseIdentifier.call(void 0, );\n  tsParseTypeAnnotation();\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n\n  tsTryParseTypeAnnotation();\n  tsParseTypeMemberSemicolon();\n\n  _index.popTypeContext.call(void 0, oldIsType);\n  return true;\n}\n\nfunction tsParsePropertyOrMethodSignature(isReadonly) {\n  _index.eat.call(void 0, _types.TokenType.question);\n\n  if (!isReadonly && (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan))) {\n    tsFillSignature(_types.TokenType.colon);\n    tsParseTypeMemberSemicolon();\n  } else {\n    tsTryParseTypeAnnotation();\n    tsParseTypeMemberSemicolon();\n  }\n}\n\nfunction tsParseTypeMember() {\n  if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {\n    // call signature\n    tsParseSignatureMember();\n    return;\n  }\n  if (_index.match.call(void 0, _types.TokenType._new)) {\n    _index.next.call(void 0, );\n    if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {\n      // constructor signature\n      tsParseSignatureMember();\n    } else {\n      tsParsePropertyOrMethodSignature(false);\n    }\n    return;\n  }\n  const readonly = !!tsParseModifier([_keywords.ContextualKeyword._readonly]);\n\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    return;\n  }\n  if (\n    (_util.isContextual.call(void 0, _keywords.ContextualKeyword._get) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._set)) &&\n    tsNextTokenCanFollowModifier()\n  ) {\n    // This is a getter/setter on a type. The tsNextTokenCanFollowModifier\n    // function already called next() for us, so continue parsing the name.\n  }\n  _expression.parsePropertyName.call(void 0, -1 /* Types don't need context IDs. */);\n  tsParsePropertyOrMethodSignature(readonly);\n}\n\nfunction tsParseTypeLiteral() {\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseObjectTypeMembers() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    tsParseTypeMember();\n  }\n}\n\nfunction tsLookaheadIsStartOfMappedType() {\n  const snapshot = _base.state.snapshot();\n  const isStartOfMappedType = tsIsStartOfMappedType();\n  _base.state.restoreFromSnapshot(snapshot);\n  return isStartOfMappedType;\n}\n\nfunction tsIsStartOfMappedType() {\n  _index.next.call(void 0, );\n  if (_index.eat.call(void 0, _types.TokenType.plus) || _index.eat.call(void 0, _types.TokenType.minus)) {\n    return _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)) {\n    _index.next.call(void 0, );\n  }\n  if (!_index.match.call(void 0, _types.TokenType.bracketL)) {\n    return false;\n  }\n  _index.next.call(void 0, );\n  if (!tsIsIdentifier()) {\n    return false;\n  }\n  _index.next.call(void 0, );\n  return _index.match.call(void 0, _types.TokenType._in);\n}\n\nfunction tsParseMappedTypeParameter() {\n  _expression.parseIdentifier.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType._in);\n  tsParseType();\n}\n\nfunction tsParseMappedType() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  } else {\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._readonly);\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  tsParseMappedTypeParameter();\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    tsParseType();\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.question);\n  } else {\n    _index.eat.call(void 0, _types.TokenType.question);\n  }\n  tsTryParseType();\n  _util.semicolon.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.braceR);\n}\n\nfunction tsParseTupleType() {\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  while (!_index.eat.call(void 0, _types.TokenType.bracketR) && !_base.state.error) {\n    // Do not validate presence of either none or only labeled elements\n    tsParseTupleElementType();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseTupleElementType() {\n  // parses `...TsType[]`\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    tsParseType();\n  } else {\n    // parses `TsType?`\n    tsParseType();\n    _index.eat.call(void 0, _types.TokenType.question);\n  }\n\n  // The type we parsed above was actually a label\n  if (_index.eat.call(void 0, _types.TokenType.colon)) {\n    // Labeled tuple types must affix the label with `...` or `?`, so no need to handle those here\n    tsParseType();\n  }\n}\n\nfunction tsParseParenthesizedType() {\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.parenR);\n}\n\nfunction tsParseTemplateLiteralType() {\n  // Finish `, read quasi\n  _index.nextTemplateToken.call(void 0, );\n  // Finish quasi, read ${\n  _index.nextTemplateToken.call(void 0, );\n  while (!_index.match.call(void 0, _types.TokenType.backQuote) && !_base.state.error) {\n    _util.expect.call(void 0, _types.TokenType.dollarBraceL);\n    tsParseType();\n    // Finish }, read quasi\n    _index.nextTemplateToken.call(void 0, );\n    // Finish quasi, read either ${ or `\n    _index.nextTemplateToken.call(void 0, );\n  }\n  _index.next.call(void 0, );\n}\n\nvar FunctionType; (function (FunctionType) {\n  const TSFunctionType = 0; FunctionType[FunctionType[\"TSFunctionType\"] = TSFunctionType] = \"TSFunctionType\";\n  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType[\"TSConstructorType\"] = TSConstructorType] = \"TSConstructorType\";\n  const TSAbstractConstructorType = TSConstructorType + 1; FunctionType[FunctionType[\"TSAbstractConstructorType\"] = TSAbstractConstructorType] = \"TSAbstractConstructorType\";\n})(FunctionType || (FunctionType = {}));\n\nfunction tsParseFunctionOrConstructorType(type) {\n  if (type === FunctionType.TSAbstractConstructorType) {\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._abstract);\n  }\n  if (type === FunctionType.TSConstructorType || type === FunctionType.TSAbstractConstructorType) {\n    _util.expect.call(void 0, _types.TokenType._new);\n  }\n  tsFillSignature(_types.TokenType.arrow);\n}\n\nfunction tsParseNonArrayType() {\n  switch (_base.state.type) {\n    case _types.TokenType.name:\n      tsParseTypeReference();\n      return;\n    case _types.TokenType._void:\n    case _types.TokenType._null:\n      _index.next.call(void 0, );\n      return;\n    case _types.TokenType.string:\n    case _types.TokenType.num:\n    case _types.TokenType.bigint:\n    case _types.TokenType.decimal:\n    case _types.TokenType._true:\n    case _types.TokenType._false:\n      _expression.parseLiteral.call(void 0, );\n      return;\n    case _types.TokenType.minus:\n      _index.next.call(void 0, );\n      _expression.parseLiteral.call(void 0, );\n      return;\n    case _types.TokenType._this: {\n      tsParseThisTypeNode();\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0, )) {\n        tsParseThisTypePredicate();\n      }\n      return;\n    }\n    case _types.TokenType._typeof:\n      tsParseTypeQuery();\n      return;\n    case _types.TokenType._import:\n      tsParseImportType();\n      return;\n    case _types.TokenType.braceL:\n      if (tsLookaheadIsStartOfMappedType()) {\n        tsParseMappedType();\n      } else {\n        tsParseTypeLiteral();\n      }\n      return;\n    case _types.TokenType.bracketL:\n      tsParseTupleType();\n      return;\n    case _types.TokenType.parenL:\n      tsParseParenthesizedType();\n      return;\n    case _types.TokenType.backQuote:\n      tsParseTemplateLiteralType();\n      return;\n    default:\n      if (_base.state.type & _types.TokenType.IS_KEYWORD) {\n        _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;\n        return;\n      }\n      break;\n  }\n\n  _util.unexpected.call(void 0, );\n}\n\nfunction tsParseArrayTypeOrHigher() {\n  tsParseNonArrayType();\n  while (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.eat.call(void 0, _types.TokenType.bracketL)) {\n    if (!_index.eat.call(void 0, _types.TokenType.bracketR)) {\n      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.\n      tsParseType();\n      _util.expect.call(void 0, _types.TokenType.bracketR);\n    }\n  }\n}\n\nfunction tsParseInferType() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._infer);\n  _expression.parseIdentifier.call(void 0, );\n}\n\nfunction tsParseTypeOperatorOrHigher() {\n  if (\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._keyof) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._unique) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)\n  ) {\n    _index.next.call(void 0, );\n    tsParseTypeOperatorOrHigher();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._infer)) {\n    tsParseInferType();\n  } else {\n    tsParseArrayTypeOrHigher();\n  }\n}\n\nfunction tsParseIntersectionTypeOrHigher() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseAND);\n  tsParseTypeOperatorOrHigher();\n  if (_index.match.call(void 0, _types.TokenType.bitwiseAND)) {\n    while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {\n      tsParseTypeOperatorOrHigher();\n    }\n  }\n}\n\nfunction tsParseUnionTypeOrHigher() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseOR);\n  tsParseIntersectionTypeOrHigher();\n  if (_index.match.call(void 0, _types.TokenType.bitwiseOR)) {\n    while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {\n      tsParseIntersectionTypeOrHigher();\n    }\n  }\n}\n\nfunction tsIsStartOfFunctionType() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return true;\n  }\n  return _index.match.call(void 0, _types.TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();\n}\n\nfunction tsSkipParameterStart() {\n  if (_index.match.call(void 0, _types.TokenType.name) || _index.match.call(void 0, _types.TokenType._this)) {\n    _index.next.call(void 0, );\n    return true;\n  }\n  // If this is a possible array/object destructure, walk to the matching bracket/brace.\n  // The next token after will tell us definitively whether this is a function param.\n  if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {\n    let depth = 1;\n    _index.next.call(void 0, );\n    while (depth > 0 && !_base.state.error) {\n      if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {\n        depth++;\n      } else if (_index.match.call(void 0, _types.TokenType.braceR) || _index.match.call(void 0, _types.TokenType.bracketR)) {\n        depth--;\n      }\n      _index.next.call(void 0, );\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction tsLookaheadIsUnambiguouslyStartOfFunctionType() {\n  const snapshot = _base.state.snapshot();\n  const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();\n  _base.state.restoreFromSnapshot(snapshot);\n  return isUnambiguouslyStartOfFunctionType;\n}\n\nfunction tsIsUnambiguouslyStartOfFunctionType() {\n  _index.next.call(void 0, );\n  if (_index.match.call(void 0, _types.TokenType.parenR) || _index.match.call(void 0, _types.TokenType.ellipsis)) {\n    // ( )\n    // ( ...\n    return true;\n  }\n  if (tsSkipParameterStart()) {\n    if (_index.match.call(void 0, _types.TokenType.colon) || _index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.question) || _index.match.call(void 0, _types.TokenType.eq)) {\n      // ( xxx :\n      // ( xxx ,\n      // ( xxx ?\n      // ( xxx =\n      return true;\n    }\n    if (_index.match.call(void 0, _types.TokenType.parenR)) {\n      _index.next.call(void 0, );\n      if (_index.match.call(void 0, _types.TokenType.arrow)) {\n        // ( xxx ) =>\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction tsParseTypeOrTypePredicateAnnotation(returnToken) {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, returnToken);\n  const finishedReturn = tsParseTypePredicateOrAssertsPrefix();\n  if (!finishedReturn) {\n    tsParseType();\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction tsTryParseTypeOrTypePredicateAnnotation() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n  }\n}\n\n function tsTryParseTypeAnnotation() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n} exports.tsTryParseTypeAnnotation = tsTryParseTypeAnnotation;\n\nfunction tsTryParseType() {\n  if (_index.eat.call(void 0, _types.TokenType.colon)) {\n    tsParseType();\n  }\n}\n\n/**\n * Detect a few special return syntax cases: `x is T`, `asserts x`, `asserts x is T`,\n * `asserts this is T`.\n *\n * Returns true if we parsed the return type, false if there's still a type to be parsed.\n */\nfunction tsParseTypePredicateOrAssertsPrefix() {\n  const snapshot = _base.state.snapshot();\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._asserts) && !_util.hasPrecedingLineBreak.call(void 0, )) {\n    // Normally this is `asserts x is T`, but at this point, it might be `asserts is T` (a user-\n    // defined type guard on the `asserts` variable) or just a type called `asserts`.\n    _index.next.call(void 0, );\n    if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._is)) {\n      // If we see `asserts is`, then this must be of the form `asserts is T`, since\n      // `asserts is is T` isn't valid.\n      tsParseType();\n      return true;\n    } else if (tsIsIdentifier() || _index.match.call(void 0, _types.TokenType._this)) {\n      _index.next.call(void 0, );\n      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._is)) {\n        // If we see `is`, then this is `asserts x is T`. Otherwise, it's `asserts x`.\n        tsParseType();\n      }\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      _base.state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  } else if (tsIsIdentifier() || _index.match.call(void 0, _types.TokenType._this)) {\n    // This is a regular identifier, which may or may not have \"is\" after it.\n    _index.next.call(void 0, );\n    if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0, )) {\n      _index.next.call(void 0, );\n      tsParseType();\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      _base.state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  }\n  return false;\n}\n\n function tsParseTypeAnnotation() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.colon);\n  tsParseType();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsParseTypeAnnotation = tsParseTypeAnnotation;\n\n function tsParseType() {\n  tsParseNonConditionalType();\n  if (_util.hasPrecedingLineBreak.call(void 0, ) || !_index.eat.call(void 0, _types.TokenType._extends)) {\n    return;\n  }\n  // extends type\n  tsParseNonConditionalType();\n  _util.expect.call(void 0, _types.TokenType.question);\n  // true type\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.colon);\n  // false type\n  tsParseType();\n} exports.tsParseType = tsParseType;\n\nfunction isAbstractConstructorSignature() {\n  return _util.isContextual.call(void 0, _keywords.ContextualKeyword._abstract) && _index.lookaheadType.call(void 0, ) === _types.TokenType._new;\n}\n\n function tsParseNonConditionalType() {\n  if (tsIsStartOfFunctionType()) {\n    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);\n    return;\n  }\n  if (_index.match.call(void 0, _types.TokenType._new)) {\n    // As in `new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);\n    return;\n  } else if (isAbstractConstructorSignature()) {\n    // As in `abstract new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSAbstractConstructorType);\n    return;\n  }\n  tsParseUnionTypeOrHigher();\n} exports.tsParseNonConditionalType = tsParseNonConditionalType;\n\n function tsParseTypeAssertion() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 1);\n  tsParseType();\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n  _expression.parseMaybeUnary.call(void 0, );\n} exports.tsParseTypeAssertion = tsParseTypeAssertion;\n\n function tsTryParseJSXTypeArgument() {\n  if (_index.eat.call(void 0, _types.TokenType.jsxTagStart)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.typeParameterStart;\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n      tsParseType();\n      _index.eat.call(void 0, _types.TokenType.comma);\n    }\n    // Process >, but the one after needs to be parsed JSX-style.\n    _jsx.nextJSXTagToken.call(void 0, );\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.tsTryParseJSXTypeArgument = tsTryParseJSXTypeArgument;\n\nfunction tsParseHeritageClause() {\n  while (!_index.match.call(void 0, _types.TokenType.braceL) && !_base.state.error) {\n    tsParseExpressionWithTypeArguments();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseExpressionWithTypeArguments() {\n  // Note: TS uses parseLeftHandSideExpressionOrHigher,\n  // then has grammar errors later if it's not an EntityName.\n  tsParseEntityName();\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseInterfaceDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  tsTryParseTypeParameters();\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    tsParseHeritageClause();\n  }\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseTypeAliasDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  tsTryParseTypeParameters();\n  _util.expect.call(void 0, _types.TokenType.eq);\n  tsParseType();\n  _util.semicolon.call(void 0, );\n}\n\nfunction tsParseEnumMember() {\n  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n  if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseLiteral.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    const eqIndex = _base.state.tokens.length - 1;\n    _expression.parseMaybeAssign.call(void 0, );\n    _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n  }\n}\n\nfunction tsParseEnumDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    tsParseEnumMember();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n}\n\nfunction tsParseModuleBlock() {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  _statement.parseBlockBody.call(void 0, /* end */ _types.TokenType.braceR);\n}\n\nfunction tsParseModuleOrNamespaceDeclaration() {\n  _lval.parseBindingIdentifier.call(void 0, false);\n  if (_index.eat.call(void 0, _types.TokenType.dot)) {\n    tsParseModuleOrNamespaceDeclaration();\n  } else {\n    tsParseModuleBlock();\n  }\n}\n\nfunction tsParseAmbientExternalModuleDeclaration() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._global)) {\n    _expression.parseIdentifier.call(void 0, );\n  } else if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  if (_index.match.call(void 0, _types.TokenType.braceL)) {\n    tsParseModuleBlock();\n  } else {\n    _util.semicolon.call(void 0, );\n  }\n}\n\n function tsParseImportEqualsDeclaration() {\n  _lval.parseImportedIdentifier.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.eq);\n  tsParseModuleReference();\n  _util.semicolon.call(void 0, );\n} exports.tsParseImportEqualsDeclaration = tsParseImportEqualsDeclaration;\n\nfunction tsIsExternalModuleReference() {\n  return _util.isContextual.call(void 0, _keywords.ContextualKeyword._require) && _index.lookaheadType.call(void 0, ) === _types.TokenType.parenL;\n}\n\nfunction tsParseModuleReference() {\n  if (tsIsExternalModuleReference()) {\n    tsParseExternalModuleReference();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseExternalModuleReference() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._require);\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  if (!_index.match.call(void 0, _types.TokenType.string)) {\n    _util.unexpected.call(void 0, );\n  }\n  _expression.parseLiteral.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.parenR);\n}\n\n// Utilities\n\n// Returns true if a statement matched.\nfunction tsTryParseDeclare() {\n  if (_util.isLineTerminator.call(void 0, )) {\n    return false;\n  }\n  switch (_base.state.type) {\n    case _types.TokenType._function: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _index.next.call(void 0, );\n      // We don't need to precisely get the function start here, since it's only used to mark\n      // the function as a type if it's bodiless, and it's already a type here.\n      const functionStart = _base.state.start;\n      _statement.parseFunction.call(void 0, functionStart, /* isStatement */ true);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType._class: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _statement.parseClass.call(void 0, /* isStatement */ true, /* optionalId */ false);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType._const: {\n      if (_index.match.call(void 0, _types.TokenType._const) && _util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._enum)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, 1);\n        // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n        _util.expect.call(void 0, _types.TokenType._const);\n        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n        tsParseEnumDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n    }\n    // falls through\n    case _types.TokenType._var:\n    case _types.TokenType._let: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      _statement.parseVarStatement.call(void 0, _base.state.type);\n      _index.popTypeContext.call(void 0, oldIsType);\n      return true;\n    }\n    case _types.TokenType.name: {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      const contextualKeyword = _base.state.contextualKeyword;\n      let matched = false;\n      if (contextualKeyword === _keywords.ContextualKeyword._global) {\n        tsParseAmbientExternalModuleDeclaration();\n        matched = true;\n      } else {\n        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);\n      }\n      _index.popTypeContext.call(void 0, oldIsType);\n      return matched;\n    }\n    default:\n      return false;\n  }\n}\n\n// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n// Returns true if it matched a declaration.\nfunction tsTryParseExportDeclaration() {\n  return tsParseDeclaration(_base.state.contextualKeyword, /* isBeforeToken */ true);\n}\n\n// Returns true if it matched a statement.\nfunction tsParseExpressionStatement(contextualKeyword) {\n  switch (contextualKeyword) {\n    case _keywords.ContextualKeyword._declare: {\n      const declareTokenIndex = _base.state.tokens.length - 1;\n      const matched = tsTryParseDeclare();\n      if (matched) {\n        _base.state.tokens[declareTokenIndex].type = _types.TokenType._declare;\n        return true;\n      }\n      break;\n    }\n    case _keywords.ContextualKeyword._global:\n      // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n      if (_index.match.call(void 0, _types.TokenType.braceL)) {\n        tsParseModuleBlock();\n        return true;\n      }\n      break;\n\n    default:\n      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);\n  }\n  return false;\n}\n\n/**\n * Common code for parsing a declaration.\n *\n * isBeforeToken indicates that the current parser state is at the contextual\n * keyword (and that it is not yet emitted) rather than reading the token after\n * it. When isBeforeToken is true, we may be preceded by an `export` token and\n * should include that token in a type context we create, e.g. to handle\n * `export interface` or `export type`. (This is a bit of a hack and should be\n * cleaned up at some point.)\n *\n * Returns true if it matched a declaration.\n */\nfunction tsParseDeclaration(contextualKeyword, isBeforeToken) {\n  switch (contextualKeyword) {\n    case _keywords.ContextualKeyword._abstract:\n      if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType._class)) {\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;\n        _statement.parseClass.call(void 0, /* isStatement */ true, /* optionalId */ false);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._enum:\n      if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n        tsParseEnumDeclaration();\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._interface:\n      if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {\n        // `next` is true in \"export\" and \"declare\" contexts, so we want to remove that token\n        // as well.\n        const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n        tsParseInterfaceDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._module:\n      if (tsCheckLineTerminator(isBeforeToken)) {\n        if (_index.match.call(void 0, _types.TokenType.string)) {\n          const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n          tsParseAmbientExternalModuleDeclaration();\n          _index.popTypeContext.call(void 0, oldIsType);\n          return true;\n        } else if (_index.match.call(void 0, _types.TokenType.name)) {\n          const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n          tsParseModuleOrNamespaceDeclaration();\n          _index.popTypeContext.call(void 0, oldIsType);\n          return true;\n        }\n      }\n      break;\n\n    case _keywords.ContextualKeyword._namespace:\n      if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n        tsParseModuleOrNamespaceDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    case _keywords.ContextualKeyword._type:\n      if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {\n        const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);\n        tsParseTypeAliasDeclaration();\n        _index.popTypeContext.call(void 0, oldIsType);\n        return true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  return false;\n}\n\nfunction tsCheckLineTerminator(isBeforeToken) {\n  if (isBeforeToken) {\n    // Babel checks hasFollowingLineBreak here and returns false, but this\n    // doesn't actually come up, e.g. `export interface` can never be on its own\n    // line in valid code.\n    _index.next.call(void 0, );\n    return true;\n  } else {\n    return !_util.isLineTerminator.call(void 0, );\n  }\n}\n\n// Returns true if there was a generic async arrow function.\nfunction tsTryParseGenericAsyncArrowFunction() {\n  const snapshot = _base.state.snapshot();\n\n  tsParseTypeParameters();\n  _statement.parseFunctionParams.call(void 0, );\n  tsTryParseTypeOrTypePredicateAnnotation();\n  _util.expect.call(void 0, _types.TokenType.arrow);\n\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n\n  _expression.parseFunctionBody.call(void 0, true);\n  return true;\n}\n\nfunction tsParseTypeArguments() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.lessThan);\n  while (!_index.eat.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    tsParseType();\n    _index.eat.call(void 0, _types.TokenType.comma);\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\n function tsIsDeclarationStart() {\n  if (_index.match.call(void 0, _types.TokenType.name)) {\n    switch (_base.state.contextualKeyword) {\n      case _keywords.ContextualKeyword._abstract:\n      case _keywords.ContextualKeyword._declare:\n      case _keywords.ContextualKeyword._enum:\n      case _keywords.ContextualKeyword._interface:\n      case _keywords.ContextualKeyword._module:\n      case _keywords.ContextualKeyword._namespace:\n      case _keywords.ContextualKeyword._type:\n        return true;\n      default:\n        break;\n    }\n  }\n\n  return false;\n} exports.tsIsDeclarationStart = tsIsDeclarationStart;\n\n// ======================================================\n// OVERRIDES\n// ======================================================\n\n function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n  }\n\n  // The original code checked the node type to make sure this function type allows a missing\n  // body, but we skip that to avoid sending around the node type. We instead just use the\n  // allowExpressionBody boolean to make sure it's not an arrow function.\n  if (!_index.match.call(void 0, _types.TokenType.braceL) && _util.isLineTerminator.call(void 0, )) {\n    // Retroactively mark the function declaration as a type.\n    let i = _base.state.tokens.length - 1;\n    while (\n      i >= 0 &&\n      (_base.state.tokens[i].start >= functionStart ||\n        _base.state.tokens[i].type === _types.TokenType._default ||\n        _base.state.tokens[i].type === _types.TokenType._export)\n    ) {\n      _base.state.tokens[i].isType = true;\n      i--;\n    }\n    return;\n  }\n\n  _expression.parseFunctionBody.call(void 0, false, funcContextId);\n} exports.tsParseFunctionBodyAndFinish = tsParseFunctionBodyAndFinish;\n\n function tsParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!_util.hasPrecedingLineBreak.call(void 0, ) && _index.eat.call(void 0, _types.TokenType.bang)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.nonNullAssertion;\n    return;\n  }\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    // There are number of things we are going to \"maybe\" parse, like type arguments on\n    // tagged template expressions. If any of them fail, walk it back and continue.\n    const snapshot = _base.state.snapshot();\n\n    if (!noCalls && _expression.atPossibleAsync.call(void 0, )) {\n      // Almost certainly this is a generic async function `async <T>() => ...\n      // But it might be a call with a type argument `async<T>();`\n      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();\n      if (asyncArrowFn) {\n        return;\n      }\n    }\n    tsParseTypeArguments();\n    if (!noCalls && _index.eat.call(void 0, _types.TokenType.parenL)) {\n      // With f<T>(), the subscriptStartIndex marker is on the ( token.\n      _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      _expression.parseCallExpressionArguments.call(void 0, );\n    } else if (_index.match.call(void 0, _types.TokenType.backQuote)) {\n      // Tagged template with a type argument.\n      _expression.parseTemplate.call(void 0, );\n    } else {\n      _util.unexpected.call(void 0, );\n    }\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  } else if (!noCalls && _index.match.call(void 0, _types.TokenType.questionDot) && _index.lookaheadType.call(void 0, ) === _types.TokenType.lessThan) {\n    // If we see f?.<, then this must be an optional call with a type argument.\n    _index.next.call(void 0, );\n    _base.state.tokens[startTokenIndex].isOptionalChainStart = true;\n    // With f?.<T>(), the subscriptStartIndex marker is on the ?. token.\n    _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    tsParseTypeArguments();\n    _util.expect.call(void 0, _types.TokenType.parenL);\n    _expression.parseCallExpressionArguments.call(void 0, );\n  }\n  _expression.baseParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);\n} exports.tsParseSubscript = tsParseSubscript;\n\n function tsStartParseNewArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n    const snapshot = _base.state.snapshot();\n\n    _base.state.type = _types.TokenType.typeParameterStart;\n    tsParseTypeArguments();\n    if (!_index.match.call(void 0, _types.TokenType.parenL)) {\n      _util.unexpected.call(void 0, );\n    }\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n} exports.tsStartParseNewArguments = tsStartParseNewArguments;\n\n function tsTryParseExport() {\n  if (_index.eat.call(void 0, _types.TokenType._import)) {\n    // One of these cases:\n    // export import A = B;\n    // export import type A = require(\"A\");\n    if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0, ) !== _types.TokenType.eq) {\n      // Eat a `type` token, unless it's actually an identifier name.\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);\n    }\n    tsParseImportEqualsDeclaration();\n    return true;\n  } else if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    // `export = x;`\n    _expression.parseExpression.call(void 0, );\n    _util.semicolon.call(void 0, );\n    return true;\n  } else if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    // `export as namespace A;`\n    // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._namespace);\n    _expression.parseIdentifier.call(void 0, );\n    _util.semicolon.call(void 0, );\n    return true;\n  } else {\n    if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0, ) === _types.TokenType.braceL) {\n      _index.next.call(void 0, );\n    }\n    return false;\n  }\n} exports.tsTryParseExport = tsTryParseExport;\n\n function tsTryParseExportDefaultExpression() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._abstract) && _index.lookaheadType.call(void 0, ) === _types.TokenType._class) {\n    _base.state.type = _types.TokenType._abstract;\n    _index.next.call(void 0, ); // Skip \"abstract\"\n    _statement.parseClass.call(void 0, true, true);\n    return true;\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    // Make sure \"export default\" are considered type tokens so the whole thing is removed.\n    const oldIsType = _index.pushTypeContext.call(void 0, 2);\n    tsParseDeclaration(_keywords.ContextualKeyword._interface, true);\n    _index.popTypeContext.call(void 0, oldIsType);\n    return true;\n  }\n  return false;\n} exports.tsTryParseExportDefaultExpression = tsTryParseExportDefaultExpression;\n\n function tsTryParseStatementContent() {\n  if (_base.state.type === _types.TokenType._const) {\n    const ahead = _index.lookaheadTypeAndKeyword.call(void 0, );\n    if (ahead.type === _types.TokenType.name && ahead.contextualKeyword === _keywords.ContextualKeyword._enum) {\n      _util.expect.call(void 0, _types.TokenType._const);\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;\n      tsParseEnumDeclaration();\n      return true;\n    }\n  }\n  return false;\n} exports.tsTryParseStatementContent = tsTryParseStatementContent;\n\n function tsTryParseClassMemberWithIsStatic(isStatic) {\n  const memberStartIndexAfterStatic = _base.state.tokens.length;\n  tsParseModifiers([\n    _keywords.ContextualKeyword._abstract,\n    _keywords.ContextualKeyword._readonly,\n    _keywords.ContextualKeyword._declare,\n    _keywords.ContextualKeyword._static,\n    _keywords.ContextualKeyword._override,\n  ]);\n\n  const modifiersEndIndex = _base.state.tokens.length;\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    // Index signatures are type declarations, so set the modifier tokens as\n    // type tokens. Most tokens could be assumed to be type tokens, but `static`\n    // is ambiguous unless we set it explicitly here.\n    const memberStartIndex = isStatic\n      ? memberStartIndexAfterStatic - 1\n      : memberStartIndexAfterStatic;\n    for (let i = memberStartIndex; i < modifiersEndIndex; i++) {\n      _base.state.tokens[i].isType = true;\n    }\n    return true;\n  }\n  return false;\n} exports.tsTryParseClassMemberWithIsStatic = tsTryParseClassMemberWithIsStatic;\n\n// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`\n// is that e.g. `type()` is valid JS, so we must try parsing that first.\n// If it's really a type, we will parse `type` as the statement, and can correct it here\n// by parsing the rest.\n function tsParseIdentifierStatement(contextualKeyword) {\n  const matched = tsParseExpressionStatement(contextualKeyword);\n  if (!matched) {\n    _util.semicolon.call(void 0, );\n  }\n} exports.tsParseIdentifierStatement = tsParseIdentifierStatement;\n\n function tsParseExportDeclaration() {\n  // \"export declare\" is equivalent to just \"export\".\n  const isDeclare = _util.eatContextual.call(void 0, _keywords.ContextualKeyword._declare);\n  if (isDeclare) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;\n  }\n\n  let matchedDeclaration = false;\n  if (_index.match.call(void 0, _types.TokenType.name)) {\n    if (isDeclare) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 2);\n      matchedDeclaration = tsTryParseExportDeclaration();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else {\n      matchedDeclaration = tsTryParseExportDeclaration();\n    }\n  }\n  if (!matchedDeclaration) {\n    if (isDeclare) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 2);\n      _statement.parseStatement.call(void 0, true);\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else {\n      _statement.parseStatement.call(void 0, true);\n    }\n  }\n} exports.tsParseExportDeclaration = tsParseExportDeclaration;\n\n function tsAfterParseClassSuper(hasSuper) {\n  if (hasSuper && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    tsParseHeritageClause();\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.tsAfterParseClassSuper = tsAfterParseClassSuper;\n\n function tsStartParseObjPropValue() {\n  tsTryParseTypeParameters();\n} exports.tsStartParseObjPropValue = tsStartParseObjPropValue;\n\n function tsStartParseFunctionParams() {\n  tsTryParseTypeParameters();\n} exports.tsStartParseFunctionParams = tsStartParseFunctionParams;\n\n// `let x: number;`\n function tsAfterParseVarHead() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.bang);\n  tsTryParseTypeAnnotation();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsAfterParseVarHead = tsAfterParseVarHead;\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\n function tsStartParseAsyncArrowFromCallExpression() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    tsParseTypeAnnotation();\n  }\n} exports.tsStartParseAsyncArrowFromCallExpression = tsStartParseAsyncArrowFromCallExpression;\n\n// Returns true if the expression was an arrow function.\n function tsParseMaybeAssign(noIn, isWithinParens) {\n  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n  if (_base.isJSXEnabled) {\n    return tsParseMaybeAssignWithJSX(noIn, isWithinParens);\n  } else {\n    return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);\n  }\n} exports.tsParseMaybeAssign = tsParseMaybeAssign;\n\n function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {\n  if (!_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  }\n\n  // Prefer to parse JSX if possible. But may be an arrow fn.\n  const snapshot = _base.state.snapshot();\n  let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Otherwise, try as type-parameterized arrow function.\n  _base.state.type = _types.TokenType.typeParameterStart;\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (!wasArrow) {\n    _util.unexpected.call(void 0, );\n  }\n\n  return wasArrow;\n} exports.tsParseMaybeAssignWithJSX = tsParseMaybeAssignWithJSX;\n\n function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {\n  if (!_index.match.call(void 0, _types.TokenType.lessThan)) {\n    return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  }\n\n  const snapshot = _base.state.snapshot();\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  const wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  if (!wasArrow) {\n    _util.unexpected.call(void 0, );\n  }\n  if (_base.state.error) {\n    _base.state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Try parsing a type cast instead of an arrow function.\n  // This will start with a type assertion (via parseMaybeUnary).\n  // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.\n  return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n} exports.tsParseMaybeAssignWithoutJSX = tsParseMaybeAssignWithoutJSX;\n\n function tsParseArrow() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    // This is different from how the TS parser does it.\n    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.\n    const snapshot = _base.state.snapshot();\n\n    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);\n    if (_util.canInsertSemicolon.call(void 0, )) _util.unexpected.call(void 0, );\n    if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0, );\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n  return _index.eat.call(void 0, _types.TokenType.arrow);\n} exports.tsParseArrow = tsParseArrow;\n\n// Allow type annotations inside of a parameter list.\n function tsParseAssignableListItemTypes() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.question);\n  tsTryParseTypeAnnotation();\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.tsParseAssignableListItemTypes = tsParseAssignableListItemTypes;\n\n function tsParseMaybeDecoratorArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    tsParseTypeArguments();\n  }\n  _statement.baseParseMaybeDecoratorArguments.call(void 0, );\n} exports.tsParseMaybeDecoratorArguments = tsParseMaybeDecoratorArguments;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\nvar _index = require('../../tokenizer/index');\nvar _types = require('../../tokenizer/types');\nvar _base = require('../../traverser/base');\nvar _expression = require('../../traverser/expression');\nvar _util = require('../../traverser/util');\nvar _charcodes = require('../../util/charcodes');\nvar _identifier = require('../../util/identifier');\nvar _typescript = require('../typescript');\n\n// Reads inline JSX contents token.\nfunction jsxReadToken() {\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated JSX contents\");\n      return;\n    }\n\n    const ch = _base.input.charCodeAt(_base.state.pos);\n\n    switch (ch) {\n      case _charcodes.charCodes.lessThan:\n      case _charcodes.charCodes.leftCurlyBrace:\n        if (_base.state.pos === _base.state.start) {\n          if (ch === _charcodes.charCodes.lessThan) {\n            _base.state.pos++;\n            _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);\n            return;\n          }\n          _index.getTokenFromCode.call(void 0, ch);\n          return;\n        }\n        _index.finishToken.call(void 0, _types.TokenType.jsxText);\n        return;\n\n      default:\n        _base.state.pos++;\n    }\n  }\n}\n\nfunction jsxReadString(quote) {\n  _base.state.pos++;\n  for (;;) {\n    if (_base.state.pos >= _base.input.length) {\n      _util.unexpected.call(void 0, \"Unterminated string constant\");\n      return;\n    }\n\n    const ch = _base.input.charCodeAt(_base.state.pos);\n    if (ch === quote) {\n      _base.state.pos++;\n      break;\n    }\n    _base.state.pos++;\n  }\n  _index.finishToken.call(void 0, _types.TokenType.string);\n}\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can't contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\nfunction jsxReadWord() {\n  let ch;\n  do {\n    if (_base.state.pos > _base.input.length) {\n      _util.unexpected.call(void 0, \"Unexpectedly reached the end of input.\");\n      return;\n    }\n    ch = _base.input.charCodeAt(++_base.state.pos);\n  } while (_identifier.IS_IDENTIFIER_CHAR[ch] || ch === _charcodes.charCodes.dash);\n  _index.finishToken.call(void 0, _types.TokenType.jsxName);\n}\n\n// Parse next token as JSX identifier\nfunction jsxParseIdentifier() {\n  nextJSXTagToken();\n}\n\n// Parse namespaced identifier.\nfunction jsxParseNamespacedName(identifierRole) {\n  jsxParseIdentifier();\n  if (!_index.eat.call(void 0, _types.TokenType.colon)) {\n    // Plain identifier, so this is an access.\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;\n    return;\n  }\n  // Process the second half of the namespaced name.\n  jsxParseIdentifier();\n}\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\nfunction jsxParseElementName() {\n  jsxParseNamespacedName(_index.IdentifierRole.Access);\n  while (_index.match.call(void 0, _types.TokenType.dot)) {\n    nextJSXTagToken();\n    jsxParseIdentifier();\n  }\n}\n\n// Parses any type of JSX attribute value.\nfunction jsxParseAttributeValue() {\n  switch (_base.state.type) {\n    case _types.TokenType.braceL:\n      _index.next.call(void 0, );\n      jsxParseExpressionContainer();\n      nextJSXTagToken();\n      return;\n\n    case _types.TokenType.jsxTagStart:\n      jsxParseElement();\n      nextJSXTagToken();\n      return;\n\n    case _types.TokenType.string:\n      nextJSXTagToken();\n      return;\n\n    default:\n      _util.unexpected.call(void 0, \"JSX value should be either an expression or a quoted JSX text\");\n  }\n}\n\nfunction jsxParseEmptyExpression() {\n  // Do nothing.\n}\n\n// Parse JSX spread child, after already processing the {\n// Does not parse the closing }\nfunction jsxParseSpreadChild() {\n  _util.expect.call(void 0, _types.TokenType.ellipsis);\n  _expression.parseExpression.call(void 0, );\n}\n\n// Parses JSX expression enclosed into curly brackets, after already processing the {\n// Does not parse the closing }\nfunction jsxParseExpressionContainer() {\n  if (_index.match.call(void 0, _types.TokenType.braceR)) {\n    jsxParseEmptyExpression();\n  } else {\n    _expression.parseExpression.call(void 0, );\n  }\n}\n\n// Parses following JSX attribute name-value pair.\nfunction jsxParseAttribute() {\n  if (_index.eat.call(void 0, _types.TokenType.braceL)) {\n    _util.expect.call(void 0, _types.TokenType.ellipsis);\n    _expression.parseMaybeAssign.call(void 0, );\n    // }\n    nextJSXTagToken();\n    return;\n  }\n  jsxParseNamespacedName(_index.IdentifierRole.ObjectKey);\n  if (_index.match.call(void 0, _types.TokenType.eq)) {\n    nextJSXTagToken();\n    jsxParseAttributeValue();\n  }\n}\n\n// Parses JSX opening tag starting after \"<\".\n// Returns true if the tag was self-closing.\n// Does not parse the last token.\nfunction jsxParseOpeningElement() {\n  if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {\n    // This is an open-fragment.\n    return false;\n  }\n  jsxParseElementName();\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseJSXTypeArgument.call(void 0, );\n  }\n  while (!_index.match.call(void 0, _types.TokenType.slash) && !_index.match.call(void 0, _types.TokenType.jsxTagEnd) && !_base.state.error) {\n    jsxParseAttribute();\n  }\n  const isSelfClosing = _index.match.call(void 0, _types.TokenType.slash);\n  if (isSelfClosing) {\n    // /\n    nextJSXTagToken();\n  }\n  return isSelfClosing;\n}\n\n// Parses JSX closing tag starting after \"</\".\n// Does not parse the last token.\nfunction jsxParseClosingElement() {\n  if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {\n    // Fragment syntax, so we immediately have a tag end.\n    return;\n  }\n  jsxParseElementName();\n}\n\n// Parses entire JSX element, including its opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n// Does not parse the last token.\nfunction jsxParseElementAt() {\n  const isSelfClosing = jsxParseOpeningElement();\n  if (!isSelfClosing) {\n    nextJSXExprToken();\n    while (true) {\n      switch (_base.state.type) {\n        case _types.TokenType.jsxTagStart:\n          nextJSXTagToken();\n          if (_index.match.call(void 0, _types.TokenType.slash)) {\n            nextJSXTagToken();\n            jsxParseClosingElement();\n            return;\n          }\n          jsxParseElementAt();\n          nextJSXExprToken();\n          break;\n\n        case _types.TokenType.jsxText:\n          nextJSXExprToken();\n          break;\n\n        case _types.TokenType.braceL:\n          _index.next.call(void 0, );\n          if (_index.match.call(void 0, _types.TokenType.ellipsis)) {\n            jsxParseSpreadChild();\n            nextJSXExprToken();\n          } else {\n            jsxParseExpressionContainer();\n            nextJSXExprToken();\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          _util.unexpected.call(void 0, );\n          return;\n      }\n    }\n  }\n}\n\n// Parses entire JSX element from current position.\n// Does not parse the last token.\n function jsxParseElement() {\n  nextJSXTagToken();\n  jsxParseElementAt();\n} exports.jsxParseElement = jsxParseElement;\n\n// ==================================\n// Overrides\n// ==================================\n\n function nextJSXTagToken() {\n  _base.state.tokens.push(new (0, _index.Token)());\n  _index.skipSpace.call(void 0, );\n  _base.state.start = _base.state.pos;\n  const code = _base.input.charCodeAt(_base.state.pos);\n\n  if (_identifier.IS_IDENTIFIER_START[code]) {\n    jsxReadWord();\n  } else if (code === _charcodes.charCodes.quotationMark || code === _charcodes.charCodes.apostrophe) {\n    jsxReadString(code);\n  } else {\n    // The following tokens are just one character each.\n    ++_base.state.pos;\n    switch (code) {\n      case _charcodes.charCodes.greaterThan:\n        _index.finishToken.call(void 0, _types.TokenType.jsxTagEnd);\n        break;\n      case _charcodes.charCodes.lessThan:\n        _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);\n        break;\n      case _charcodes.charCodes.slash:\n        _index.finishToken.call(void 0, _types.TokenType.slash);\n        break;\n      case _charcodes.charCodes.equalsTo:\n        _index.finishToken.call(void 0, _types.TokenType.eq);\n        break;\n      case _charcodes.charCodes.leftCurlyBrace:\n        _index.finishToken.call(void 0, _types.TokenType.braceL);\n        break;\n      case _charcodes.charCodes.dot:\n        _index.finishToken.call(void 0, _types.TokenType.dot);\n        break;\n      case _charcodes.charCodes.colon:\n        _index.finishToken.call(void 0, _types.TokenType.colon);\n        break;\n      default:\n        _util.unexpected.call(void 0, );\n    }\n  }\n} exports.nextJSXTagToken = nextJSXTagToken;\n\nfunction nextJSXExprToken() {\n  _base.state.tokens.push(new (0, _index.Token)());\n  _base.state.start = _base.state.pos;\n  jsxReadToken();\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _index = require('../tokenizer/index');\nvar _types = require('../tokenizer/types');\nvar _base = require('../traverser/base');\nvar _expression = require('../traverser/expression');\nvar _flow = require('./flow');\nvar _typescript = require('./typescript');\n\n/**\n * Common parser code for TypeScript and Flow.\n */\n\n// An apparent conditional expression could actually be an optional parameter in an arrow function.\n function typedParseConditional(noIn) {\n  // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called\n  // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional\n  // parameters without type annotations, i.e. ?, and ?) .\n  if (_index.match.call(void 0, _types.TokenType.question)) {\n    const nextType = _index.lookaheadType.call(void 0, );\n    if (nextType === _types.TokenType.colon || nextType === _types.TokenType.comma || nextType === _types.TokenType.parenR) {\n      return;\n    }\n  }\n  _expression.baseParseConditional.call(void 0, noIn);\n} exports.typedParseConditional = typedParseConditional;\n\n// Note: These \"type casts\" are *not* valid TS expressions.\n// But we parse them here and change them when completing the arrow function.\n function typedParseParenItem() {\n  _index.eatTypeToken.call(void 0, _types.TokenType.question);\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    if (_base.isTypeScriptEnabled) {\n      _typescript.tsParseTypeAnnotation.call(void 0, );\n    } else if (_base.isFlowEnabled) {\n      _flow.flowParseTypeAnnotation.call(void 0, );\n    }\n  }\n} exports.typedParseParenItem = typedParseParenItem;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts \u2014 that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n\n\n\n\n\n\n\n\n\nvar _flow = require('../plugins/flow');\nvar _index = require('../plugins/jsx/index');\nvar _types = require('../plugins/types');\n\n\n\n\n\n\n\n\n\n\nvar _typescript = require('../plugins/typescript');\n\n\n\n\n\n\n\n\n\n\n\nvar _index3 = require('../tokenizer/index');\nvar _keywords = require('../tokenizer/keywords');\nvar _state = require('../tokenizer/state');\nvar _types3 = require('../tokenizer/types');\nvar _charcodes = require('../util/charcodes');\nvar _identifier = require('../util/identifier');\nvar _base = require('./base');\n\n\n\n\n\n\nvar _lval = require('./lval');\n\n\n\n\n\n\n\nvar _statement = require('./statement');\n\n\n\n\n\n\n\n\n\nvar _util = require('./util');\n\n class StopState {\n  \n  constructor(stop) {\n    this.stop = stop;\n  }\n} exports.StopState = StopState;\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n function parseExpression(noIn = false) {\n  parseMaybeAssign(noIn);\n  if (_index3.match.call(void 0, _types3.TokenType.comma)) {\n    while (_index3.eat.call(void 0, _types3.TokenType.comma)) {\n      parseMaybeAssign(noIn);\n    }\n  }\n} exports.parseExpression = parseExpression;\n\n/**\n * noIn is used when parsing a for loop so that we don't interpret a following \"in\" as the binary\n * operatior.\n * isWithinParens is used to indicate that we're parsing something that might be a comma expression\n * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).\n * In these cases, we should allow : and ?: after the initial \"left\" part.\n */\n function parseMaybeAssign(noIn = false, isWithinParens = false) {\n  if (_base.isTypeScriptEnabled) {\n    return _typescript.tsParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  } else if (_base.isFlowEnabled) {\n    return _flow.flowParseMaybeAssign.call(void 0, noIn, isWithinParens);\n  } else {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n} exports.parseMaybeAssign = parseMaybeAssign;\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n// Returns true if the expression was an arrow function.\n function baseParseMaybeAssign(noIn, isWithinParens) {\n  if (_index3.match.call(void 0, _types3.TokenType._yield)) {\n    parseYield();\n    return false;\n  }\n\n  if (_index3.match.call(void 0, _types3.TokenType.parenL) || _index3.match.call(void 0, _types3.TokenType.name) || _index3.match.call(void 0, _types3.TokenType._yield)) {\n    _base.state.potentialArrowAt = _base.state.start;\n  }\n\n  const wasArrow = parseMaybeConditional(noIn);\n  if (isWithinParens) {\n    parseParenItem();\n  }\n  if (_base.state.type & _types3.TokenType.IS_ASSIGN) {\n    _index3.next.call(void 0, );\n    parseMaybeAssign(noIn);\n    return false;\n  }\n  return wasArrow;\n} exports.baseParseMaybeAssign = baseParseMaybeAssign;\n\n// Parse a ternary conditional (`?:`) operator.\n// Returns true if the expression was an arrow function.\nfunction parseMaybeConditional(noIn) {\n  const wasArrow = parseExprOps(noIn);\n  if (wasArrow) {\n    return true;\n  }\n  parseConditional(noIn);\n  return false;\n}\n\nfunction parseConditional(noIn) {\n  if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {\n    _types.typedParseConditional.call(void 0, noIn);\n  } else {\n    baseParseConditional(noIn);\n  }\n}\n\n function baseParseConditional(noIn) {\n  if (_index3.eat.call(void 0, _types3.TokenType.question)) {\n    parseMaybeAssign();\n    _util.expect.call(void 0, _types3.TokenType.colon);\n    parseMaybeAssign(noIn);\n  }\n} exports.baseParseConditional = baseParseConditional;\n\n// Start the precedence parser.\n// Returns true if this was an arrow function\nfunction parseExprOps(noIn) {\n  const startTokenIndex = _base.state.tokens.length;\n  const wasArrow = parseMaybeUnary();\n  if (wasArrow) {\n    return true;\n  }\n  parseExprOp(startTokenIndex, -1, noIn);\n  return false;\n}\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\nfunction parseExprOp(startTokenIndex, minPrec, noIn) {\n  if (\n    _base.isTypeScriptEnabled &&\n    (_types3.TokenType._in & _types3.TokenType.PRECEDENCE_MASK) > minPrec &&\n    !_util.hasPrecedingLineBreak.call(void 0, ) &&\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)\n  ) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType._as;\n    const oldIsType = _index3.pushTypeContext.call(void 0, 1);\n    _typescript.tsParseType.call(void 0, );\n    _index3.popTypeContext.call(void 0, oldIsType);\n    parseExprOp(startTokenIndex, minPrec, noIn);\n    return;\n  }\n\n  const prec = _base.state.type & _types3.TokenType.PRECEDENCE_MASK;\n  if (prec > 0 && (!noIn || !_index3.match.call(void 0, _types3.TokenType._in))) {\n    if (prec > minPrec) {\n      const op = _base.state.type;\n      _index3.next.call(void 0, );\n      if (op === _types3.TokenType.nullishCoalescing) {\n        _base.state.tokens[_base.state.tokens.length - 1].nullishStartIndex = startTokenIndex;\n      }\n\n      const rhsStartTokenIndex = _base.state.tokens.length;\n      parseMaybeUnary();\n      // Extend the right operand of this operator if possible.\n      parseExprOp(rhsStartTokenIndex, op & _types3.TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);\n      if (op === _types3.TokenType.nullishCoalescing) {\n        _base.state.tokens[startTokenIndex].numNullishCoalesceStarts++;\n        _base.state.tokens[_base.state.tokens.length - 1].numNullishCoalesceEnds++;\n      }\n      // Continue with any future operator holding this expression as the left operand.\n      parseExprOp(startTokenIndex, minPrec, noIn);\n    }\n  }\n}\n\n// Parse unary operators, both prefix and postfix.\n// Returns true if this was an arrow function.\n function parseMaybeUnary() {\n  if (_base.isTypeScriptEnabled && !_base.isJSXEnabled && _index3.eat.call(void 0, _types3.TokenType.lessThan)) {\n    _typescript.tsParseTypeAssertion.call(void 0, );\n    return false;\n  }\n  if (\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._module) &&\n    _index3.lookaheadCharCode.call(void 0, ) === _charcodes.charCodes.leftCurlyBrace &&\n    !_util.hasFollowingLineBreak.call(void 0, )\n  ) {\n    parseModuleExpression();\n    return false;\n  }\n  if (_base.state.type & _types3.TokenType.IS_PREFIX) {\n    _index3.next.call(void 0, );\n    parseMaybeUnary();\n    return false;\n  }\n\n  const wasArrow = parseExprSubscripts();\n  if (wasArrow) {\n    return true;\n  }\n  while (_base.state.type & _types3.TokenType.IS_POSTFIX && !_util.canInsertSemicolon.call(void 0, )) {\n    // The tokenizer calls everything a preincrement, so make it a postincrement when\n    // we see it in that context.\n    if (_base.state.type === _types3.TokenType.preIncDec) {\n      _base.state.type = _types3.TokenType.postIncDec;\n    }\n    _index3.next.call(void 0, );\n  }\n  return false;\n} exports.parseMaybeUnary = parseMaybeUnary;\n\n// Parse call, dot, and `[]`-subscript expressions.\n// Returns true if this was an arrow function.\n function parseExprSubscripts() {\n  const startTokenIndex = _base.state.tokens.length;\n  const wasArrow = parseExprAtom();\n  if (wasArrow) {\n    return true;\n  }\n  parseSubscripts(startTokenIndex);\n  // If there was any optional chain operation, the start token would be marked\n  // as such, so also mark the end now.\n  if (_base.state.tokens.length > startTokenIndex && _base.state.tokens[startTokenIndex].isOptionalChainStart) {\n    _base.state.tokens[_base.state.tokens.length - 1].isOptionalChainEnd = true;\n  }\n  return false;\n} exports.parseExprSubscripts = parseExprSubscripts;\n\nfunction parseSubscripts(startTokenIndex, noCalls = false) {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseSubscripts.call(void 0, startTokenIndex, noCalls);\n  } else {\n    baseParseSubscripts(startTokenIndex, noCalls);\n  }\n}\n\n function baseParseSubscripts(startTokenIndex, noCalls = false) {\n  const stopState = new StopState(false);\n  do {\n    parseSubscript(startTokenIndex, noCalls, stopState);\n  } while (!stopState.stop && !_base.state.error);\n} exports.baseParseSubscripts = baseParseSubscripts;\n\nfunction parseSubscript(startTokenIndex, noCalls, stopState) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);\n  } else {\n    baseParseSubscript(startTokenIndex, noCalls, stopState);\n  }\n}\n\n/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */\n function baseParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!noCalls && _index3.eat.call(void 0, _types3.TokenType.doubleColon)) {\n    parseNoCallExpr();\n    stopState.stop = true;\n    // Propagate startTokenIndex so that `a::b?.()` will keep `a` as the first token. We may want\n    // to revisit this in the future when fully supporting bind syntax.\n    parseSubscripts(startTokenIndex, noCalls);\n  } else if (_index3.match.call(void 0, _types3.TokenType.questionDot)) {\n    _base.state.tokens[startTokenIndex].isOptionalChainStart = true;\n    if (noCalls && _index3.lookaheadType.call(void 0, ) === _types3.TokenType.parenL) {\n      stopState.stop = true;\n      return;\n    }\n    _index3.next.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n      parseExpression();\n      _util.expect.call(void 0, _types3.TokenType.bracketR);\n    } else if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {\n      parseCallExpressionArguments();\n    } else {\n      parseMaybePrivateName();\n    }\n  } else if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseMaybePrivateName();\n  } else if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n    _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseExpression();\n    _util.expect.call(void 0, _types3.TokenType.bracketR);\n  } else if (!noCalls && _index3.match.call(void 0, _types3.TokenType.parenL)) {\n    if (atPossibleAsync()) {\n      // We see \"async\", but it's possible it's a usage of the name \"async\". Parse as if it's a\n      // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.\n      const snapshot = _base.state.snapshot();\n      const asyncStartTokenIndex = _base.state.tokens.length;\n      _index3.next.call(void 0, );\n      _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n      const callContextId = _base.getNextContextId.call(void 0, );\n\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n\n      if (shouldParseAsyncArrow()) {\n        // We hit an arrow, so backtrack and start again parsing function parameters.\n        _base.state.restoreFromSnapshot(snapshot);\n        stopState.stop = true;\n        _base.state.scopeDepth++;\n\n        _statement.parseFunctionParams.call(void 0, );\n        parseAsyncArrowFromCallExpression(asyncStartTokenIndex);\n      }\n    } else {\n      _index3.next.call(void 0, );\n      _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      const callContextId = _base.getNextContextId.call(void 0, );\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;\n    }\n  } else if (_index3.match.call(void 0, _types3.TokenType.backQuote)) {\n    // Tagged template expression.\n    parseTemplate();\n  } else {\n    stopState.stop = true;\n  }\n} exports.baseParseSubscript = baseParseSubscript;\n\n function atPossibleAsync() {\n  // This was made less strict than the original version to avoid passing around nodes, but it\n  // should be safe to have rare false positives here.\n  return (\n    _base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async &&\n    !_util.canInsertSemicolon.call(void 0, )\n  );\n} exports.atPossibleAsync = atPossibleAsync;\n\n function parseCallExpressionArguments() {\n  let first = true;\n  while (!_index3.eat.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, _types3.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    parseExprListItem(false);\n  }\n} exports.parseCallExpressionArguments = parseCallExpressionArguments;\n\nfunction shouldParseAsyncArrow() {\n  return _index3.match.call(void 0, _types3.TokenType.colon) || _index3.match.call(void 0, _types3.TokenType.arrow);\n}\n\nfunction parseAsyncArrowFromCallExpression(startTokenIndex) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseAsyncArrowFromCallExpression.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseAsyncArrowFromCallExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types3.TokenType.arrow);\n  parseArrowExpression(startTokenIndex);\n}\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\nfunction parseNoCallExpr() {\n  const startTokenIndex = _base.state.tokens.length;\n  parseExprAtom();\n  parseSubscripts(startTokenIndex, true);\n}\n\n// Parse an atomic expression \u2014 either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n// Returns true if the parsed expression was an arrow function.\n function parseExprAtom() {\n  if (_index3.eat.call(void 0, _types3.TokenType.modulo)) {\n    // V8 intrinsic expression. Just parse the identifier, and the function invocation is parsed\n    // naturally.\n    parseIdentifier();\n    return false;\n  }\n\n  if (_index3.match.call(void 0, _types3.TokenType.jsxText)) {\n    parseLiteral();\n    return false;\n  } else if (_index3.match.call(void 0, _types3.TokenType.lessThan) && _base.isJSXEnabled) {\n    _base.state.type = _types3.TokenType.jsxTagStart;\n    _index.jsxParseElement.call(void 0, );\n    _index3.next.call(void 0, );\n    return false;\n  }\n\n  const canBeArrow = _base.state.potentialArrowAt === _base.state.start;\n  switch (_base.state.type) {\n    case _types3.TokenType.slash:\n    case _types3.TokenType.assign:\n      _index3.retokenizeSlashAsRegex.call(void 0, );\n    // Fall through.\n\n    case _types3.TokenType._super:\n    case _types3.TokenType._this:\n    case _types3.TokenType.regexp:\n    case _types3.TokenType.num:\n    case _types3.TokenType.bigint:\n    case _types3.TokenType.decimal:\n    case _types3.TokenType.string:\n    case _types3.TokenType._null:\n    case _types3.TokenType._true:\n    case _types3.TokenType._false:\n      _index3.next.call(void 0, );\n      return false;\n\n    case _types3.TokenType._import:\n      _index3.next.call(void 0, );\n      if (_index3.match.call(void 0, _types3.TokenType.dot)) {\n        // import.meta\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType.name;\n        _index3.next.call(void 0, );\n        parseIdentifier();\n      }\n      return false;\n\n    case _types3.TokenType.name: {\n      const startTokenIndex = _base.state.tokens.length;\n      const functionStart = _base.state.start;\n      const contextualKeyword = _base.state.contextualKeyword;\n      parseIdentifier();\n      if (contextualKeyword === _keywords.ContextualKeyword._await) {\n        parseAwait();\n        return false;\n      } else if (\n        contextualKeyword === _keywords.ContextualKeyword._async &&\n        _index3.match.call(void 0, _types3.TokenType._function) &&\n        !_util.canInsertSemicolon.call(void 0, )\n      ) {\n        _index3.next.call(void 0, );\n        _statement.parseFunction.call(void 0, functionStart, false);\n        return false;\n      } else if (\n        canBeArrow &&\n        contextualKeyword === _keywords.ContextualKeyword._async &&\n        !_util.canInsertSemicolon.call(void 0, ) &&\n        _index3.match.call(void 0, _types3.TokenType.name)\n      ) {\n        _base.state.scopeDepth++;\n        _lval.parseBindingIdentifier.call(void 0, false);\n        _util.expect.call(void 0, _types3.TokenType.arrow);\n        // let foo = async bar => {};\n        parseArrowExpression(startTokenIndex);\n        return true;\n      } else if (_index3.match.call(void 0, _types3.TokenType._do) && !_util.canInsertSemicolon.call(void 0, )) {\n        _index3.next.call(void 0, );\n        _statement.parseBlock.call(void 0, );\n        return false;\n      }\n\n      if (canBeArrow && !_util.canInsertSemicolon.call(void 0, ) && _index3.match.call(void 0, _types3.TokenType.arrow)) {\n        _base.state.scopeDepth++;\n        _lval.markPriorBindingIdentifier.call(void 0, false);\n        _util.expect.call(void 0, _types3.TokenType.arrow);\n        parseArrowExpression(startTokenIndex);\n        return true;\n      }\n\n      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.Access;\n      return false;\n    }\n\n    case _types3.TokenType._do: {\n      _index3.next.call(void 0, );\n      _statement.parseBlock.call(void 0, );\n      return false;\n    }\n\n    case _types3.TokenType.parenL: {\n      const wasArrow = parseParenAndDistinguishExpression(canBeArrow);\n      return wasArrow;\n    }\n\n    case _types3.TokenType.bracketL:\n      _index3.next.call(void 0, );\n      parseExprList(_types3.TokenType.bracketR, true);\n      return false;\n\n    case _types3.TokenType.braceL:\n      parseObj(false, false);\n      return false;\n\n    case _types3.TokenType._function:\n      parseFunctionExpression();\n      return false;\n\n    case _types3.TokenType.at:\n      _statement.parseDecorators.call(void 0, );\n    // Fall through.\n\n    case _types3.TokenType._class:\n      _statement.parseClass.call(void 0, false);\n      return false;\n\n    case _types3.TokenType._new:\n      parseNew();\n      return false;\n\n    case _types3.TokenType.backQuote:\n      parseTemplate();\n      return false;\n\n    case _types3.TokenType.doubleColon: {\n      _index3.next.call(void 0, );\n      parseNoCallExpr();\n      return false;\n    }\n\n    case _types3.TokenType.hash: {\n      const code = _index3.lookaheadCharCode.call(void 0, );\n      if (_identifier.IS_IDENTIFIER_START[code] || code === _charcodes.charCodes.backslash) {\n        parseMaybePrivateName();\n      } else {\n        _index3.next.call(void 0, );\n      }\n      // Smart pipeline topic reference.\n      return false;\n    }\n\n    default:\n      _util.unexpected.call(void 0, );\n      return false;\n  }\n} exports.parseExprAtom = parseExprAtom;\n\nfunction parseMaybePrivateName() {\n  _index3.eat.call(void 0, _types3.TokenType.hash);\n  parseIdentifier();\n}\n\nfunction parseFunctionExpression() {\n  const functionStart = _base.state.start;\n  parseIdentifier();\n  if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    // function.sent\n    parseIdentifier();\n  }\n  _statement.parseFunction.call(void 0, functionStart, false);\n}\n\n function parseLiteral() {\n  _index3.next.call(void 0, );\n} exports.parseLiteral = parseLiteral;\n\n function parseParenExpression() {\n  _util.expect.call(void 0, _types3.TokenType.parenL);\n  parseExpression();\n  _util.expect.call(void 0, _types3.TokenType.parenR);\n} exports.parseParenExpression = parseParenExpression;\n\n// Returns true if this was an arrow expression.\nfunction parseParenAndDistinguishExpression(canBeArrow) {\n  // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and\n  // start over as a parameter list.\n  const snapshot = _base.state.snapshot();\n\n  const startTokenIndex = _base.state.tokens.length;\n  _util.expect.call(void 0, _types3.TokenType.parenL);\n\n  let first = true;\n\n  while (!_index3.match.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.match.call(void 0, _types3.TokenType.parenR)) {\n        break;\n      }\n    }\n\n    if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n      _lval.parseRest.call(void 0, false /* isBlockScope */);\n      parseParenItem();\n      break;\n    } else {\n      parseMaybeAssign(false, true);\n    }\n  }\n\n  _util.expect.call(void 0, _types3.TokenType.parenR);\n\n  if (canBeArrow && shouldParseArrow()) {\n    const wasArrow = parseArrow();\n    if (wasArrow) {\n      // It was an arrow function this whole time, so start over and parse it as params so that we\n      // get proper token annotations.\n      _base.state.restoreFromSnapshot(snapshot);\n      _base.state.scopeDepth++;\n      // Don't specify a context ID because arrow functions don't need a context ID.\n      _statement.parseFunctionParams.call(void 0, );\n      parseArrow();\n      parseArrowExpression(startTokenIndex);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction shouldParseArrow() {\n  return _index3.match.call(void 0, _types3.TokenType.colon) || !_util.canInsertSemicolon.call(void 0, );\n}\n\n// Returns whether there was an arrow token.\n function parseArrow() {\n  if (_base.isTypeScriptEnabled) {\n    return _typescript.tsParseArrow.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    return _flow.flowParseArrow.call(void 0, );\n  } else {\n    return _index3.eat.call(void 0, _types3.TokenType.arrow);\n  }\n} exports.parseArrow = parseArrow;\n\nfunction parseParenItem() {\n  if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {\n    _types.typedParseParenItem.call(void 0, );\n  }\n}\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call \u2014 at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nfunction parseNew() {\n  _util.expect.call(void 0, _types3.TokenType._new);\n  if (_index3.eat.call(void 0, _types3.TokenType.dot)) {\n    // new.target\n    parseIdentifier();\n    return;\n  }\n  parseNoCallExpr();\n  _index3.eat.call(void 0, _types3.TokenType.questionDot);\n  parseNewArguments();\n}\n\nfunction parseNewArguments() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseNewArguments.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseNewArguments.call(void 0, );\n  }\n  if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {\n    parseExprList(_types3.TokenType.parenR);\n  }\n}\n\n function parseTemplate() {\n  // Finish `, read quasi\n  _index3.nextTemplateToken.call(void 0, );\n  // Finish quasi, read ${\n  _index3.nextTemplateToken.call(void 0, );\n  while (!_index3.match.call(void 0, _types3.TokenType.backQuote) && !_base.state.error) {\n    _util.expect.call(void 0, _types3.TokenType.dollarBraceL);\n    parseExpression();\n    // Finish }, read quasi\n    _index3.nextTemplateToken.call(void 0, );\n    // Finish quasi, read either ${ or `\n    _index3.nextTemplateToken.call(void 0, );\n  }\n  _index3.next.call(void 0, );\n} exports.parseTemplate = parseTemplate;\n\n// Parse an object literal or binding pattern.\n function parseObj(isPattern, isBlockScope) {\n  // Attach a context ID to the object open and close brace and each object key.\n  const contextId = _base.getNextContextId.call(void 0, );\n  let first = true;\n\n  _index3.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n\n  while (!_index3.eat.call(void 0, _types3.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    let isGenerator = false;\n    if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n      const previousIndex = _base.state.tokens.length;\n      _lval.parseSpread.call(void 0, );\n      if (isPattern) {\n        // Mark role when the only thing being spread over is an identifier.\n        if (_base.state.tokens.length === previousIndex + 2) {\n          _lval.markPriorBindingIdentifier.call(void 0, isBlockScope);\n        }\n        if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {\n          break;\n        }\n      }\n      continue;\n    }\n\n    if (!isPattern) {\n      isGenerator = _index3.eat.call(void 0, _types3.TokenType.star);\n    }\n\n    if (!isPattern && _util.isContextual.call(void 0, _keywords.ContextualKeyword._async)) {\n      if (isGenerator) _util.unexpected.call(void 0, );\n\n      parseIdentifier();\n      if (\n        _index3.match.call(void 0, _types3.TokenType.colon) ||\n        _index3.match.call(void 0, _types3.TokenType.parenL) ||\n        _index3.match.call(void 0, _types3.TokenType.braceR) ||\n        _index3.match.call(void 0, _types3.TokenType.eq) ||\n        _index3.match.call(void 0, _types3.TokenType.comma)\n      ) {\n        // This is a key called \"async\" rather than an async function.\n      } else {\n        if (_index3.match.call(void 0, _types3.TokenType.star)) {\n          _index3.next.call(void 0, );\n          isGenerator = true;\n        }\n        parsePropertyName(contextId);\n      }\n    } else {\n      parsePropertyName(contextId);\n    }\n\n    parseObjPropValue(isPattern, isBlockScope, contextId);\n  }\n\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n} exports.parseObj = parseObj;\n\nfunction isGetterOrSetterMethod(isPattern) {\n  // We go off of the next and don't bother checking if the node key is actually \"get\" or \"set\".\n  // This lets us avoid generating a node, and should only make the validation worse.\n  return (\n    !isPattern &&\n    (_index3.match.call(void 0, _types3.TokenType.string) || // get \"string\"() {}\n      _index3.match.call(void 0, _types3.TokenType.num) || // get 1() {}\n      _index3.match.call(void 0, _types3.TokenType.bracketL) || // get [\"string\"]() {}\n      _index3.match.call(void 0, _types3.TokenType.name) || // get foo() {}\n      !!(_base.state.type & _types3.TokenType.IS_KEYWORD)) // get debugger() {}\n  );\n}\n\n// Returns true if this was a method.\nfunction parseObjectMethod(isPattern, objectContextId) {\n  // We don't need to worry about modifiers because object methods can't have optional bodies, so\n  // the start will never be used.\n  const functionStart = _base.state.start;\n  if (_index3.match.call(void 0, _types3.TokenType.parenL)) {\n    if (isPattern) _util.unexpected.call(void 0, );\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n\n  if (isGetterOrSetterMethod(isPattern)) {\n    parsePropertyName(objectContextId);\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n  return false;\n}\n\nfunction parseObjectProperty(isPattern, isBlockScope) {\n  if (_index3.eat.call(void 0, _types3.TokenType.colon)) {\n    if (isPattern) {\n      _lval.parseMaybeDefault.call(void 0, isBlockScope);\n    } else {\n      parseMaybeAssign(false);\n    }\n    return;\n  }\n\n  // Since there's no colon, we assume this is an object shorthand.\n\n  // If we're in a destructuring, we've now discovered that the key was actually an assignee, so\n  // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to\n  // transform it on access, so mark it as a normal object shorthand.\n  let identifierRole;\n  if (isPattern) {\n    if (_base.state.scopeDepth === 0) {\n      identifierRole = _index3.IdentifierRole.ObjectShorthandTopLevelDeclaration;\n    } else if (isBlockScope) {\n      identifierRole = _index3.IdentifierRole.ObjectShorthandBlockScopedDeclaration;\n    } else {\n      identifierRole = _index3.IdentifierRole.ObjectShorthandFunctionScopedDeclaration;\n    }\n  } else {\n    identifierRole = _index3.IdentifierRole.ObjectShorthand;\n  }\n  _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;\n\n  // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow\n  // parsing as if there's a default value.\n  _lval.parseMaybeDefault.call(void 0, isBlockScope, true);\n}\n\nfunction parseObjPropValue(\n  isPattern,\n  isBlockScope,\n  objectContextId,\n) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseObjPropValue.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseObjPropValue.call(void 0, );\n  }\n  const wasMethod = parseObjectMethod(isPattern, objectContextId);\n  if (!wasMethod) {\n    parseObjectProperty(isPattern, isBlockScope);\n  }\n}\n\n function parsePropertyName(objectContextId) {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseVariance.call(void 0, );\n  }\n  if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n    parseMaybeAssign();\n    _util.expect.call(void 0, _types3.TokenType.bracketR);\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n  } else {\n    if (_index3.match.call(void 0, _types3.TokenType.num) || _index3.match.call(void 0, _types3.TokenType.string) || _index3.match.call(void 0, _types3.TokenType.bigint) || _index3.match.call(void 0, _types3.TokenType.decimal)) {\n      parseExprAtom();\n    } else {\n      parseMaybePrivateName();\n    }\n\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.ObjectKey;\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;\n  }\n} exports.parsePropertyName = parsePropertyName;\n\n// Parse object or class method.\n function parseMethod(functionStart, isConstructor) {\n  const funcContextId = _base.getNextContextId.call(void 0, );\n\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  const allowModifiers = isConstructor; // For TypeScript parameter properties\n  _statement.parseFunctionParams.call(void 0, allowModifiers, funcContextId);\n  parseFunctionBodyAndFinish(functionStart, funcContextId);\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n} exports.parseMethod = parseMethod;\n\n// Parse arrow function expression.\n// If the parameters are provided, they will be converted to an\n// assignable list.\n function parseArrowExpression(startTokenIndex) {\n  parseFunctionBody(true);\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n} exports.parseArrowExpression = parseArrowExpression;\n\n function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseFunctionBodyAndFinish.call(void 0, functionStart, funcContextId);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseFunctionBodyAndFinish.call(void 0, funcContextId);\n  } else {\n    parseFunctionBody(false, funcContextId);\n  }\n} exports.parseFunctionBodyAndFinish = parseFunctionBodyAndFinish;\n\n function parseFunctionBody(allowExpression, funcContextId = 0) {\n  const isExpression = allowExpression && !_index3.match.call(void 0, _types3.TokenType.braceL);\n\n  if (isExpression) {\n    parseMaybeAssign();\n  } else {\n    _statement.parseBlock.call(void 0, true /* isFunctionScope */, funcContextId);\n  }\n} exports.parseFunctionBody = parseFunctionBody;\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\nfunction parseExprList(close, allowEmpty = false) {\n  let first = true;\n  while (!_index3.eat.call(void 0, close) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types3.TokenType.comma);\n      if (_index3.eat.call(void 0, close)) break;\n    }\n    parseExprListItem(allowEmpty);\n  }\n}\n\nfunction parseExprListItem(allowEmpty) {\n  if (allowEmpty && _index3.match.call(void 0, _types3.TokenType.comma)) {\n    // Empty item; nothing more to parse for this item.\n  } else if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {\n    _lval.parseSpread.call(void 0, );\n    parseParenItem();\n  } else if (_index3.match.call(void 0, _types3.TokenType.question)) {\n    // Partial function application proposal.\n    _index3.next.call(void 0, );\n  } else {\n    parseMaybeAssign(false, true);\n  }\n}\n\n// Parse the next token as an identifier.\n function parseIdentifier() {\n  _index3.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType.name;\n} exports.parseIdentifier = parseIdentifier;\n\n// Parses await expression inside async function.\nfunction parseAwait() {\n  parseMaybeUnary();\n}\n\n// Parses yield expression inside generator.\nfunction parseYield() {\n  _index3.next.call(void 0, );\n  if (!_index3.match.call(void 0, _types3.TokenType.semi) && !_util.canInsertSemicolon.call(void 0, )) {\n    _index3.eat.call(void 0, _types3.TokenType.star);\n    parseMaybeAssign();\n  }\n}\n\n// https://github.com/tc39/proposal-js-module-blocks\nfunction parseModuleExpression() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._module);\n  _util.expect.call(void 0, _types3.TokenType.braceL);\n  // For now, just call parseBlockBody to parse the block. In the future when we\n  // implement full support, we'll want to emit scopes and possibly other\n  // information.\n  _statement.parseBlockBody.call(void 0, _types3.TokenType.braceR);\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\n\n\n\n\n\n\n\n\n\nvar _index = require('../tokenizer/index');\nvar _keywords = require('../tokenizer/keywords');\nvar _types = require('../tokenizer/types');\nvar _base = require('../traverser/base');\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = require('../traverser/expression');\n\n\n\n\n\n\n\n\nvar _statement = require('../traverser/statement');\n\n\n\n\n\n\n\n\n\nvar _util = require('../traverser/util');\n\nfunction isMaybeDefaultImport(lookahead) {\n  return (\n    (lookahead.type === _types.TokenType.name || !!(lookahead.type & _types.TokenType.IS_KEYWORD)) &&\n    lookahead.contextualKeyword !== _keywords.ContextualKeyword._from\n  );\n}\n\nfunction flowParseTypeInitialiser(tok) {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, tok || _types.TokenType.colon);\n  flowParseType();\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParsePredicate() {\n  _util.expect.call(void 0, _types.TokenType.modulo);\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._checks);\n  if (_index.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseExpression.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.parenR);\n  }\n}\n\nfunction flowParseTypeAndPredicateInitialiser() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.colon);\n  if (_index.match.call(void 0, _types.TokenType.modulo)) {\n    flowParsePredicate();\n  } else {\n    flowParseType();\n    if (_index.match.call(void 0, _types.TokenType.modulo)) {\n      flowParsePredicate();\n    }\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParseDeclareClass() {\n  _index.next.call(void 0, );\n  flowParseInterfaceish(/* isClass */ true);\n}\n\nfunction flowParseDeclareFunction() {\n  _index.next.call(void 0, );\n  _expression.parseIdentifier.call(void 0, );\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  flowParseFunctionTypeParams();\n  _util.expect.call(void 0, _types.TokenType.parenR);\n\n  flowParseTypeAndPredicateInitialiser();\n\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclare() {\n  if (_index.match.call(void 0, _types.TokenType._class)) {\n    flowParseDeclareClass();\n  } else if (_index.match.call(void 0, _types.TokenType._function)) {\n    flowParseDeclareFunction();\n  } else if (_index.match.call(void 0, _types.TokenType._var)) {\n    flowParseDeclareVariable();\n  } else if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._module)) {\n    if (_index.eat.call(void 0, _types.TokenType.dot)) {\n      flowParseDeclareModuleExports();\n    } else {\n      flowParseDeclareModule();\n    }\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    flowParseDeclareTypeAlias();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {\n    flowParseDeclareOpaqueType();\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    flowParseDeclareInterface();\n  } else if (_index.match.call(void 0, _types.TokenType._export)) {\n    flowParseDeclareExportDeclaration();\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseDeclareVariable() {\n  _index.next.call(void 0, );\n  flowParseTypeAnnotatableIdentifier();\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclareModule() {\n  if (_index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_index.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_index.match.call(void 0, _types.TokenType._import)) {\n      _index.next.call(void 0, );\n      _statement.parseImport.call(void 0, );\n    } else {\n      _util.unexpected.call(void 0, );\n    }\n  }\n  _util.expect.call(void 0, _types.TokenType.braceR);\n}\n\nfunction flowParseDeclareExportDeclaration() {\n  _util.expect.call(void 0, _types.TokenType._export);\n\n  if (_index.eat.call(void 0, _types.TokenType._default)) {\n    if (_index.match.call(void 0, _types.TokenType._function) || _index.match.call(void 0, _types.TokenType._class)) {\n      // declare export default class ...\n      // declare export default function ...\n      flowParseDeclare();\n    } else {\n      // declare export default [type];\n      flowParseType();\n      _util.semicolon.call(void 0, );\n    }\n  } else if (\n    _index.match.call(void 0, _types.TokenType._var) || // declare export var ...\n    _index.match.call(void 0, _types.TokenType._function) || // declare export function ...\n    _index.match.call(void 0, _types.TokenType._class) || // declare export class ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque) // declare export opaque ..\n  ) {\n    flowParseDeclare();\n  } else if (\n    _index.match.call(void 0, _types.TokenType.star) || // declare export * from ''\n    _index.match.call(void 0, _types.TokenType.braceL) || // declare export {} ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) || // declare export interface ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) || // declare export type ...\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque) // declare export opaque type ...\n  ) {\n    _statement.parseExport.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseDeclareModuleExports() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._exports);\n  flowParseTypeAnnotation();\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseDeclareTypeAlias() {\n  _index.next.call(void 0, );\n  flowParseTypeAlias();\n}\n\nfunction flowParseDeclareOpaqueType() {\n  _index.next.call(void 0, );\n  flowParseOpaqueType(true);\n}\n\nfunction flowParseDeclareInterface() {\n  _index.next.call(void 0, );\n  flowParseInterfaceish();\n}\n\n// Interfaces\n\nfunction flowParseInterfaceish(isClass = false) {\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (!isClass && _index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._mixins)) {\n    _index.next.call(void 0, );\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    _index.next.call(void 0, );\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n\n  flowParseObjectType(isClass, false, isClass);\n}\n\nfunction flowParseInterfaceExtends() {\n  flowParseQualifiedTypeIdentifier(false);\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseInterface() {\n  flowParseInterfaceish();\n}\n\nfunction flowParseRestrictedIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n}\n\nfunction flowParseTypeAlias() {\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  flowParseTypeInitialiser(_types.TokenType.eq);\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseOpaqueType(declare) {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);\n  flowParseRestrictedIdentifier();\n\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  // Parse the supertype\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeInitialiser(_types.TokenType.colon);\n  }\n\n  if (!declare) {\n    flowParseTypeInitialiser(_types.TokenType.eq);\n  }\n  _util.semicolon.call(void 0, );\n}\n\nfunction flowParseTypeParameter() {\n  flowParseVariance();\n  flowParseTypeAnnotatableIdentifier();\n\n  if (_index.eat.call(void 0, _types.TokenType.eq)) {\n    flowParseType();\n  }\n}\n\n function flowParseTypeParameterDeclaration() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {\n    _index.next.call(void 0, );\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n\n  do {\n    flowParseTypeParameter();\n    if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  } while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error);\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.flowParseTypeParameterDeclaration = flowParseTypeParameterDeclaration;\n\nfunction flowParseTypeParameterInstantiation() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _util.expect.call(void 0, _types.TokenType.lessThan);\n  while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {\n    flowParseType();\n    if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n  _util.expect.call(void 0, _types.TokenType.greaterThan);\n  _index.popTypeContext.call(void 0, oldIsType);\n}\n\nfunction flowParseInterfaceType() {\n  _util.expectContextual.call(void 0, _keywords.ContextualKeyword._interface);\n  if (_index.eat.call(void 0, _types.TokenType._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n  }\n  flowParseObjectType(false, false, false);\n}\n\nfunction flowParseObjectPropertyKey() {\n  if (_index.match.call(void 0, _types.TokenType.num) || _index.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction flowParseObjectTypeIndexer() {\n  // Note: bracketL has already been consumed\n  if (_index.lookaheadType.call(void 0, ) === _types.TokenType.colon) {\n    flowParseObjectPropertyKey();\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeInternalSlot() {\n  // Note: both bracketL have already been consumed\n  flowParseObjectPropertyKey();\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n  if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {\n    flowParseObjectTypeMethodish();\n  } else {\n    _index.eat.call(void 0, _types.TokenType.question);\n    flowParseTypeInitialiser();\n  }\n}\n\nfunction flowParseObjectTypeMethodish() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {\n    flowParseFunctionTypeParam();\n    if (!_index.match.call(void 0, _types.TokenType.parenR)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeCallProperty() {\n  flowParseObjectTypeMethodish();\n}\n\nfunction flowParseObjectType(allowStatic, allowExact, allowProto) {\n  let endDelim;\n  if (allowExact && _index.match.call(void 0, _types.TokenType.braceBarL)) {\n    _util.expect.call(void 0, _types.TokenType.braceBarL);\n    endDelim = _types.TokenType.braceBarR;\n  } else {\n    _util.expect.call(void 0, _types.TokenType.braceL);\n    endDelim = _types.TokenType.braceR;\n  }\n\n  while (!_index.match.call(void 0, endDelim) && !_base.state.error) {\n    if (allowProto && _util.isContextual.call(void 0, _keywords.ContextualKeyword._proto)) {\n      const lookahead = _index.lookaheadType.call(void 0, );\n      if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {\n        _index.next.call(void 0, );\n        allowStatic = false;\n      }\n    }\n    if (allowStatic && _util.isContextual.call(void 0, _keywords.ContextualKeyword._static)) {\n      const lookahead = _index.lookaheadType.call(void 0, );\n      if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {\n        _index.next.call(void 0, );\n      }\n    }\n\n    flowParseVariance();\n\n    if (_index.eat.call(void 0, _types.TokenType.bracketL)) {\n      if (_index.eat.call(void 0, _types.TokenType.bracketL)) {\n        flowParseObjectTypeInternalSlot();\n      } else {\n        flowParseObjectTypeIndexer();\n      }\n    } else if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {\n      flowParseObjectTypeCallProperty();\n    } else {\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._get) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._set)) {\n        const lookahead = _index.lookaheadType.call(void 0, );\n        if (lookahead === _types.TokenType.name || lookahead === _types.TokenType.string || lookahead === _types.TokenType.num) {\n          _index.next.call(void 0, );\n        }\n      }\n\n      flowParseObjectTypeProperty();\n    }\n\n    flowObjectTypeSemicolon();\n  }\n\n  _util.expect.call(void 0, endDelim);\n}\n\nfunction flowParseObjectTypeProperty() {\n  if (_index.match.call(void 0, _types.TokenType.ellipsis)) {\n    _util.expect.call(void 0, _types.TokenType.ellipsis);\n    if (!_index.eat.call(void 0, _types.TokenType.comma)) {\n      _index.eat.call(void 0, _types.TokenType.semi);\n    }\n    // Explicit inexact object syntax.\n    if (_index.match.call(void 0, _types.TokenType.braceR)) {\n      return;\n    }\n    flowParseType();\n  } else {\n    flowParseObjectPropertyKey();\n    if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {\n      // This is a method property\n      flowParseObjectTypeMethodish();\n    } else {\n      _index.eat.call(void 0, _types.TokenType.question);\n      flowParseTypeInitialiser();\n    }\n  }\n}\n\nfunction flowObjectTypeSemicolon() {\n  if (!_index.eat.call(void 0, _types.TokenType.semi) && !_index.eat.call(void 0, _types.TokenType.comma) && !_index.match.call(void 0, _types.TokenType.braceR) && !_index.match.call(void 0, _types.TokenType.braceBarR)) {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {\n  if (!initialIdAlreadyParsed) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n  while (_index.eat.call(void 0, _types.TokenType.dot)) {\n    _expression.parseIdentifier.call(void 0, );\n  }\n}\n\nfunction flowParseGenericType() {\n  flowParseQualifiedTypeIdentifier(true);\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseTypeofType() {\n  _util.expect.call(void 0, _types.TokenType._typeof);\n  flowParsePrimaryType();\n}\n\nfunction flowParseTupleType() {\n  _util.expect.call(void 0, _types.TokenType.bracketL);\n  // We allow trailing commas\n  while (_base.state.pos < _base.input.length && !_index.match.call(void 0, _types.TokenType.bracketR)) {\n    flowParseType();\n    if (_index.match.call(void 0, _types.TokenType.bracketR)) {\n      break;\n    }\n    _util.expect.call(void 0, _types.TokenType.comma);\n  }\n  _util.expect.call(void 0, _types.TokenType.bracketR);\n}\n\nfunction flowParseFunctionTypeParam() {\n  const lookahead = _index.lookaheadType.call(void 0, );\n  if (lookahead === _types.TokenType.colon || lookahead === _types.TokenType.question) {\n    _expression.parseIdentifier.call(void 0, );\n    _index.eat.call(void 0, _types.TokenType.question);\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n}\n\nfunction flowParseFunctionTypeParams() {\n  while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {\n    flowParseFunctionTypeParam();\n    if (!_index.match.call(void 0, _types.TokenType.parenR)) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n    }\n  }\n  if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n}\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\nfunction flowParsePrimaryType() {\n  let isGroupedType = false;\n  const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n\n  switch (_base.state.type) {\n    case _types.TokenType.name: {\n      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n        flowParseInterfaceType();\n        return;\n      }\n      _expression.parseIdentifier.call(void 0, );\n      flowParseGenericType();\n      return;\n    }\n\n    case _types.TokenType.braceL:\n      flowParseObjectType(false, false, false);\n      return;\n\n    case _types.TokenType.braceBarL:\n      flowParseObjectType(false, true, false);\n      return;\n\n    case _types.TokenType.bracketL:\n      flowParseTupleType();\n      return;\n\n    case _types.TokenType.lessThan:\n      flowParseTypeParameterDeclaration();\n      _util.expect.call(void 0, _types.TokenType.parenL);\n      flowParseFunctionTypeParams();\n      _util.expect.call(void 0, _types.TokenType.parenR);\n      _util.expect.call(void 0, _types.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _types.TokenType.parenL:\n      _index.next.call(void 0, );\n\n      // Check to see if this is actually a grouped type\n      if (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis)) {\n        if (_index.match.call(void 0, _types.TokenType.name)) {\n          const token = _index.lookaheadType.call(void 0, );\n          isGroupedType = token !== _types.TokenType.question && token !== _types.TokenType.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        _base.state.noAnonFunctionType = false;\n        flowParseType();\n        _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (\n          _base.state.noAnonFunctionType ||\n          !(_index.match.call(void 0, _types.TokenType.comma) || (_index.match.call(void 0, _types.TokenType.parenR) && _index.lookaheadType.call(void 0, ) === _types.TokenType.arrow))\n        ) {\n          _util.expect.call(void 0, _types.TokenType.parenR);\n          return;\n        } else {\n          // Eat a comma if there is one\n          _index.eat.call(void 0, _types.TokenType.comma);\n        }\n      }\n\n      flowParseFunctionTypeParams();\n\n      _util.expect.call(void 0, _types.TokenType.parenR);\n      _util.expect.call(void 0, _types.TokenType.arrow);\n      flowParseType();\n      return;\n\n    case _types.TokenType.minus:\n      _index.next.call(void 0, );\n      _expression.parseLiteral.call(void 0, );\n      return;\n\n    case _types.TokenType.string:\n    case _types.TokenType.num:\n    case _types.TokenType._true:\n    case _types.TokenType._false:\n    case _types.TokenType._null:\n    case _types.TokenType._this:\n    case _types.TokenType._void:\n    case _types.TokenType.star:\n      _index.next.call(void 0, );\n      return;\n\n    default:\n      if (_base.state.type === _types.TokenType._typeof) {\n        flowParseTypeofType();\n        return;\n      } else if (_base.state.type & _types.TokenType.IS_KEYWORD) {\n        _index.next.call(void 0, );\n        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;\n        return;\n      }\n  }\n\n  _util.unexpected.call(void 0, );\n}\n\nfunction flowParsePostfixType() {\n  flowParsePrimaryType();\n  while (!_util.canInsertSemicolon.call(void 0, ) && (_index.match.call(void 0, _types.TokenType.bracketL) || _index.match.call(void 0, _types.TokenType.questionDot))) {\n    _index.eat.call(void 0, _types.TokenType.questionDot);\n    _util.expect.call(void 0, _types.TokenType.bracketL);\n    if (_index.eat.call(void 0, _types.TokenType.bracketR)) {\n      // Array type\n    } else {\n      // Indexed access type\n      flowParseType();\n      _util.expect.call(void 0, _types.TokenType.bracketR);\n    }\n  }\n}\n\nfunction flowParsePrefixType() {\n  if (_index.eat.call(void 0, _types.TokenType.question)) {\n    flowParsePrefixType();\n  } else {\n    flowParsePostfixType();\n  }\n}\n\nfunction flowParseAnonFunctionWithoutParens() {\n  flowParsePrefixType();\n  if (!_base.state.noAnonFunctionType && _index.eat.call(void 0, _types.TokenType.arrow)) {\n    flowParseType();\n  }\n}\n\nfunction flowParseIntersectionType() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseAND);\n  flowParseAnonFunctionWithoutParens();\n  while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {\n    flowParseAnonFunctionWithoutParens();\n  }\n}\n\nfunction flowParseUnionType() {\n  _index.eat.call(void 0, _types.TokenType.bitwiseOR);\n  flowParseIntersectionType();\n  while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {\n    flowParseIntersectionType();\n  }\n}\n\nfunction flowParseType() {\n  flowParseUnionType();\n}\n\n function flowParseTypeAnnotation() {\n  flowParseTypeInitialiser();\n} exports.flowParseTypeAnnotation = flowParseTypeAnnotation;\n\nfunction flowParseTypeAnnotatableIdentifier() {\n  _expression.parseIdentifier.call(void 0, );\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\n function flowParseVariance() {\n  if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {\n    _index.next.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].isType = true;\n  }\n} exports.flowParseVariance = flowParseVariance;\n\n// ==================================\n// Overrides\n// ==================================\n\n function flowParseFunctionBodyAndFinish(funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAndPredicateInitialiser();\n  }\n\n  _expression.parseFunctionBody.call(void 0, false, funcContextId);\n} exports.flowParseFunctionBodyAndFinish = flowParseFunctionBodyAndFinish;\n\n function flowParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (_index.match.call(void 0, _types.TokenType.questionDot) && _index.lookaheadType.call(void 0, ) === _types.TokenType.lessThan) {\n    if (noCalls) {\n      stopState.stop = true;\n      return;\n    }\n    _index.next.call(void 0, );\n    flowParseTypeParameterInstantiation();\n    _util.expect.call(void 0, _types.TokenType.parenL);\n    _expression.parseCallExpressionArguments.call(void 0, );\n    return;\n  } else if (!noCalls && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    _util.expect.call(void 0, _types.TokenType.parenL);\n    _expression.parseCallExpressionArguments.call(void 0, );\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  }\n  _expression.baseParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);\n} exports.flowParseSubscript = flowParseSubscript;\n\n function flowStartParseNewArguments() {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    flowParseTypeParameterInstantiation();\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n  }\n} exports.flowStartParseNewArguments = flowStartParseNewArguments;\n\n// interfaces\n function flowTryParseStatement() {\n  if (_index.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._interface) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    _index.next.call(void 0, );\n    flowParseInterface();\n    _index.popTypeContext.call(void 0, oldIsType);\n    return true;\n  } else {\n    return false;\n  }\n} exports.flowTryParseStatement = flowTryParseStatement;\n\n// declares, interfaces and type aliases\n function flowParseIdentifierStatement(contextualKeyword) {\n  if (contextualKeyword === _keywords.ContextualKeyword._declare) {\n    if (\n      _index.match.call(void 0, _types.TokenType._class) ||\n      _index.match.call(void 0, _types.TokenType.name) ||\n      _index.match.call(void 0, _types.TokenType._function) ||\n      _index.match.call(void 0, _types.TokenType._var) ||\n      _index.match.call(void 0, _types.TokenType._export)\n    ) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseDeclare();\n      _index.popTypeContext.call(void 0, oldIsType);\n    }\n  } else if (_index.match.call(void 0, _types.TokenType.name)) {\n    if (contextualKeyword === _keywords.ContextualKeyword._interface) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseInterface();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else if (contextualKeyword === _keywords.ContextualKeyword._type) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseTypeAlias();\n      _index.popTypeContext.call(void 0, oldIsType);\n    } else if (contextualKeyword === _keywords.ContextualKeyword._opaque) {\n      const oldIsType = _index.pushTypeContext.call(void 0, 1);\n      flowParseOpaqueType(false);\n      _index.popTypeContext.call(void 0, oldIsType);\n    }\n  }\n  _util.semicolon.call(void 0, );\n} exports.flowParseIdentifierStatement = flowParseIdentifierStatement;\n\n// export type\n function flowShouldParseExportDeclaration() {\n  return (\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)\n  );\n} exports.flowShouldParseExportDeclaration = flowShouldParseExportDeclaration;\n\n function flowShouldDisallowExportDefaultSpecifier() {\n  return (\n    _index.match.call(void 0, _types.TokenType.name) &&\n    (_base.state.contextualKeyword === _keywords.ContextualKeyword._type ||\n      _base.state.contextualKeyword === _keywords.ContextualKeyword._interface ||\n      _base.state.contextualKeyword === _keywords.ContextualKeyword._opaque)\n  );\n} exports.flowShouldDisallowExportDefaultSpecifier = flowShouldDisallowExportDefaultSpecifier;\n\n function flowParseExportDeclaration() {\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n\n    if (_index.match.call(void 0, _types.TokenType.braceL)) {\n      // export type { foo, bar };\n      _statement.parseExportSpecifiers.call(void 0, );\n      _statement.parseExportFrom.call(void 0, );\n    } else {\n      // export type Foo = Bar;\n      flowParseTypeAlias();\n    }\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n    // export opaque type Foo = Bar;\n    flowParseOpaqueType(false);\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 1);\n    _index.next.call(void 0, );\n    flowParseInterface();\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else {\n    _statement.parseStatement.call(void 0, true);\n  }\n} exports.flowParseExportDeclaration = flowParseExportDeclaration;\n\n function flowShouldParseExportStar() {\n  return _index.match.call(void 0, _types.TokenType.star) || (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0, ) === _types.TokenType.star);\n} exports.flowShouldParseExportStar = flowShouldParseExportStar;\n\n function flowParseExportStar() {\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 2);\n    _statement.baseParseExportStar.call(void 0, );\n    _index.popTypeContext.call(void 0, oldIsType);\n  } else {\n    _statement.baseParseExportStar.call(void 0, );\n  }\n} exports.flowParseExportStar = flowParseExportStar;\n\n// parse a the super class type parameters and implements\n function flowAfterParseClassSuper(hasSuper) {\n  if (hasSuper && _index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    _index.next.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;\n    do {\n      flowParseRestrictedIdentifier();\n      if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n        flowParseTypeParameterInstantiation();\n      }\n    } while (_index.eat.call(void 0, _types.TokenType.comma));\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.flowAfterParseClassSuper = flowAfterParseClassSuper;\n\n// parse type parameters for object method shorthand\n function flowStartParseObjPropValue() {\n  // method shorthand\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    flowParseTypeParameterDeclaration();\n    if (!_index.match.call(void 0, _types.TokenType.parenL)) _util.unexpected.call(void 0, );\n  }\n} exports.flowStartParseObjPropValue = flowStartParseObjPropValue;\n\n function flowParseAssignableListItemTypes() {\n  const oldIsType = _index.pushTypeContext.call(void 0, 0);\n  _index.eat.call(void 0, _types.TokenType.question);\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n  _index.popTypeContext.call(void 0, oldIsType);\n} exports.flowParseAssignableListItemTypes = flowParseAssignableListItemTypes;\n\n// parse typeof and type imports\n function flowStartParseImportSpecifiers() {\n  if (_index.match.call(void 0, _types.TokenType._typeof) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const lh = _index.lookaheadTypeAndKeyword.call(void 0, );\n    if (isMaybeDefaultImport(lh) || lh.type === _types.TokenType.braceL || lh.type === _types.TokenType.star) {\n      _index.next.call(void 0, );\n    }\n  }\n} exports.flowStartParseImportSpecifiers = flowStartParseImportSpecifiers;\n\n// parse import-type/typeof shorthand\n function flowParseImportSpecifier() {\n  const isTypeKeyword =\n    _base.state.contextualKeyword === _keywords.ContextualKeyword._type || _base.state.type === _types.TokenType._typeof;\n  if (isTypeKeyword) {\n    _index.next.call(void 0, );\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n  }\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as) && !_util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    _expression.parseIdentifier.call(void 0, );\n    if (isTypeKeyword && !_index.match.call(void 0, _types.TokenType.name) && !(_base.state.type & _types.TokenType.IS_KEYWORD)) {\n      // `import {type as ,` or `import {type as }`\n    } else {\n      // `import {type as foo`\n      _expression.parseIdentifier.call(void 0, );\n    }\n  } else if (isTypeKeyword && (_index.match.call(void 0, _types.TokenType.name) || !!(_base.state.type & _types.TokenType.IS_KEYWORD))) {\n    // `import {type foo`\n    _expression.parseIdentifier.call(void 0, );\n    if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n} exports.flowParseImportSpecifier = flowParseImportSpecifier;\n\n// parse function type parameters - function foo<T>() {}\n function flowStartParseFunctionParams() {\n  // Originally this checked if the method is a getter/setter, but if it was, we'd crash soon\n  // anyway, so don't try to propagate that information.\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    flowParseTypeParameterDeclaration();\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.flowStartParseFunctionParams = flowStartParseFunctionParams;\n\n// parse flow type annotations on variable declarator heads - let foo: string = bar\n function flowAfterParseVarHead() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    flowParseTypeAnnotation();\n  }\n} exports.flowAfterParseVarHead = flowAfterParseVarHead;\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\n function flowStartParseAsyncArrowFromCallExpression() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n    _base.state.noAnonFunctionType = true;\n    flowParseTypeAnnotation();\n    _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n  }\n} exports.flowStartParseAsyncArrowFromCallExpression = flowStartParseAsyncArrowFromCallExpression;\n\n// We need to support type parameter declarations for arrow functions. This\n// is tricky. There are three situations we need to handle\n//\n// 1. This is either JSX or an arrow function. We'll try JSX first. If that\n//    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n//    error.\n// 2. This is an arrow function. We'll parse the type parameter declaration,\n//    parse the rest, make sure the rest is an arrow function, and go from\n//    there\n// 3. This is neither. Just call the super method\n function flowParseMaybeAssign(noIn, isWithinParens) {\n  if (_index.match.call(void 0, _types.TokenType.lessThan)) {\n    const snapshot = _base.state.snapshot();\n    let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n      _base.state.type = _types.TokenType.typeParameterStart;\n    } else {\n      return wasArrow;\n    }\n\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    flowParseTypeParameterDeclaration();\n    _index.popTypeContext.call(void 0, oldIsType);\n    wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n    if (wasArrow) {\n      return true;\n    }\n    _util.unexpected.call(void 0, );\n  }\n\n  return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);\n} exports.flowParseMaybeAssign = flowParseMaybeAssign;\n\n// handle return types for arrow functions\n function flowParseArrow() {\n  if (_index.match.call(void 0, _types.TokenType.colon)) {\n    const oldIsType = _index.pushTypeContext.call(void 0, 0);\n    const snapshot = _base.state.snapshot();\n\n    const oldNoAnonFunctionType = _base.state.noAnonFunctionType;\n    _base.state.noAnonFunctionType = true;\n    flowParseTypeAndPredicateInitialiser();\n    _base.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n    if (_util.canInsertSemicolon.call(void 0, )) _util.unexpected.call(void 0, );\n    if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0, );\n\n    if (_base.state.error) {\n      _base.state.restoreFromSnapshot(snapshot);\n    }\n    _index.popTypeContext.call(void 0, oldIsType);\n  }\n  return _index.eat.call(void 0, _types.TokenType.arrow);\n} exports.flowParseArrow = flowParseArrow;\n\n function flowParseSubscripts(startTokenIndex, noCalls = false) {\n  if (\n    _base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async &&\n    _index.match.call(void 0, _types.TokenType.lessThan)\n  ) {\n    const snapshot = _base.state.snapshot();\n    const wasArrow = parseAsyncArrowWithTypeParameters();\n    if (wasArrow && !_base.state.error) {\n      return;\n    }\n    _base.state.restoreFromSnapshot(snapshot);\n  }\n\n  _expression.baseParseSubscripts.call(void 0, startTokenIndex, noCalls);\n} exports.flowParseSubscripts = flowParseSubscripts;\n\n// Returns true if there was an arrow function here.\nfunction parseAsyncArrowWithTypeParameters() {\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  _statement.parseFunctionParams.call(void 0, );\n  if (!_expression.parseArrow.call(void 0, )) {\n    return false;\n  }\n  _expression.parseArrowExpression.call(void 0, startTokenIndex);\n  return true;\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});/* eslint max-len: 0 */\n\nvar _index = require('../index');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _flow = require('../plugins/flow');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _typescript = require('../plugins/typescript');\n\n\n\n\n\n\n\n\n\n\n\n\nvar _tokenizer = require('../tokenizer');\nvar _keywords = require('../tokenizer/keywords');\nvar _state = require('../tokenizer/state');\nvar _types = require('../tokenizer/types');\nvar _charcodes = require('../util/charcodes');\nvar _base = require('./base');\n\n\n\n\n\n\n\n\n\n\n\nvar _expression = require('./expression');\n\n\n\n\n\nvar _lval = require('./lval');\n\n\n\n\n\n\n\n\n\nvar _util = require('./util');\n\n function parseTopLevel() {\n  parseBlockBody(_types.TokenType.eof);\n  _base.state.scopes.push(new (0, _state.Scope)(0, _base.state.tokens.length, true));\n  if (_base.state.scopeDepth !== 0) {\n    throw new Error(`Invalid scope depth at end of file: ${_base.state.scopeDepth}`);\n  }\n  return new (0, _index.File)(_base.state.tokens, _base.state.scopes);\n} exports.parseTopLevel = parseTopLevel;\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\n function parseStatement(declaration) {\n  if (_base.isFlowEnabled) {\n    if (_flow.flowTryParseStatement.call(void 0, )) {\n      return;\n    }\n  }\n  if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorators();\n  }\n  parseStatementContent(declaration);\n} exports.parseStatement = parseStatement;\n\nfunction parseStatementContent(declaration) {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseStatementContent.call(void 0, )) {\n      return;\n    }\n  }\n\n  const starttype = _base.state.type;\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _types.TokenType._break:\n    case _types.TokenType._continue:\n      parseBreakContinueStatement();\n      return;\n    case _types.TokenType._debugger:\n      parseDebuggerStatement();\n      return;\n    case _types.TokenType._do:\n      parseDoStatement();\n      return;\n    case _types.TokenType._for:\n      parseForStatement();\n      return;\n    case _types.TokenType._function:\n      if (_tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.dot) break;\n      if (!declaration) _util.unexpected.call(void 0, );\n      parseFunctionStatement();\n      return;\n\n    case _types.TokenType._class:\n      if (!declaration) _util.unexpected.call(void 0, );\n      parseClass(true);\n      return;\n\n    case _types.TokenType._if:\n      parseIfStatement();\n      return;\n    case _types.TokenType._return:\n      parseReturnStatement();\n      return;\n    case _types.TokenType._switch:\n      parseSwitchStatement();\n      return;\n    case _types.TokenType._throw:\n      parseThrowStatement();\n      return;\n    case _types.TokenType._try:\n      parseTryStatement();\n      return;\n\n    case _types.TokenType._let:\n    case _types.TokenType._const:\n      if (!declaration) _util.unexpected.call(void 0, ); // NOTE: falls through to _var\n\n    case _types.TokenType._var:\n      parseVarStatement(starttype);\n      return;\n\n    case _types.TokenType._while:\n      parseWhileStatement();\n      return;\n    case _types.TokenType.braceL:\n      parseBlock();\n      return;\n    case _types.TokenType.semi:\n      parseEmptyStatement();\n      return;\n    case _types.TokenType._export:\n    case _types.TokenType._import: {\n      const nextType = _tokenizer.lookaheadType.call(void 0, );\n      if (nextType === _types.TokenType.parenL || nextType === _types.TokenType.dot) {\n        break;\n      }\n      _tokenizer.next.call(void 0, );\n      if (starttype === _types.TokenType._import) {\n        parseImport();\n      } else {\n        parseExport();\n      }\n      return;\n    }\n    case _types.TokenType.name:\n      if (_base.state.contextualKeyword === _keywords.ContextualKeyword._async) {\n        const functionStart = _base.state.start;\n        // peek ahead and see if next token is a function\n        const snapshot = _base.state.snapshot();\n        _tokenizer.next.call(void 0, );\n        if (_tokenizer.match.call(void 0, _types.TokenType._function) && !_util.canInsertSemicolon.call(void 0, )) {\n          _util.expect.call(void 0, _types.TokenType._function);\n          parseFunction(functionStart, true);\n          return;\n        } else {\n          _base.state.restoreFromSnapshot(snapshot);\n        }\n      }\n    default:\n      // Do nothing.\n      break;\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  const initialTokensLength = _base.state.tokens.length;\n  _expression.parseExpression.call(void 0, );\n  let simpleName = null;\n  if (_base.state.tokens.length === initialTokensLength + 1) {\n    const token = _base.state.tokens[_base.state.tokens.length - 1];\n    if (token.type === _types.TokenType.name) {\n      simpleName = token.contextualKeyword;\n    }\n  }\n  if (simpleName == null) {\n    _util.semicolon.call(void 0, );\n    return;\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {\n    parseLabeledStatement();\n  } else {\n    // This was an identifier, so we might want to handle flow/typescript-specific cases.\n    parseIdentifierStatement(simpleName);\n  }\n}\n\n function parseDecorators() {\n  while (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorator();\n  }\n} exports.parseDecorators = parseDecorators;\n\nfunction parseDecorator() {\n  _tokenizer.next.call(void 0, );\n  if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseExpression.call(void 0, );\n    _util.expect.call(void 0, _types.TokenType.parenR);\n  } else {\n    _expression.parseIdentifier.call(void 0, );\n    while (_tokenizer.eat.call(void 0, _types.TokenType.dot)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n  parseMaybeDecoratorArguments();\n}\n\nfunction parseMaybeDecoratorArguments() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseMaybeDecoratorArguments.call(void 0, );\n  } else {\n    baseParseMaybeDecoratorArguments();\n  }\n}\n\n function baseParseMaybeDecoratorArguments() {\n  if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {\n    _expression.parseCallExpressionArguments.call(void 0, );\n  }\n} exports.baseParseMaybeDecoratorArguments = baseParseMaybeDecoratorArguments;\n\nfunction parseBreakContinueStatement() {\n  _tokenizer.next.call(void 0, );\n  if (!_util.isLineTerminator.call(void 0, )) {\n    _expression.parseIdentifier.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseDebuggerStatement() {\n  _tokenizer.next.call(void 0, );\n  _util.semicolon.call(void 0, );\n}\n\nfunction parseDoStatement() {\n  _tokenizer.next.call(void 0, );\n  parseStatement(false);\n  _util.expect.call(void 0, _types.TokenType._while);\n  _expression.parseParenExpression.call(void 0, );\n  _tokenizer.eat.call(void 0, _types.TokenType.semi);\n}\n\nfunction parseForStatement() {\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  parseAmbiguousForStatement();\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));\n  _base.state.scopeDepth--;\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\nfunction parseAmbiguousForStatement() {\n  _tokenizer.next.call(void 0, );\n\n  let forAwait = false;\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._await)) {\n    forAwait = true;\n    _tokenizer.next.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.parenL);\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.semi)) {\n    if (forAwait) {\n      _util.unexpected.call(void 0, );\n    }\n    parseFor();\n    return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType._var) || _tokenizer.match.call(void 0, _types.TokenType._let) || _tokenizer.match.call(void 0, _types.TokenType._const)) {\n    const varKind = _base.state.type;\n    _tokenizer.next.call(void 0, );\n    parseVar(true, varKind);\n    if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {\n      parseForIn(forAwait);\n      return;\n    }\n    parseFor();\n    return;\n  }\n\n  _expression.parseExpression.call(void 0, true);\n  if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {\n    parseForIn(forAwait);\n    return;\n  }\n  if (forAwait) {\n    _util.unexpected.call(void 0, );\n  }\n  parseFor();\n}\n\nfunction parseFunctionStatement() {\n  const functionStart = _base.state.start;\n  _tokenizer.next.call(void 0, );\n  parseFunction(functionStart, true);\n}\n\nfunction parseIfStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  parseStatement(false);\n  if (_tokenizer.eat.call(void 0, _types.TokenType._else)) {\n    parseStatement(false);\n  }\n}\n\nfunction parseReturnStatement() {\n  _tokenizer.next.call(void 0, );\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (!_util.isLineTerminator.call(void 0, )) {\n    _expression.parseExpression.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseSwitchStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  _base.state.scopeDepth++;\n  const startTokenIndex = _base.state.tokens.length;\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  // Don't bother validation; just go through any sequence of cases, defaults, and statements.\n  while (!_tokenizer.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_tokenizer.match.call(void 0, _types.TokenType._case) || _tokenizer.match.call(void 0, _types.TokenType._default)) {\n      const isCase = _tokenizer.match.call(void 0, _types.TokenType._case);\n      _tokenizer.next.call(void 0, );\n      if (isCase) {\n        _expression.parseExpression.call(void 0, );\n      }\n      _util.expect.call(void 0, _types.TokenType.colon);\n    } else {\n      parseStatement(true);\n    }\n  }\n  _tokenizer.next.call(void 0, ); // Closing brace\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));\n  _base.state.scopeDepth--;\n}\n\nfunction parseThrowStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseExpression.call(void 0, );\n  _util.semicolon.call(void 0, );\n}\n\nfunction parseCatchClauseParam() {\n  _lval.parseBindingAtom.call(void 0, true /* isBlockScope */);\n\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseTypeAnnotation.call(void 0, );\n  }\n}\n\nfunction parseTryStatement() {\n  _tokenizer.next.call(void 0, );\n\n  parseBlock();\n\n  if (_tokenizer.match.call(void 0, _types.TokenType._catch)) {\n    _tokenizer.next.call(void 0, );\n    let catchBindingStartTokenIndex = null;\n    if (_tokenizer.match.call(void 0, _types.TokenType.parenL)) {\n      _base.state.scopeDepth++;\n      catchBindingStartTokenIndex = _base.state.tokens.length;\n      _util.expect.call(void 0, _types.TokenType.parenL);\n      parseCatchClauseParam();\n      _util.expect.call(void 0, _types.TokenType.parenR);\n    }\n    parseBlock();\n    if (catchBindingStartTokenIndex != null) {\n      // We need a special scope for the catch binding which includes the binding itself and the\n      // catch block.\n      const endTokenIndex = _base.state.tokens.length;\n      _base.state.scopes.push(new (0, _state.Scope)(catchBindingStartTokenIndex, endTokenIndex, false));\n      _base.state.scopeDepth--;\n    }\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType._finally)) {\n    parseBlock();\n  }\n}\n\n function parseVarStatement(kind) {\n  _tokenizer.next.call(void 0, );\n  parseVar(false, kind);\n  _util.semicolon.call(void 0, );\n} exports.parseVarStatement = parseVarStatement;\n\nfunction parseWhileStatement() {\n  _tokenizer.next.call(void 0, );\n  _expression.parseParenExpression.call(void 0, );\n  parseStatement(false);\n}\n\nfunction parseEmptyStatement() {\n  _tokenizer.next.call(void 0, );\n}\n\nfunction parseLabeledStatement() {\n  parseStatement(true);\n}\n\n/**\n * Parse a statement starting with an identifier of the given name. Subclasses match on the name\n * to handle statements like \"declare\".\n */\nfunction parseIdentifierStatement(contextualKeyword) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseIdentifierStatement.call(void 0, contextualKeyword);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseIdentifierStatement.call(void 0, contextualKeyword);\n  } else {\n    _util.semicolon.call(void 0, );\n  }\n}\n\n// Parse a semicolon-enclosed block of statements.\n function parseBlock(isFunctionScope = false, contextId = 0) {\n  const startTokenIndex = _base.state.tokens.length;\n  _base.state.scopeDepth++;\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  if (contextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  }\n  parseBlockBody(_types.TokenType.braceR);\n  if (contextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  }\n  const endTokenIndex = _base.state.tokens.length;\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, isFunctionScope));\n  _base.state.scopeDepth--;\n} exports.parseBlock = parseBlock;\n\n function parseBlockBody(end) {\n  while (!_tokenizer.eat.call(void 0, end) && !_base.state.error) {\n    parseStatement(true);\n  }\n} exports.parseBlockBody = parseBlockBody;\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\nfunction parseFor() {\n  _util.expect.call(void 0, _types.TokenType.semi);\n  if (!_tokenizer.match.call(void 0, _types.TokenType.semi)) {\n    _expression.parseExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.semi);\n  if (!_tokenizer.match.call(void 0, _types.TokenType.parenR)) {\n    _expression.parseExpression.call(void 0, );\n  }\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\nfunction parseForIn(forAwait) {\n  if (forAwait) {\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._of);\n  } else {\n    _tokenizer.next.call(void 0, );\n  }\n  _expression.parseExpression.call(void 0, );\n  _util.expect.call(void 0, _types.TokenType.parenR);\n  parseStatement(false);\n}\n\n// Parse a list of variable declarations.\n\nfunction parseVar(isFor, kind) {\n  while (true) {\n    const isBlockScope = kind === _types.TokenType._const || kind === _types.TokenType._let;\n    parseVarHead(isBlockScope);\n    if (_tokenizer.eat.call(void 0, _types.TokenType.eq)) {\n      const eqIndex = _base.state.tokens.length - 1;\n      _expression.parseMaybeAssign.call(void 0, isFor);\n      _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;\n    }\n    if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) {\n      break;\n    }\n  }\n}\n\nfunction parseVarHead(isBlockScope) {\n  _lval.parseBindingAtom.call(void 0, isBlockScope);\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsAfterParseVarHead.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowAfterParseVarHead.call(void 0, );\n  }\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\n function parseFunction(\n  functionStart,\n  isStatement,\n  optionalId = false,\n) {\n  if (_tokenizer.match.call(void 0, _types.TokenType.star)) {\n    _tokenizer.next.call(void 0, );\n  }\n\n  if (isStatement && !optionalId && !_tokenizer.match.call(void 0, _types.TokenType.name) && !_tokenizer.match.call(void 0, _types.TokenType._yield)) {\n    _util.unexpected.call(void 0, );\n  }\n\n  let nameScopeStartTokenIndex = null;\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    // Expression-style functions should limit their name's scope to the function body, so we make\n    // a new function scope to enforce that.\n    if (!isStatement) {\n      nameScopeStartTokenIndex = _base.state.tokens.length;\n      _base.state.scopeDepth++;\n    }\n    _lval.parseBindingIdentifier.call(void 0, false);\n  }\n\n  const startTokenIndex = _base.state.tokens.length;\n  _base.state.scopeDepth++;\n  parseFunctionParams();\n  _expression.parseFunctionBodyAndFinish.call(void 0, functionStart);\n  const endTokenIndex = _base.state.tokens.length;\n  // In addition to the block scope of the function body, we need a separate function-style scope\n  // that includes the params.\n  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));\n  _base.state.scopeDepth--;\n  if (nameScopeStartTokenIndex !== null) {\n    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, true));\n    _base.state.scopeDepth--;\n  }\n} exports.parseFunction = parseFunction;\n\n function parseFunctionParams(\n  allowModifiers = false,\n  funcContextId = 0,\n) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsStartParseFunctionParams.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowStartParseFunctionParams.call(void 0, );\n  }\n\n  _util.expect.call(void 0, _types.TokenType.parenL);\n  if (funcContextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;\n  }\n  _lval.parseBindingList.call(void 0, \n    _types.TokenType.parenR,\n    false /* isBlockScope */,\n    false /* allowEmpty */,\n    allowModifiers,\n    funcContextId,\n  );\n  if (funcContextId) {\n    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;\n  }\n} exports.parseFunctionParams = parseFunctionParams;\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\n function parseClass(isStatement, optionalId = false) {\n  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later\n  // code can easily navigate to meaningful points on the class.\n  const contextId = _base.getNextContextId.call(void 0, );\n\n  _tokenizer.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  _base.state.tokens[_base.state.tokens.length - 1].isExpression = !isStatement;\n  // Like with functions, we declare a special \"name scope\" from the start of the name to the end\n  // of the class, but only with expression-style classes, to represent the fact that the name is\n  // available to the body of the class but not an outer declaration.\n  let nameScopeStartTokenIndex = null;\n  if (!isStatement) {\n    nameScopeStartTokenIndex = _base.state.tokens.length;\n    _base.state.scopeDepth++;\n  }\n  parseClassId(isStatement, optionalId);\n  parseClassSuper();\n  const openBraceIndex = _base.state.tokens.length;\n  parseClassBody(contextId);\n  if (_base.state.error) {\n    return;\n  }\n  _base.state.tokens[openBraceIndex].contextId = contextId;\n  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;\n  if (nameScopeStartTokenIndex !== null) {\n    const endTokenIndex = _base.state.tokens.length;\n    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, false));\n    _base.state.scopeDepth--;\n  }\n} exports.parseClass = parseClass;\n\nfunction isClassProperty() {\n  return _tokenizer.match.call(void 0, _types.TokenType.eq) || _tokenizer.match.call(void 0, _types.TokenType.semi) || _tokenizer.match.call(void 0, _types.TokenType.braceR) || _tokenizer.match.call(void 0, _types.TokenType.bang) || _tokenizer.match.call(void 0, _types.TokenType.colon);\n}\n\nfunction isClassMethod() {\n  return _tokenizer.match.call(void 0, _types.TokenType.parenL) || _tokenizer.match.call(void 0, _types.TokenType.lessThan);\n}\n\nfunction parseClassBody(classContextId) {\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (_tokenizer.eat.call(void 0, _types.TokenType.semi)) {\n      continue;\n    }\n\n    if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n      parseDecorator();\n      continue;\n    }\n    const memberStart = _base.state.start;\n    parseClassMember(memberStart, classContextId);\n  }\n}\n\nfunction parseClassMember(memberStart, classContextId) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseModifiers.call(void 0, [\n      _keywords.ContextualKeyword._declare,\n      _keywords.ContextualKeyword._public,\n      _keywords.ContextualKeyword._protected,\n      _keywords.ContextualKeyword._private,\n      _keywords.ContextualKeyword._override,\n    ]);\n  }\n  let isStatic = false;\n  if (_tokenizer.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._static) {\n    _expression.parseIdentifier.call(void 0, ); // eats 'static'\n    if (isClassMethod()) {\n      parseClassMethod(memberStart, /* isConstructor */ false);\n      return;\n    } else if (isClassProperty()) {\n      parseClassProperty();\n      return;\n    }\n    // otherwise something static\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;\n    isStatic = true;\n\n    if (_tokenizer.match.call(void 0, _types.TokenType.braceL)) {\n      // This is a static block. Mark the word \"static\" with the class context ID for class element\n      // detection and parse as a regular block.\n      _base.state.tokens[_base.state.tokens.length - 1].contextId = classContextId;\n      parseBlock();\n      return;\n    }\n  }\n\n  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);\n}\n\nfunction parseClassMemberWithIsStatic(\n  memberStart,\n  isStatic,\n  classContextId,\n) {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseClassMemberWithIsStatic.call(void 0, isStatic)) {\n      return;\n    }\n  }\n  if (_tokenizer.eat.call(void 0, _types.TokenType.star)) {\n    // a generator\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n    return;\n  }\n\n  // Get the identifier name so we can tell if it's actually a keyword like \"async\", \"get\", or\n  // \"set\".\n  parseClassPropertyName(classContextId);\n  let isConstructor = false;\n  const token = _base.state.tokens[_base.state.tokens.length - 1];\n  // We allow \"constructor\" as either an identifier or a string.\n  if (token.contextualKeyword === _keywords.ContextualKeyword._constructor) {\n    isConstructor = true;\n  }\n  parsePostMemberNameModifiers();\n\n  if (isClassMethod()) {\n    parseClassMethod(memberStart, isConstructor);\n  } else if (isClassProperty()) {\n    parseClassProperty();\n  } else if (token.contextualKeyword === _keywords.ContextualKeyword._async && !_util.isLineTerminator.call(void 0, )) {\n    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._async;\n    // an async method\n    const isGenerator = _tokenizer.match.call(void 0, _types.TokenType.star);\n    if (isGenerator) {\n      _tokenizer.next.call(void 0, );\n    }\n\n    // The so-called parsed name would have been \"async\": get the real name.\n    parseClassPropertyName(classContextId);\n    parsePostMemberNameModifiers();\n    parseClassMethod(memberStart, false /* isConstructor */);\n  } else if (\n    (token.contextualKeyword === _keywords.ContextualKeyword._get ||\n      token.contextualKeyword === _keywords.ContextualKeyword._set) &&\n    !(_util.isLineTerminator.call(void 0, ) && _tokenizer.match.call(void 0, _types.TokenType.star))\n  ) {\n    if (token.contextualKeyword === _keywords.ContextualKeyword._get) {\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._get;\n    } else {\n      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._set;\n    }\n    // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n    // a getter or setter\n    // The so-called parsed name would have been \"get/set\": get the real name.\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n  } else if (_util.isLineTerminator.call(void 0, )) {\n    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n    parseClassProperty();\n  } else {\n    _util.unexpected.call(void 0, );\n  }\n}\n\nfunction parseClassMethod(functionStart, isConstructor) {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseTypeParameters.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {\n      _flow.flowParseTypeParameterDeclaration.call(void 0, );\n    }\n  }\n  _expression.parseMethod.call(void 0, functionStart, isConstructor);\n}\n\n// Return the name of the class property, if it is a simple identifier.\n function parseClassPropertyName(classContextId) {\n  _expression.parsePropertyName.call(void 0, classContextId);\n} exports.parseClassPropertyName = parseClassPropertyName;\n\n function parsePostMemberNameModifiers() {\n  if (_base.isTypeScriptEnabled) {\n    const oldIsType = _tokenizer.pushTypeContext.call(void 0, 0);\n    _tokenizer.eat.call(void 0, _types.TokenType.question);\n    _tokenizer.popTypeContext.call(void 0, oldIsType);\n  }\n} exports.parsePostMemberNameModifiers = parsePostMemberNameModifiers;\n\n function parseClassProperty() {\n  if (_base.isTypeScriptEnabled) {\n    _tokenizer.eatTypeToken.call(void 0, _types.TokenType.bang);\n    _typescript.tsTryParseTypeAnnotation.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.colon)) {\n      _flow.flowParseTypeAnnotation.call(void 0, );\n    }\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.eq)) {\n    const equalsTokenIndex = _base.state.tokens.length;\n    _tokenizer.next.call(void 0, );\n    _expression.parseMaybeAssign.call(void 0, );\n    _base.state.tokens[equalsTokenIndex].rhsEndIndex = _base.state.tokens.length;\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseClassProperty = parseClassProperty;\n\nfunction parseClassId(isStatement, optionalId = false) {\n  if (\n    _base.isTypeScriptEnabled &&\n    (!isStatement || optionalId) &&\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)\n  ) {\n    return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    _lval.parseBindingIdentifier.call(void 0, true);\n  }\n\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsTryParseTypeParameters.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {\n      _flow.flowParseTypeParameterDeclaration.call(void 0, );\n    }\n  }\n}\n\n// Returns true if there was a superclass.\nfunction parseClassSuper() {\n  let hasSuper = false;\n  if (_tokenizer.eat.call(void 0, _types.TokenType._extends)) {\n    _expression.parseExprSubscripts.call(void 0, );\n    hasSuper = true;\n  } else {\n    hasSuper = false;\n  }\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsAfterParseClassSuper.call(void 0, hasSuper);\n  } else if (_base.isFlowEnabled) {\n    _flow.flowAfterParseClassSuper.call(void 0, hasSuper);\n  }\n}\n\n// Parses module export declaration.\n\n function parseExport() {\n  const exportIndex = _base.state.tokens.length - 1;\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseExport.call(void 0, )) {\n      return;\n    }\n  }\n  // export * from '...'\n  if (shouldParseExportStar()) {\n    parseExportStar();\n  } else if (isExportDefaultSpecifier()) {\n    // export default from\n    _expression.parseIdentifier.call(void 0, );\n    if (_tokenizer.match.call(void 0, _types.TokenType.comma) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.star) {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      _util.expect.call(void 0, _types.TokenType.star);\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);\n      _expression.parseIdentifier.call(void 0, );\n    } else {\n      parseExportSpecifiersMaybe();\n    }\n    parseExportFrom();\n  } else if (_tokenizer.eat.call(void 0, _types.TokenType._default)) {\n    // export default ...\n    parseExportDefaultExpression();\n  } else if (shouldParseExportDeclaration()) {\n    parseExportDeclaration();\n  } else {\n    // export { x, y as z } [from '...']\n    parseExportSpecifiers();\n    parseExportFrom();\n  }\n  _base.state.tokens[exportIndex].rhsEndIndex = _base.state.tokens.length;\n} exports.parseExport = parseExport;\n\nfunction parseExportDefaultExpression() {\n  if (_base.isTypeScriptEnabled) {\n    if (_typescript.tsTryParseExportDefaultExpression.call(void 0, )) {\n      return;\n    }\n  }\n  const functionStart = _base.state.start;\n  if (_tokenizer.eat.call(void 0, _types.TokenType._function)) {\n    parseFunction(functionStart, true, true);\n  } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._async) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType._function) {\n    // async function declaration\n    _util.eatContextual.call(void 0, _keywords.ContextualKeyword._async);\n    _tokenizer.eat.call(void 0, _types.TokenType._function);\n    parseFunction(functionStart, true, true);\n  } else if (_tokenizer.match.call(void 0, _types.TokenType._class)) {\n    parseClass(true, true);\n  } else if (_tokenizer.match.call(void 0, _types.TokenType.at)) {\n    parseDecorators();\n    parseClass(true, true);\n  } else {\n    _expression.parseMaybeAssign.call(void 0, );\n    _util.semicolon.call(void 0, );\n  }\n}\n\nfunction parseExportDeclaration() {\n  if (_base.isTypeScriptEnabled) {\n    _typescript.tsParseExportDeclaration.call(void 0, );\n  } else if (_base.isFlowEnabled) {\n    _flow.flowParseExportDeclaration.call(void 0, );\n  } else {\n    parseStatement(true);\n  }\n}\n\nfunction isExportDefaultSpecifier() {\n  if (_base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0, )) {\n    return false;\n  } else if (_base.isFlowEnabled && _flow.flowShouldDisallowExportDefaultSpecifier.call(void 0, )) {\n    return false;\n  }\n  if (_tokenizer.match.call(void 0, _types.TokenType.name)) {\n    return _base.state.contextualKeyword !== _keywords.ContextualKeyword._async;\n  }\n\n  if (!_tokenizer.match.call(void 0, _types.TokenType._default)) {\n    return false;\n  }\n\n  const _next = _tokenizer.nextTokenStart.call(void 0, );\n  const lookahead = _tokenizer.lookaheadTypeAndKeyword.call(void 0, );\n  const hasFrom =\n    lookahead.type === _types.TokenType.name && lookahead.contextualKeyword === _keywords.ContextualKeyword._from;\n  if (lookahead.type === _types.TokenType.comma) {\n    return true;\n  }\n  // lookahead again when `export default from` is seen\n  if (hasFrom) {\n    const nextAfterFrom = _base.input.charCodeAt(_tokenizer.nextTokenStartSince.call(void 0, _next + 4));\n    return nextAfterFrom === _charcodes.charCodes.quotationMark || nextAfterFrom === _charcodes.charCodes.apostrophe;\n  }\n  return false;\n}\n\nfunction parseExportSpecifiersMaybe() {\n  if (_tokenizer.eat.call(void 0, _types.TokenType.comma)) {\n    parseExportSpecifiers();\n  }\n}\n\n function parseExportFrom() {\n  if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._from)) {\n    _expression.parseExprAtom.call(void 0, );\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseExportFrom = parseExportFrom;\n\nfunction shouldParseExportStar() {\n  if (_base.isFlowEnabled) {\n    return _flow.flowShouldParseExportStar.call(void 0, );\n  } else {\n    return _tokenizer.match.call(void 0, _types.TokenType.star);\n  }\n}\n\nfunction parseExportStar() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseExportStar.call(void 0, );\n  } else {\n    baseParseExportStar();\n  }\n}\n\n function baseParseExportStar() {\n  _util.expect.call(void 0, _types.TokenType.star);\n\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    parseExportNamespace();\n  } else {\n    parseExportFrom();\n  }\n} exports.baseParseExportStar = baseParseExportStar;\n\nfunction parseExportNamespace() {\n  _tokenizer.next.call(void 0, );\n  _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._as;\n  _expression.parseIdentifier.call(void 0, );\n  parseExportSpecifiersMaybe();\n  parseExportFrom();\n}\n\nfunction shouldParseExportDeclaration() {\n  return (\n    (_base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0, )) ||\n    (_base.isFlowEnabled && _flow.flowShouldParseExportDeclaration.call(void 0, )) ||\n    _base.state.type === _types.TokenType._var ||\n    _base.state.type === _types.TokenType._const ||\n    _base.state.type === _types.TokenType._let ||\n    _base.state.type === _types.TokenType._function ||\n    _base.state.type === _types.TokenType._class ||\n    _util.isContextual.call(void 0, _keywords.ContextualKeyword._async) ||\n    _tokenizer.match.call(void 0, _types.TokenType.at)\n  );\n}\n\n// Parses a comma-separated list of module exports.\n function parseExportSpecifiers() {\n  let first = true;\n\n  // export { x, y as z } [from '...']\n  _util.expect.call(void 0, _types.TokenType.braceL);\n\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      _util.expect.call(void 0, _types.TokenType.comma);\n      if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    _expression.parseIdentifier.call(void 0, );\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ExportAccess;\n    if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n      _expression.parseIdentifier.call(void 0, );\n    }\n  }\n} exports.parseExportSpecifiers = parseExportSpecifiers;\n\n// Parses import declaration.\n\n function parseImport() {\n  if (_base.isTypeScriptEnabled && _tokenizer.match.call(void 0, _types.TokenType.name) && _tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.eq) {\n    _typescript.tsParseImportEqualsDeclaration.call(void 0, );\n    return;\n  }\n  if (_base.isTypeScriptEnabled && _util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {\n    const lookahead = _tokenizer.lookaheadType.call(void 0, );\n    if (lookahead === _types.TokenType.name) {\n      // One of these `import type` cases:\n      // import type T = require('T');\n      // import type A from 'A';\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);\n      if (_tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.eq) {\n        _typescript.tsParseImportEqualsDeclaration.call(void 0, );\n        return;\n      }\n      // If this is an `import type...from` statement, then we already ate the\n      // type token, so proceed to the regular import parser.\n    } else if (lookahead === _types.TokenType.star || lookahead === _types.TokenType.braceL) {\n      // One of these `import type` cases, in which case we can eat the type token\n      // and proceed as normal:\n      // import type * as A from 'A';\n      // import type {a} from 'A';\n      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);\n    }\n    // Otherwise, we are importing the name \"type\".\n  }\n\n  // import '...'\n  if (_tokenizer.match.call(void 0, _types.TokenType.string)) {\n    _expression.parseExprAtom.call(void 0, );\n  } else {\n    parseImportSpecifiers();\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._from);\n    _expression.parseExprAtom.call(void 0, );\n  }\n  _util.semicolon.call(void 0, );\n} exports.parseImport = parseImport;\n\n// eslint-disable-next-line no-unused-vars\nfunction shouldParseDefaultImport() {\n  return _tokenizer.match.call(void 0, _types.TokenType.name);\n}\n\nfunction parseImportSpecifierLocal() {\n  _lval.parseImportedIdentifier.call(void 0, );\n}\n\n// Parses a comma-separated list of module imports.\nfunction parseImportSpecifiers() {\n  if (_base.isFlowEnabled) {\n    _flow.flowStartParseImportSpecifiers.call(void 0, );\n  }\n\n  let first = true;\n  if (shouldParseDefaultImport()) {\n    // import defaultObj, { x, y as z } from '...'\n    parseImportSpecifierLocal();\n\n    if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) return;\n  }\n\n  if (_tokenizer.match.call(void 0, _types.TokenType.star)) {\n    _tokenizer.next.call(void 0, );\n    _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);\n\n    parseImportSpecifierLocal();\n\n    return;\n  }\n\n  _util.expect.call(void 0, _types.TokenType.braceL);\n  while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {\n        _util.unexpected.call(void 0, \n          \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n        );\n      }\n\n      _util.expect.call(void 0, _types.TokenType.comma);\n      if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {\n        break;\n      }\n    }\n\n    parseImportSpecifier();\n  }\n}\n\nfunction parseImportSpecifier() {\n  if (_base.isFlowEnabled) {\n    _flow.flowParseImportSpecifier.call(void 0, );\n    return;\n  }\n  _lval.parseImportedIdentifier.call(void 0, );\n  if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {\n    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ImportAccess;\n    _tokenizer.next.call(void 0, );\n    _lval.parseImportedIdentifier.call(void 0, );\n  }\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\nvar _index = require('../tokenizer/index');\nvar _charcodes = require('../util/charcodes');\nvar _base = require('./base');\nvar _statement = require('./statement');\n\n function parseFile() {\n  // If enabled, skip leading hashbang line.\n  if (\n    _base.state.pos === 0 &&\n    _base.input.charCodeAt(0) === _charcodes.charCodes.numberSign &&\n    _base.input.charCodeAt(1) === _charcodes.charCodes.exclamationMark\n  ) {\n    _index.skipLineComment.call(void 0, 2);\n  }\n  _index.nextToken.call(void 0, );\n  return _statement.parseTopLevel.call(void 0, );\n} exports.parseFile = parseFile;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _base = require('./traverser/base');\nvar _index = require('./traverser/index');\n\n class File {\n  \n  \n\n  constructor(tokens, scopes) {\n    this.tokens = tokens;\n    this.scopes = scopes;\n  }\n} exports.File = File;\n\n function parse(\n  input,\n  isJSXEnabled,\n  isTypeScriptEnabled,\n  isFlowEnabled,\n) {\n  if (isFlowEnabled && isTypeScriptEnabled) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  _base.initParser.call(void 0, input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const result = _index.parseFile.call(void 0, );\n  if (_base.state.error) {\n    throw _base.augmentError.call(void 0, _base.state.error);\n  }\n  return result;\n} exports.parse = parse;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _keywords = require('../parser/tokenizer/keywords');\n\n\n/**\n * Determine whether this optional chain or nullish coalescing operation has any await statements in\n * it. If so, we'll need to transpile to an async operation.\n *\n * We compute this by walking the length of the operation and returning true if we see an await\n * keyword used as a real await (rather than an object key or property access). Nested optional\n * chain/nullish operations need to be tracked but don't silence await, but a nested async function\n * (or any other nested scope) will make the await not count.\n */\n function isAsyncOperation(tokens) {\n  let index = tokens.currentIndex();\n  let depth = 0;\n  const startToken = tokens.currentToken();\n  do {\n    const token = tokens.tokens[index];\n    if (token.isOptionalChainStart) {\n      depth++;\n    }\n    if (token.isOptionalChainEnd) {\n      depth--;\n    }\n    depth += token.numNullishCoalesceStarts;\n    depth -= token.numNullishCoalesceEnds;\n\n    if (\n      token.contextualKeyword === _keywords.ContextualKeyword._await &&\n      token.identifierRole == null &&\n      token.scopeDepth === startToken.scopeDepth\n    ) {\n      return true;\n    }\n    index += 1;\n  } while (depth > 0 && index < tokens.tokens.length);\n  return false;\n} exports.default = isAsyncOperation;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _types = require('./parser/tokenizer/types');\nvar _isAsyncOperation = require('./util/isAsyncOperation'); var _isAsyncOperation2 = _interopRequireDefault(_isAsyncOperation);\n\n\n\n\n\n\n class TokenProcessor {\n   __init() {this.resultCode = \"\"}\n   __init2() {this.tokenIndex = 0}\n\n  constructor(\n     code,\n     tokens,\n     isFlowEnabled,\n     disableESTransforms,\n     helperManager,\n  ) {;this.code = code;this.tokens = tokens;this.isFlowEnabled = isFlowEnabled;this.disableESTransforms = disableESTransforms;this.helperManager = helperManager;TokenProcessor.prototype.__init.call(this);TokenProcessor.prototype.__init2.call(this);}\n\n  /**\n   * Make a new TokenProcessor for things like lookahead.\n   */\n  snapshot() {\n    return {resultCode: this.resultCode, tokenIndex: this.tokenIndex};\n  }\n\n  restoreToSnapshot(snapshot) {\n    this.resultCode = snapshot.resultCode;\n    this.tokenIndex = snapshot.tokenIndex;\n  }\n\n  getResultCodeIndex() {\n    return this.resultCode.length;\n  }\n\n  reset() {\n    this.resultCode = \"\";\n    this.tokenIndex = 0;\n  }\n\n  matchesContextualAtIndex(index, contextualKeyword) {\n    return (\n      this.matches1AtIndex(index, _types.TokenType.name) &&\n      this.tokens[index].contextualKeyword === contextualKeyword\n    );\n  }\n\n  identifierNameAtIndex(index) {\n    // TODO: We need to process escapes since technically you can have unicode escapes in variable\n    // names.\n    return this.identifierNameForToken(this.tokens[index]);\n  }\n\n  identifierName() {\n    return this.identifierNameForToken(this.currentToken());\n  }\n\n  identifierNameForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  rawCodeForToken(token) {\n    return this.code.slice(token.start, token.end);\n  }\n\n  stringValueAtIndex(index) {\n    return this.stringValueForToken(this.tokens[index]);\n  }\n\n  stringValue() {\n    return this.stringValueForToken(this.currentToken());\n  }\n\n  stringValueForToken(token) {\n    // This is used to identify when two imports are the same and to resolve TypeScript enum keys.\n    // Ideally we'd process escapes within the strings, but for now we pretty much take the raw\n    // code.\n    return this.code.slice(token.start + 1, token.end - 1);\n  }\n\n  matches1AtIndex(index, t1) {\n    return this.tokens[index].type === t1;\n  }\n\n  matches2AtIndex(index, t1, t2) {\n    return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;\n  }\n\n  matches3AtIndex(index, t1, t2, t3) {\n    return (\n      this.tokens[index].type === t1 &&\n      this.tokens[index + 1].type === t2 &&\n      this.tokens[index + 2].type === t3\n    );\n  }\n\n  matches1(t1) {\n    return this.tokens[this.tokenIndex].type === t1;\n  }\n\n  matches2(t1, t2) {\n    return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;\n  }\n\n  matches3(t1, t2, t3) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3\n    );\n  }\n\n  matches4(t1, t2, t3, t4) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4\n    );\n  }\n\n  matches5(t1, t2, t3, t4, t5) {\n    return (\n      this.tokens[this.tokenIndex].type === t1 &&\n      this.tokens[this.tokenIndex + 1].type === t2 &&\n      this.tokens[this.tokenIndex + 2].type === t3 &&\n      this.tokens[this.tokenIndex + 3].type === t4 &&\n      this.tokens[this.tokenIndex + 4].type === t5\n    );\n  }\n\n  matchesContextual(contextualKeyword) {\n    return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);\n  }\n\n  matchesContextIdAndLabel(type, contextId) {\n    return this.matches1(type) && this.currentToken().contextId === contextId;\n  }\n\n  previousWhitespaceAndComments() {\n    let whitespaceAndComments = this.code.slice(\n      this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0,\n      this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length,\n    );\n    if (this.isFlowEnabled) {\n      whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, \"\");\n    }\n    return whitespaceAndComments;\n  }\n\n  replaceToken(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultCode += newCode;\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  replaceTokenTrimmingLeftWhitespace(newCode) {\n    this.resultCode += this.previousWhitespaceAndComments().replace(/[^\\r\\n]/g, \"\");\n    this.appendTokenPrefix();\n    this.resultCode += newCode;\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  removeInitialToken() {\n    this.replaceToken(\"\");\n  }\n\n  removeToken() {\n    this.replaceTokenTrimmingLeftWhitespace(\"\");\n  }\n\n  copyExpectedToken(tokenType) {\n    if (this.tokens[this.tokenIndex].type !== tokenType) {\n      throw new Error(`Expected token ${tokenType}`);\n    }\n    this.copyToken();\n  }\n\n  copyToken() {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n  copyTokenWithPrefix(prefix) {\n    this.resultCode += this.previousWhitespaceAndComments();\n    this.appendTokenPrefix();\n    this.resultCode += prefix;\n    this.resultCode += this.code.slice(\n      this.tokens[this.tokenIndex].start,\n      this.tokens[this.tokenIndex].end,\n    );\n    this.appendTokenSuffix();\n    this.tokenIndex++;\n  }\n\n   appendTokenPrefix() {\n    const token = this.currentToken();\n    if (token.numNullishCoalesceStarts || token.isOptionalChainStart) {\n      token.isAsyncOperation = _isAsyncOperation2.default.call(void 0, this);\n    }\n    if (this.disableESTransforms) {\n      return;\n    }\n    if (token.numNullishCoalesceStarts) {\n      for (let i = 0; i < token.numNullishCoalesceStarts; i++) {\n        if (token.isAsyncOperation) {\n          this.resultCode += \"await \";\n          this.resultCode += this.helperManager.getHelperName(\"asyncNullishCoalesce\");\n        } else {\n          this.resultCode += this.helperManager.getHelperName(\"nullishCoalesce\");\n        }\n        this.resultCode += \"(\";\n      }\n    }\n    if (token.isOptionalChainStart) {\n      if (token.isAsyncOperation) {\n        this.resultCode += \"await \";\n      }\n      if (this.tokenIndex > 0 && this.tokenAtRelativeIndex(-1).type === _types.TokenType._delete) {\n        if (token.isAsyncOperation) {\n          this.resultCode += this.helperManager.getHelperName(\"asyncOptionalChainDelete\");\n        } else {\n          this.resultCode += this.helperManager.getHelperName(\"optionalChainDelete\");\n        }\n      } else if (token.isAsyncOperation) {\n        this.resultCode += this.helperManager.getHelperName(\"asyncOptionalChain\");\n      } else {\n        this.resultCode += this.helperManager.getHelperName(\"optionalChain\");\n      }\n      this.resultCode += \"([\";\n    }\n  }\n\n   appendTokenSuffix() {\n    const token = this.currentToken();\n    if (token.isOptionalChainEnd && !this.disableESTransforms) {\n      this.resultCode += \"])\";\n    }\n    if (token.numNullishCoalesceEnds && !this.disableESTransforms) {\n      for (let i = 0; i < token.numNullishCoalesceEnds; i++) {\n        this.resultCode += \"))\";\n      }\n    }\n  }\n\n  appendCode(code) {\n    this.resultCode += code;\n  }\n\n  currentToken() {\n    return this.tokens[this.tokenIndex];\n  }\n\n  currentTokenCode() {\n    const token = this.currentToken();\n    return this.code.slice(token.start, token.end);\n  }\n\n  tokenAtRelativeIndex(relativeIndex) {\n    return this.tokens[this.tokenIndex + relativeIndex];\n  }\n\n  currentIndex() {\n    return this.tokenIndex;\n  }\n\n  /**\n   * Move to the next token. Only suitable in preprocessing steps. When\n   * generating new code, you should use copyToken or removeToken.\n   */\n  nextToken() {\n    if (this.tokenIndex === this.tokens.length) {\n      throw new Error(\"Unexpectedly reached end of input.\");\n    }\n    this.tokenIndex++;\n  }\n\n  previousToken() {\n    this.tokenIndex--;\n  }\n\n  finish() {\n    if (this.tokenIndex !== this.tokens.length) {\n      throw new Error(\"Tried to finish processing tokens before reaching the end.\");\n    }\n    this.resultCode += this.previousWhitespaceAndComments();\n    return this.resultCode;\n  }\n\n  isAtEnd() {\n    return this.tokenIndex === this.tokens.length;\n  }\n} exports.default = TokenProcessor;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _keywords = require('../parser/tokenizer/keywords');\nvar _types = require('../parser/tokenizer/types');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Get information about the class fields for this class, given a token processor pointing to the\n * open-brace at the start of the class.\n */\n function getClassInfo(\n  rootTransformer,\n  tokens,\n  nameManager,\n  disableESTransforms,\n) {\n  const snapshot = tokens.snapshot();\n\n  const headerInfo = processClassHeader(tokens);\n\n  let constructorInitializerStatements = [];\n  const instanceInitializerNames = [];\n  const staticInitializerNames = [];\n  let constructorInsertPos = null;\n  const fields = [];\n  const rangesToRemove = [];\n\n  const classContextId = tokens.currentToken().contextId;\n  if (classContextId == null) {\n    throw new Error(\"Expected non-null class context ID on class open-brace.\");\n  }\n\n  tokens.nextToken();\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {\n    if (tokens.matchesContextual(_keywords.ContextualKeyword._constructor) && !tokens.currentToken().isType) {\n      ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n    } else if (tokens.matches1(_types.TokenType.semi)) {\n      if (!disableESTransforms) {\n        rangesToRemove.push({start: tokens.currentIndex(), end: tokens.currentIndex() + 1});\n      }\n      tokens.nextToken();\n    } else if (tokens.currentToken().isType) {\n      tokens.nextToken();\n    } else {\n      // Either a method or a field. Skip to the identifier part.\n      const statementStartIndex = tokens.currentIndex();\n      let isStatic = false;\n      let isESPrivate = false;\n      let isDeclare = false;\n      while (isAccessModifier(tokens.currentToken())) {\n        if (tokens.matches1(_types.TokenType._static)) {\n          isStatic = true;\n        }\n        if (tokens.matches1(_types.TokenType.hash)) {\n          isESPrivate = true;\n        }\n        if (tokens.matches1(_types.TokenType._declare)) {\n          isDeclare = true;\n        }\n        tokens.nextToken();\n      }\n      if (isStatic && tokens.matches1(_types.TokenType.braceL)) {\n        // This is a static block, so don't process it in any special way.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      if (isESPrivate) {\n        // Sucrase doesn't attempt to transpile private fields; just leave them as-is.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      if (\n        tokens.matchesContextual(_keywords.ContextualKeyword._constructor) &&\n        !tokens.currentToken().isType\n      ) {\n        ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));\n        continue;\n      }\n\n      const nameStartIndex = tokens.currentIndex();\n      skipFieldName(tokens);\n      if (tokens.matches1(_types.TokenType.lessThan) || tokens.matches1(_types.TokenType.parenL)) {\n        // This is a method, so nothing to process.\n        skipToNextClassElement(tokens, classContextId);\n        continue;\n      }\n      // There might be a type annotation that we need to skip.\n      while (tokens.currentToken().isType) {\n        tokens.nextToken();\n      }\n      if (tokens.matches1(_types.TokenType.eq)) {\n        const equalsIndex = tokens.currentIndex();\n        // This is an initializer, so we need to wrap in an initializer method.\n        const valueEnd = tokens.currentToken().rhsEndIndex;\n        if (valueEnd == null) {\n          throw new Error(\"Expected rhsEndIndex on class field assignment.\");\n        }\n        tokens.nextToken();\n        while (tokens.currentIndex() < valueEnd) {\n          rootTransformer.processToken();\n        }\n        let initializerName;\n        if (isStatic) {\n          initializerName = nameManager.claimFreeName(\"__initStatic\");\n          staticInitializerNames.push(initializerName);\n        } else {\n          initializerName = nameManager.claimFreeName(\"__init\");\n          instanceInitializerNames.push(initializerName);\n        }\n        // Fields start at the name, so `static x = 1;` has a field range of `x = 1;`.\n        fields.push({\n          initializerName,\n          equalsIndex,\n          start: nameStartIndex,\n          end: tokens.currentIndex(),\n        });\n      } else if (!disableESTransforms || isDeclare) {\n        // This is a regular field declaration, like `x;`. With the class transform enabled, we just\n        // remove the line so that no output is produced. With the class transform disabled, we\n        // usually want to preserve the declaration (but still strip types), but if the `declare`\n        // keyword is specified, we should remove the line to avoid initializing the value to\n        // undefined.\n        rangesToRemove.push({start: statementStartIndex, end: tokens.currentIndex()});\n      }\n    }\n  }\n\n  tokens.restoreToSnapshot(snapshot);\n  if (disableESTransforms) {\n    // With ES transforms disabled, we don't want to transform regular class\n    // field declarations, and we don't need to do any additional tricks to\n    // reference the constructor for static init, but we still need to transform\n    // TypeScript field initializers defined as constructor parameters and we\n    // still need to remove `declare` fields. For now, we run the same code\n    // path but omit any field information, as if the class had no field\n    // declarations. In the future, when we fully drop the class fields\n    // transform, we can simplify this code significantly.\n    return {\n      headerInfo,\n      constructorInitializerStatements,\n      instanceInitializerNames: [],\n      staticInitializerNames: [],\n      constructorInsertPos,\n      fields: [],\n      rangesToRemove,\n    };\n  } else {\n    return {\n      headerInfo,\n      constructorInitializerStatements,\n      instanceInitializerNames,\n      staticInitializerNames,\n      constructorInsertPos,\n      fields,\n      rangesToRemove,\n    };\n  }\n} exports.default = getClassInfo;\n\n/**\n * Move the token processor to the next method/field in the class.\n *\n * To do that, we seek forward to the next start of a class name (either an open\n * bracket or an identifier, or the closing curly brace), then seek backward to\n * include any access modifiers.\n */\nfunction skipToNextClassElement(tokens, classContextId) {\n  tokens.nextToken();\n  while (tokens.currentToken().contextId !== classContextId) {\n    tokens.nextToken();\n  }\n  while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {\n    tokens.previousToken();\n  }\n}\n\nfunction processClassHeader(tokens) {\n  const classToken = tokens.currentToken();\n  const contextId = classToken.contextId;\n  if (contextId == null) {\n    throw new Error(\"Expected context ID on class token.\");\n  }\n  const isExpression = classToken.isExpression;\n  if (isExpression == null) {\n    throw new Error(\"Expected isExpression on class token.\");\n  }\n  let className = null;\n  let hasSuperclass = false;\n  tokens.nextToken();\n  if (tokens.matches1(_types.TokenType.name)) {\n    className = tokens.identifierName();\n  }\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {\n    // If this has a superclass, there will always be an `extends` token. If it doesn't have a\n    // superclass, only type parameters and `implements` clauses can show up here, all of which\n    // consist only of type tokens. A declaration like `class A<B extends C> {` should *not* count\n    // as having a superclass.\n    if (tokens.matches1(_types.TokenType._extends) && !tokens.currentToken().isType) {\n      hasSuperclass = true;\n    }\n    tokens.nextToken();\n  }\n  return {isExpression, className, hasSuperclass};\n}\n\n/**\n * Extract useful information out of a constructor, starting at the \"constructor\" name.\n */\nfunction processConstructor(tokens)\n\n\n {\n  const constructorInitializerStatements = [];\n\n  tokens.nextToken();\n  const constructorContextId = tokens.currentToken().contextId;\n  if (constructorContextId == null) {\n    throw new Error(\"Expected context ID on open-paren starting constructor params.\");\n  }\n  // Advance through parameters looking for access modifiers.\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, constructorContextId)) {\n    if (tokens.currentToken().contextId === constructorContextId) {\n      // Current token is an open paren or comma just before a param, so check\n      // that param for access modifiers.\n      tokens.nextToken();\n      if (isAccessModifier(tokens.currentToken())) {\n        tokens.nextToken();\n        while (isAccessModifier(tokens.currentToken())) {\n          tokens.nextToken();\n        }\n        const token = tokens.currentToken();\n        if (token.type !== _types.TokenType.name) {\n          throw new Error(\"Expected identifier after access modifiers in constructor arg.\");\n        }\n        const name = tokens.identifierNameForToken(token);\n        constructorInitializerStatements.push(`this.${name} = ${name}`);\n      }\n    } else {\n      tokens.nextToken();\n    }\n  }\n  // )\n  tokens.nextToken();\n  let constructorInsertPos = tokens.currentIndex();\n\n  // Advance through body looking for a super call.\n  let foundSuperCall = false;\n  while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, constructorContextId)) {\n    if (!foundSuperCall && tokens.matches2(_types.TokenType._super, _types.TokenType.parenL)) {\n      tokens.nextToken();\n      const superCallContextId = tokens.currentToken().contextId;\n      if (superCallContextId == null) {\n        throw new Error(\"Expected a context ID on the super call\");\n      }\n      while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, superCallContextId)) {\n        tokens.nextToken();\n      }\n      constructorInsertPos = tokens.currentIndex();\n      foundSuperCall = true;\n    }\n    tokens.nextToken();\n  }\n  // }\n  tokens.nextToken();\n\n  return {constructorInitializerStatements, constructorInsertPos};\n}\n\n/**\n * Determine if this is any token that can go before the name in a method/field.\n */\nfunction isAccessModifier(token) {\n  return [\n    _types.TokenType._async,\n    _types.TokenType._get,\n    _types.TokenType._set,\n    _types.TokenType.plus,\n    _types.TokenType.minus,\n    _types.TokenType._readonly,\n    _types.TokenType._static,\n    _types.TokenType._public,\n    _types.TokenType._private,\n    _types.TokenType._protected,\n    _types.TokenType._override,\n    _types.TokenType._abstract,\n    _types.TokenType.star,\n    _types.TokenType._declare,\n    _types.TokenType.hash,\n  ].includes(token.type);\n}\n\n/**\n * The next token or set of tokens is either an identifier or an expression in square brackets, for\n * a method or field name.\n */\nfunction skipFieldName(tokens) {\n  if (tokens.matches1(_types.TokenType.bracketL)) {\n    const startToken = tokens.currentToken();\n    const classContextId = startToken.contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected class context ID on computed name open bracket.\");\n    }\n    while (!tokens.matchesContextIdAndLabel(_types.TokenType.bracketR, classContextId)) {\n      tokens.nextToken();\n    }\n    tokens.nextToken();\n  } else {\n    tokens.nextToken();\n  }\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _types = require('../parser/tokenizer/types');\n\n\n function elideImportEquals(tokens) {\n  // import\n  tokens.removeInitialToken();\n  // name\n  tokens.removeToken();\n  // =\n  tokens.removeToken();\n  // name or require\n  tokens.removeToken();\n  // Handle either `import A = require('A')` or `import A = B.C.D`.\n  if (tokens.matches1(_types.TokenType.parenL)) {\n    // (\n    tokens.removeToken();\n    // path string\n    tokens.removeToken();\n    // )\n    tokens.removeToken();\n  } else {\n    while (tokens.matches1(_types.TokenType.dot)) {\n      // .\n      tokens.removeToken();\n      // name\n      tokens.removeToken();\n    }\n  }\n} exports.default = elideImportEquals;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _tokenizer = require('../parser/tokenizer');\nvar _types = require('../parser/tokenizer/types');\n\n\n\n\n\n\n\n const EMPTY_DECLARATION_INFO = {\n  typeDeclarations: new Set(),\n  valueDeclarations: new Set(),\n}; exports.EMPTY_DECLARATION_INFO = EMPTY_DECLARATION_INFO;\n\n/**\n * Get all top-level identifiers that should be preserved when exported in TypeScript.\n *\n * Examples:\n * - If an identifier is declared as `const x`, then `export {x}` should be preserved.\n * - If it's declared as `type x`, then `export {x}` should be removed.\n * - If it's declared as both `const x` and `type x`, then the export should be preserved.\n * - Classes and enums should be preserved (even though they also introduce types).\n * - Imported identifiers should be preserved since we don't have enough information to\n *   rule them out. --isolatedModules disallows re-exports, which catches errors here.\n */\n function getDeclarationInfo(tokens) {\n  const typeDeclarations = new Set();\n  const valueDeclarations = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    const token = tokens.tokens[i];\n    if (token.type === _types.TokenType.name && _tokenizer.isTopLevelDeclaration.call(void 0, token)) {\n      if (token.isType) {\n        typeDeclarations.add(tokens.identifierNameForToken(token));\n      } else {\n        valueDeclarations.add(tokens.identifierNameForToken(token));\n      }\n    }\n  }\n  return {typeDeclarations, valueDeclarations};\n} exports.default = getDeclarationInfo;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _types = require('../parser/tokenizer/types');\n\n\n\n/**\n * Common method sharing code between CJS and ESM cases, since they're the same here.\n */\n function shouldElideDefaultExport(\n  isTypeScriptTransformEnabled,\n  tokens,\n  declarationInfo,\n) {\n  if (!isTypeScriptTransformEnabled) {\n    return false;\n  }\n  const exportToken = tokens.currentToken();\n  if (exportToken.rhsEndIndex == null) {\n    throw new Error(\"Expected non-null rhsEndIndex on export token.\");\n  }\n  // The export must be of the form `export default a` or `export default a;`.\n  const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();\n  if (\n    numTokens !== 3 &&\n    !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, _types.TokenType.semi))\n  ) {\n    return false;\n  }\n  const identifierToken = tokens.tokenAtRelativeIndex(2);\n  if (identifierToken.type !== _types.TokenType.name) {\n    return false;\n  }\n  const exportedName = tokens.identifierNameForToken(identifierToken);\n  return (\n    declarationInfo.typeDeclarations.has(exportedName) &&\n    !declarationInfo.valueDeclarations.has(exportedName)\n  );\n} exports.default = shouldElideDefaultExport;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _tokenizer = require('../parser/tokenizer');\nvar _keywords = require('../parser/tokenizer/keywords');\nvar _types = require('../parser/tokenizer/types');\n\nvar _elideImportEquals = require('../util/elideImportEquals'); var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);\n\n\n\nvar _getDeclarationInfo = require('../util/getDeclarationInfo'); var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);\nvar _shouldElideDefaultExport = require('../util/shouldElideDefaultExport'); var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);\n\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Class for editing import statements when we are transforming to commonjs.\n */\n class CJSImportTransformer extends _Transformer2.default {\n   __init() {this.hadExport = false}\n   __init2() {this.hadNamedExport = false}\n   __init3() {this.hadDefaultExport = false}\n  \n\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     nameManager,\n     reactHotLoaderTransformer,\n     enableLegacyBabel5ModuleInterop,\n     isTypeScriptTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.enableLegacyBabel5ModuleInterop = enableLegacyBabel5ModuleInterop;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;CJSImportTransformer.prototype.__init.call(this);CJSImportTransformer.prototype.__init2.call(this);CJSImportTransformer.prototype.__init3.call(this);;\n    this.declarationInfo = isTypeScriptTransformEnabled\n      ? _getDeclarationInfo2.default.call(void 0, tokens)\n      : _getDeclarationInfo.EMPTY_DECLARATION_INFO;\n  }\n\n  getPrefixCode() {\n    let prefix = \"\";\n    if (this.hadExport) {\n      prefix += 'Object.defineProperty(exports, \"__esModule\", {value: true});';\n    }\n    return prefix;\n  }\n\n  getSuffixCode() {\n    if (this.enableLegacyBabel5ModuleInterop && this.hadDefaultExport && !this.hadNamedExport) {\n      return \"\\nmodule.exports = exports.default;\\n\";\n    }\n    return \"\";\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (this.tokens.matches1(_types.TokenType._import)) {\n      this.processImport();\n      return true;\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._export) && !this.tokens.currentToken().isType) {\n      this.hadExport = true;\n      return this.processExport();\n    }\n    if (this.tokens.matches2(_types.TokenType.name, _types.TokenType.postIncDec)) {\n      // Fall through to normal identifier matching if this doesn't apply.\n      if (this.processPostIncDec()) {\n        return true;\n      }\n    }\n    if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.jsxName)) {\n      return this.processIdentifier();\n    }\n    if (this.tokens.matches1(_types.TokenType.eq)) {\n      return this.processAssignment();\n    }\n    if (this.tokens.matches1(_types.TokenType.assign)) {\n      return this.processComplexAssignment();\n    }\n    if (this.tokens.matches1(_types.TokenType.preIncDec)) {\n      return this.processPreIncDec();\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.importProcessor.isTypeName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      _elideImportEquals2.default.call(void 0, this.tokens);\n    } else {\n      // Otherwise, switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n  /**\n   * Transform this:\n   * import foo, {bar} from 'baz';\n   * into\n   * var _baz = require('baz'); var _baz2 = _interopRequireDefault(_baz);\n   *\n   * The import code was already generated in the import preprocessing step, so\n   * we just need to look it up.\n   */\n   processImport() {\n    if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {\n      this.tokens.replaceToken(\"Promise.resolve().then(() => require\");\n      const contextId = this.tokens.currentToken().contextId;\n      if (contextId == null) {\n        throw new Error(\"Expected context ID on dynamic import invocation.\");\n      }\n      this.tokens.copyToken();\n      while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.parenR, contextId)) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.replaceToken(\"))\");\n      return;\n    }\n\n    const wasOnlyTypes = this.removeImportAndDetectIfType();\n\n    if (wasOnlyTypes) {\n      this.tokens.removeToken();\n    } else {\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n      this.tokens.appendCode(this.importProcessor.claimImportCode(path));\n    }\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n  /**\n   * Erase this import, and return true if it was either of the form \"import type\" or contained only\n   * \"type\" named imports. Such imports should not even do a side-effect import.\n   *\n   * The position should end at the import string.\n   */\n   removeImportAndDetectIfType() {\n    this.tokens.removeInitialToken();\n    if (\n      this.tokens.matchesContextual(_keywords.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      this.removeRemainingImport();\n      return true;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.star)) {\n      // We have a default import or namespace import, so there must be some\n      // non-type import.\n      this.removeRemainingImport();\n      return false;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      return false;\n    }\n\n    let foundNonType = false;\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      // Check if any named imports are of the form \"foo\" or \"foo as bar\", with\n      // no leading \"type\".\n      if ((!foundNonType && this.tokens.matches1(_types.TokenType.braceL)) || this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n        if (\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.braceR) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          foundNonType = true;\n        }\n      }\n      this.tokens.removeToken();\n    }\n    return !foundNonType;\n  }\n\n   removeRemainingImport() {\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processIdentifier() {\n    const token = this.tokens.currentToken();\n    if (token.shadowsGlobal) {\n      return false;\n    }\n\n    if (token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand) {\n      return this.processObjectShorthand();\n    }\n\n    if (token.identifierRole !== _tokenizer.IdentifierRole.Access) {\n      return false;\n    }\n    const replacement = this.importProcessor.getIdentifierReplacement(\n      this.tokens.identifierNameForToken(token),\n    );\n    if (!replacement) {\n      return false;\n    }\n    // Tolerate any number of closing parens while looking for an opening paren\n    // that indicates a function call.\n    let possibleOpenParenIndex = this.tokens.currentIndex() + 1;\n    while (\n      possibleOpenParenIndex < this.tokens.tokens.length &&\n      this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenR\n    ) {\n      possibleOpenParenIndex++;\n    }\n    // Avoid treating imported functions as methods of their `exports` object\n    // by using `(0, f)` when the identifier is in a paren expression. Else\n    // use `Function.prototype.call` when the identifier is a guaranteed\n    // function call. When using `call`, pass undefined as the context.\n    if (this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenL) {\n      if (\n        this.tokens.tokenAtRelativeIndex(1).type === _types.TokenType.parenL &&\n        this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._new\n      ) {\n        this.tokens.replaceToken(`${replacement}.call(void 0, `);\n        // Remove the old paren.\n        this.tokens.removeToken();\n        // Balance out the new paren.\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_types.TokenType.parenR);\n      } else {\n        // See here: http://2ality.com/2015/12/references.html\n        this.tokens.replaceToken(`(0, ${replacement})`);\n      }\n    } else {\n      this.tokens.replaceToken(replacement);\n    }\n    return true;\n  }\n\n  processObjectShorthand() {\n    const identifier = this.tokens.identifierName();\n    const replacement = this.importProcessor.getIdentifierReplacement(identifier);\n    if (!replacement) {\n      return false;\n    }\n    this.tokens.replaceToken(`${identifier}: ${replacement}`);\n    return true;\n  }\n\n  processExport() {\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)\n    ) {\n      // Let the TypeScript transform handle it.\n      return false;\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {\n      this.processExportDefault();\n      this.hadDefaultExport = true;\n      return true;\n    }\n    this.hadNamedExport = true;\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._var) ||\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._let) ||\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._const)\n    ) {\n      this.processExportVar();\n      return true;\n    } else if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._function) ||\n      // export async function\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType.name, _types.TokenType._function)\n    ) {\n      this.processExportFunction();\n      return true;\n    } else if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._class) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._abstract, _types.TokenType._class)\n    ) {\n      this.processExportClass();\n      return true;\n    } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {\n      this.processExportBindings();\n      return true;\n    } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.star)) {\n      this.processExportStar();\n      return true;\n    } else if (\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType.name, _types.TokenType.braceL) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)\n    ) {\n      // TS `export type {` case: just remove the export entirely.\n      this.tokens.removeInitialToken();\n      while (!this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n\n      // Remove type re-export `... } from './T'`\n      if (\n        this.tokens.matchesContextual(_keywords.ContextualKeyword._from) &&\n        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.string)\n      ) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n      }\n      return true;\n    } else {\n      throw new Error(\"Unrecognized export syntax.\");\n    }\n  }\n\n   processAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    // If the LHS is a type identifier, this must be a declaration like `let a: b = c;`,\n    // with `b` as the identifier, so nothing needs to be done in that case.\n    if (identifierToken.isType || identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {\n      return false;\n    }\n    if (index >= 2 && [_types.TokenType._var, _types.TokenType._let, _types.TokenType._const].includes(this.tokens.tokens[index - 2].type)) {\n      // Declarations don't need an extra assignment. This doesn't avoid the\n      // assignment for comma-separated declarations, but it's still correct\n      // since the assignment is just redundant.\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.copyToken();\n    this.tokens.appendCode(` ${assignmentSnippet} =`);\n    return true;\n  }\n\n  /**\n   * Process something like `a += 3`, where `a` might be an exported value.\n   */\n   processComplexAssignment() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index - 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {\n      return false;\n    }\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(\n      this.tokens.identifierNameForToken(identifierToken),\n    );\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(` = ${assignmentSnippet}`);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `++a`, where `a` might be an exported value.\n   */\n   processPreIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    // Ignore things like ++a.b and ++a[b] and ++a().b.\n    if (\n      index + 2 < this.tokens.tokens.length &&\n      (this.tokens.matches1AtIndex(index + 2, _types.TokenType.dot) ||\n        this.tokens.matches1AtIndex(index + 2, _types.TokenType.bracketL) ||\n        this.tokens.matches1AtIndex(index + 2, _types.TokenType.parenL))\n    ) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    this.tokens.appendCode(`${assignmentSnippet} = `);\n    this.tokens.copyToken();\n    return true;\n  }\n\n  /**\n   * Process something like `a++`, where `a` might be an exported value.\n   * This starts at the `a`, not at the `++`.\n   */\n   processPostIncDec() {\n    const index = this.tokens.currentIndex();\n    const identifierToken = this.tokens.tokens[index];\n    const operatorToken = this.tokens.tokens[index + 1];\n    if (identifierToken.type !== _types.TokenType.name) {\n      return false;\n    }\n    if (identifierToken.shadowsGlobal) {\n      return false;\n    }\n    if (index >= 1 && this.tokens.matches1AtIndex(index - 1, _types.TokenType.dot)) {\n      return false;\n    }\n    const identifierName = this.tokens.identifierNameForToken(identifierToken);\n    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);\n    if (!assignmentSnippet) {\n      return false;\n    }\n    const operatorCode = this.tokens.rawCodeForToken(operatorToken);\n    // We might also replace the identifier with something like exports.x, so\n    // do that replacement here as well.\n    const base = this.importProcessor.getIdentifierReplacement(identifierName) || identifierName;\n    if (operatorCode === \"++\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} + 1, ${base} - 1)`);\n    } else if (operatorCode === \"--\") {\n      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} - 1, ${base} + 1)`);\n    } else {\n      throw new Error(`Unexpected operator: ${operatorCode}`);\n    }\n    this.tokens.removeToken();\n    return true;\n  }\n\n   processExportDefault() {\n    if (\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) ||\n      // export default async function\n      (this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name) &&\n        this.tokens.matchesContextualAtIndex(\n          this.tokens.currentIndex() + 2,\n          _keywords.ContextualKeyword._async,\n        ))\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      // Named function export case: change it to a top-level function\n      // declaration followed by exports statement.\n      const name = this.processNamedFunction();\n      this.tokens.appendCode(` exports.default = ${name};`);\n    } else if (\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) ||\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name)\n    ) {\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_types.TokenType._abstract)) {\n        this.tokens.removeToken();\n      }\n      const name = this.rootTransformer.processNamedClass();\n      this.tokens.appendCode(` exports.default = ${name};`);\n    } else if (this.tokens.matches3(_types.TokenType._export, _types.TokenType._default, _types.TokenType.at)) {\n      throw new Error(\"Export default statements with decorators are not yet supported.\");\n      // After this point, this is a plain \"export default E\" statement.\n    } else if (\n      _shouldElideDefaultExport2.default.call(void 0, this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n    } else if (this.reactHotLoaderTransformer) {\n      // We need to assign E to a variable. Change \"export default E\" to\n      // \"let _default; exports.default = _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; exports.`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` = ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n    } else {\n      // Change \"export default E\" to \"exports.default = E\"\n      this.tokens.replaceToken(\"exports.\");\n      this.tokens.copyToken();\n      this.tokens.appendCode(\" =\");\n    }\n  }\n\n  /**\n   * Transform a declaration like `export var`, `export let`, or `export const`.\n   */\n   processExportVar() {\n    if (this.isSimpleExportVar()) {\n      this.processSimpleExportVar();\n    } else {\n      this.processComplexExportVar();\n    }\n  }\n\n  /**\n   * Determine if the export is of the form:\n   * export var/let/const [varName] = [expr];\n   * In other words, determine if function name inference might apply.\n   */\n   isSimpleExportVar() {\n    let tokenIndex = this.tokens.currentIndex();\n    // export\n    tokenIndex++;\n    // var/let/const\n    tokenIndex++;\n    if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.name)) {\n      return false;\n    }\n    tokenIndex++;\n    while (tokenIndex < this.tokens.tokens.length && this.tokens.tokens[tokenIndex].isType) {\n      tokenIndex++;\n    }\n    if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.eq)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Transform an `export var` declaration initializing a single variable.\n   *\n   * For example, this:\n   * export const f = () => {};\n   * becomes this:\n   * const f = () => {}; exports.f = f;\n   *\n   * The variable is unused (e.g. exports.f has the true value of the export).\n   * We need to produce an assignment of this form so that the function will\n   * have an inferred name of \"f\", which wouldn't happen in the more general\n   * case below.\n   */\n   processSimpleExportVar() {\n    // export\n    this.tokens.removeInitialToken();\n    // var/let/const\n    this.tokens.copyToken();\n    const varName = this.tokens.identifierName();\n    // x: number  ->  x\n    while (!this.tokens.matches1(_types.TokenType.eq)) {\n      this.rootTransformer.processToken();\n    }\n    const endIndex = this.tokens.currentToken().rhsEndIndex;\n    if (endIndex == null) {\n      throw new Error(\"Expected = token with an end index.\");\n    }\n    while (this.tokens.currentIndex() < endIndex) {\n      this.rootTransformer.processToken();\n    }\n    this.tokens.appendCode(`; exports.${varName} = ${varName}`);\n  }\n\n  /**\n   * Transform normal declaration exports, including handling destructuring.\n   * For example, this:\n   * export const {x: [a = 2, b], c} = d;\n   * becomes this:\n   * ({x: [exports.a = 2, exports.b], c: exports.c} = d;)\n   */\n   processComplexExportVar() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n    const needsParens = this.tokens.matches1(_types.TokenType.braceL);\n    if (needsParens) {\n      this.tokens.appendCode(\"(\");\n    }\n\n    let depth = 0;\n    while (true) {\n      if (\n        this.tokens.matches1(_types.TokenType.braceL) ||\n        this.tokens.matches1(_types.TokenType.dollarBraceL) ||\n        this.tokens.matches1(_types.TokenType.bracketL)\n      ) {\n        depth++;\n        this.tokens.copyToken();\n      } else if (this.tokens.matches1(_types.TokenType.braceR) || this.tokens.matches1(_types.TokenType.bracketR)) {\n        depth--;\n        this.tokens.copyToken();\n      } else if (\n        depth === 0 &&\n        !this.tokens.matches1(_types.TokenType.name) &&\n        !this.tokens.currentToken().isType\n      ) {\n        break;\n      } else if (this.tokens.matches1(_types.TokenType.eq)) {\n        // Default values might have assignments in the RHS that we want to ignore, so skip past\n        // them.\n        const endIndex = this.tokens.currentToken().rhsEndIndex;\n        if (endIndex == null) {\n          throw new Error(\"Expected = token with an end index.\");\n        }\n        while (this.tokens.currentIndex() < endIndex) {\n          this.rootTransformer.processToken();\n        }\n      } else {\n        const token = this.tokens.currentToken();\n        if (_tokenizer.isDeclaration.call(void 0, token)) {\n          const name = this.tokens.identifierName();\n          let replacement = this.importProcessor.getIdentifierReplacement(name);\n          if (replacement === null) {\n            throw new Error(`Expected a replacement for ${name} in \\`export var\\` syntax.`);\n          }\n          if (_tokenizer.isObjectShorthandDeclaration.call(void 0, token)) {\n            replacement = `${name}: ${replacement}`;\n          }\n          this.tokens.replaceToken(replacement);\n        } else {\n          this.rootTransformer.processToken();\n        }\n      }\n    }\n\n    if (needsParens) {\n      // Seek to the end of the RHS.\n      const endIndex = this.tokens.currentToken().rhsEndIndex;\n      if (endIndex == null) {\n        throw new Error(\"Expected = token with an end index.\");\n      }\n      while (this.tokens.currentIndex() < endIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(\")\");\n    }\n  }\n\n  /**\n   * Transform this:\n   * export function foo() {}\n   * into this:\n   * function foo() {} exports.foo = foo;\n   */\n   processExportFunction() {\n    this.tokens.replaceToken(\"\");\n    const name = this.processNamedFunction();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Skip past a function with a name and return that name.\n   */\n   processNamedFunction() {\n    if (this.tokens.matches1(_types.TokenType._function)) {\n      this.tokens.copyToken();\n    } else if (this.tokens.matches2(_types.TokenType.name, _types.TokenType._function)) {\n      if (!this.tokens.matchesContextual(_keywords.ContextualKeyword._async)) {\n        throw new Error(\"Expected async keyword in function export.\");\n      }\n      this.tokens.copyToken();\n      this.tokens.copyToken();\n    }\n    if (this.tokens.matches1(_types.TokenType.star)) {\n      this.tokens.copyToken();\n    }\n    if (!this.tokens.matches1(_types.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported function name.\");\n    }\n    const name = this.tokens.identifierName();\n    this.tokens.copyToken();\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.parenL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_types.TokenType.parenR);\n    this.rootTransformer.processPossibleTypeRange();\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    this.rootTransformer.processBalancedCode();\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    return name;\n  }\n\n  /**\n   * Transform this:\n   * export class A {}\n   * into this:\n   * class A {} exports.A = A;\n   */\n   processExportClass() {\n    this.tokens.removeInitialToken();\n    if (this.tokens.matches1(_types.TokenType._abstract)) {\n      this.tokens.removeToken();\n    }\n    const name = this.rootTransformer.processNamedClass();\n    this.tokens.appendCode(` exports.${name} = ${name};`);\n  }\n\n  /**\n   * Transform this:\n   * export {a, b as c};\n   * into this:\n   * exports.a = a; exports.c = b;\n   *\n   * OR\n   *\n   * Transform this:\n   * export {a, b as c} from './foo';\n   * into the pre-generated Object.defineProperty code from the ImportProcessor.\n   *\n   * For the first case, if the TypeScript transform is enabled, we need to skip\n   * exports that are only defined as types.\n   */\n   processExportBindings() {\n    this.tokens.removeInitialToken();\n    this.tokens.removeToken();\n\n    const exportStatements = [];\n    while (true) {\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n\n      const localName = this.tokens.identifierName();\n      let exportedName;\n      this.tokens.removeToken();\n      if (this.tokens.matchesContextual(_keywords.ContextualKeyword._as)) {\n        this.tokens.removeToken();\n        exportedName = this.tokens.identifierName();\n        this.tokens.removeToken();\n      } else {\n        exportedName = localName;\n      }\n      if (!this.shouldElideExportedIdentifier(localName)) {\n        const newLocalName = this.importProcessor.getIdentifierReplacement(localName);\n        exportStatements.push(`exports.${exportedName} = ${newLocalName || localName};`);\n      }\n\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        break;\n      }\n      if (this.tokens.matches2(_types.TokenType.comma, _types.TokenType.braceR)) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        break;\n      } else if (this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n      } else {\n        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.currentToken())}`);\n      }\n    }\n\n    if (this.tokens.matchesContextual(_keywords.ContextualKeyword._from)) {\n      // This is an export...from, so throw away the normal named export code\n      // and use the Object.defineProperty code from ImportProcessor.\n      this.tokens.removeToken();\n      const path = this.tokens.stringValue();\n      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n    } else {\n      // This is a normal named export, so use that.\n      this.tokens.appendCode(exportStatements.join(\" \"));\n    }\n\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   processExportStar() {\n    this.tokens.removeInitialToken();\n    while (!this.tokens.matches1(_types.TokenType.string)) {\n      this.tokens.removeToken();\n    }\n    const path = this.tokens.stringValue();\n    this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));\n    if (this.tokens.matches1(_types.TokenType.semi)) {\n      this.tokens.removeToken();\n    }\n  }\n\n   shouldElideExportedIdentifier(name) {\n    return this.isTypeScriptTransformEnabled && !this.declarationInfo.valueDeclarations.has(name);\n  }\n} exports.default = CJSImportTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _keywords = require('../parser/tokenizer/keywords');\nvar _types = require('../parser/tokenizer/types');\n\nvar _elideImportEquals = require('../util/elideImportEquals'); var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);\n\n\n\nvar _getDeclarationInfo = require('../util/getDeclarationInfo'); var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);\nvar _getNonTypeIdentifiers = require('../util/getNonTypeIdentifiers');\nvar _shouldElideDefaultExport = require('../util/shouldElideDefaultExport'); var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Class for editing import statements when we are keeping the code as ESM. We still need to remove\n * type-only imports in TypeScript and Flow.\n */\n class ESMImportTransformer extends _Transformer2.default {\n  \n  \n\n  constructor(\n     tokens,\n     nameManager,\n     reactHotLoaderTransformer,\n     isTypeScriptTransformEnabled,\n    options,\n  ) {\n    super();this.tokens = tokens;this.nameManager = nameManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;;\n    this.nonTypeIdentifiers = isTypeScriptTransformEnabled\n      ? _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, tokens, options)\n      : new Set();\n    this.declarationInfo = isTypeScriptTransformEnabled\n      ? _getDeclarationInfo2.default.call(void 0, tokens)\n      : _getDeclarationInfo.EMPTY_DECLARATION_INFO;\n  }\n\n  process() {\n    // TypeScript `import foo = require('foo');` should always just be translated to plain require.\n    if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {\n      return this.processImportEquals();\n    }\n    if (\n      this.tokens.matches4(_types.TokenType._import, _types.TokenType.name, _types.TokenType.name, _types.TokenType.eq) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)\n    ) {\n      // import type T = require('T')\n      this.tokens.removeInitialToken();\n      // This construct is always exactly 8 tokens long, so remove the 7 remaining tokens.\n      for (let i = 0; i < 7; i++) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {\n      this.tokens.replaceToken(\"module.exports\");\n      return true;\n    }\n    if (\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._import, _types.TokenType.name, _types.TokenType.name, _types.TokenType.eq) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, _keywords.ContextualKeyword._type)\n    ) {\n      // export import type T = require('T')\n      this.tokens.removeInitialToken();\n      // This construct is always exactly 9 tokens long, so remove the 8 remaining tokens.\n      for (let i = 0; i < 8; i++) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._import)) {\n      return this.processImport();\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {\n      return this.processExportDefault();\n    }\n    if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {\n      return this.processNamedExports();\n    }\n    if (\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType.name, _types.TokenType.braceL) &&\n      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)\n    ) {\n      // TS `export type {` case: just remove the export entirely.\n      this.tokens.removeInitialToken();\n      while (!this.tokens.matches1(_types.TokenType.braceR)) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n\n      // Remove type re-export `... } from './T'`\n      if (\n        this.tokens.matchesContextual(_keywords.ContextualKeyword._from) &&\n        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.string)\n      ) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    return false;\n  }\n\n   processImportEquals() {\n    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    if (this.isTypeName(importName)) {\n      // If this name is only used as a type, elide the whole import.\n      _elideImportEquals2.default.call(void 0, this.tokens);\n    } else {\n      // Otherwise, switch `import` to `const`.\n      this.tokens.replaceToken(\"const\");\n    }\n    return true;\n  }\n\n   processImport() {\n    if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {\n      // Dynamic imports don't need to be transformed.\n      return false;\n    }\n\n    const snapshot = this.tokens.snapshot();\n    const allImportsRemoved = this.removeImportTypeBindings();\n    if (allImportsRemoved) {\n      this.tokens.restoreToSnapshot(snapshot);\n      while (!this.tokens.matches1(_types.TokenType.string)) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      if (this.tokens.matches1(_types.TokenType.semi)) {\n        this.tokens.removeToken();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Remove type bindings from this import, leaving the rest of the import intact.\n   *\n   * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out\n   * of the replacement operation, so we can return early here.\n   */\n   removeImportTypeBindings() {\n    this.tokens.copyExpectedToken(_types.TokenType._import);\n    if (\n      this.tokens.matchesContextual(_keywords.ContextualKeyword._type) &&\n      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) &&\n      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)\n    ) {\n      // This is an \"import type\" statement, so exit early.\n      return true;\n    }\n\n    if (this.tokens.matches1(_types.TokenType.string)) {\n      // This is a bare import, so we should proceed with the import.\n      this.tokens.copyToken();\n      return false;\n    }\n\n    let foundNonTypeImport = false;\n\n    if (this.tokens.matches1(_types.TokenType.name)) {\n      if (this.isTypeName(this.tokens.identifierName())) {\n        this.tokens.removeToken();\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        foundNonTypeImport = true;\n        this.tokens.copyToken();\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.copyToken();\n        }\n      }\n    }\n\n    if (this.tokens.matches1(_types.TokenType.star)) {\n      if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n        this.tokens.removeToken();\n      } else {\n        foundNonTypeImport = true;\n        this.tokens.copyExpectedToken(_types.TokenType.star);\n        this.tokens.copyExpectedToken(_types.TokenType.name);\n        this.tokens.copyExpectedToken(_types.TokenType.name);\n      }\n    } else if (this.tokens.matches1(_types.TokenType.braceL)) {\n      this.tokens.copyToken();\n      while (!this.tokens.matches1(_types.TokenType.braceR)) {\n        if (\n          this.tokens.matches3(_types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches3(_types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // type foo\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          if (this.tokens.matches1(_types.TokenType.comma)) {\n            this.tokens.removeToken();\n          }\n        } else if (\n          this.tokens.matches5(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches5(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // type foo as bar\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          this.tokens.removeToken();\n          if (this.tokens.matches1(_types.TokenType.comma)) {\n            this.tokens.removeToken();\n          }\n        } else if (\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches2(_types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // foo\n          if (this.isTypeName(this.tokens.identifierName())) {\n            this.tokens.removeToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.removeToken();\n            }\n          } else {\n            foundNonTypeImport = true;\n            this.tokens.copyToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.copyToken();\n            }\n          }\n        } else if (\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) ||\n          this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)\n        ) {\n          // foo as bar\n          if (this.isTypeName(this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2))) {\n            this.tokens.removeToken();\n            this.tokens.removeToken();\n            this.tokens.removeToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.removeToken();\n            }\n          } else {\n            foundNonTypeImport = true;\n            this.tokens.copyToken();\n            this.tokens.copyToken();\n            this.tokens.copyToken();\n            if (this.tokens.matches1(_types.TokenType.comma)) {\n              this.tokens.copyToken();\n            }\n          }\n        } else {\n          throw new Error(\"Unexpected import form.\");\n        }\n      }\n      this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    }\n\n    return !foundNonTypeImport;\n  }\n\n   isTypeName(name) {\n    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);\n  }\n\n   processExportDefault() {\n    if (\n      _shouldElideDefaultExport2.default.call(void 0, this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)\n    ) {\n      // If the exported value is just an identifier and should be elided by TypeScript\n      // rules, then remove it entirely. It will always have the form `export default e`,\n      // where `e` is an identifier.\n      this.tokens.removeInitialToken();\n      this.tokens.removeToken();\n      this.tokens.removeToken();\n      return true;\n    }\n\n    const alreadyHasName =\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) ||\n      // export default async function\n      (this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name) &&\n        this.tokens.matchesContextualAtIndex(\n          this.tokens.currentIndex() + 2,\n          _keywords.ContextualKeyword._async,\n        )) ||\n      this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) ||\n      this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name);\n\n    if (!alreadyHasName && this.reactHotLoaderTransformer) {\n      // This is a plain \"export default E\" statement and we need to assign E to a variable.\n      // Change \"export default E\" to \"let _default; export default _default = E\"\n      const defaultVarName = this.nameManager.claimFreeName(\"_default\");\n      this.tokens.replaceToken(`let ${defaultVarName}; export`);\n      this.tokens.copyToken();\n      this.tokens.appendCode(` ${defaultVarName} =`);\n      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * In TypeScript, we need to remove named exports that were never declared or only declared as a\n   * type.\n   */\n   processNamedExports() {\n    if (!this.isTypeScriptTransformEnabled) {\n      return false;\n    }\n    this.tokens.copyExpectedToken(_types.TokenType._export);\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n\n    while (!this.tokens.matches1(_types.TokenType.braceR)) {\n      if (!this.tokens.matches1(_types.TokenType.name)) {\n        throw new Error(\"Expected identifier at the start of named export.\");\n      }\n      if (this.shouldElideExportedName(this.tokens.identifierName())) {\n        while (\n          !this.tokens.matches1(_types.TokenType.comma) &&\n          !this.tokens.matches1(_types.TokenType.braceR) &&\n          !this.tokens.isAtEnd()\n        ) {\n          this.tokens.removeToken();\n        }\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.removeToken();\n        }\n      } else {\n        while (\n          !this.tokens.matches1(_types.TokenType.comma) &&\n          !this.tokens.matches1(_types.TokenType.braceR) &&\n          !this.tokens.isAtEnd()\n        ) {\n          this.tokens.copyToken();\n        }\n        if (this.tokens.matches1(_types.TokenType.comma)) {\n          this.tokens.copyToken();\n        }\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    return true;\n  }\n\n  /**\n   * ESM elides all imports with the rule that we only elide if we see that it's\n   * a type and never see it as a value. This is in contract to CJS, which\n   * elides imports that are completely unknown.\n   */\n   shouldElideExportedName(name) {\n    return (\n      this.isTypeScriptTransformEnabled &&\n      this.declarationInfo.typeDeclarations.has(name) &&\n      !this.declarationInfo.valueDeclarations.has(name)\n    );\n  }\n} exports.default = ESMImportTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class FlowTransformer extends _Transformer2.default {\n  constructor( rootTransformer,  tokens) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;;\n  }\n\n  process() {\n    return (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    );\n  }\n} exports.default = FlowTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\n\nvar _types = require('../parser/tokenizer/types');\n\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\nconst JEST_GLOBAL_NAME = \"jest\";\nconst HOISTED_METHODS = [\"mock\", \"unmock\", \"enableAutomock\", \"disableAutomock\"];\n\n/**\n * Implementation of babel-plugin-jest-hoist, which hoists up some jest method\n * calls above the imports to allow them to override other imports.\n *\n * To preserve line numbers, rather than directly moving the jest.mock code, we\n * wrap each invocation in a function statement and then call the function from\n * the top of the file.\n */\n class JestHoistTransformer extends _Transformer2.default {\n    __init() {this.hoistedFunctionNames = []}\n\n  constructor(\n     rootTransformer,\n     tokens,\n     nameManager,\n     importProcessor,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.nameManager = nameManager;this.importProcessor = importProcessor;JestHoistTransformer.prototype.__init.call(this);;\n  }\n\n  process() {\n    if (\n      this.tokens.currentToken().scopeDepth === 0 &&\n      this.tokens.matches4(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name, _types.TokenType.parenL) &&\n      this.tokens.identifierName() === JEST_GLOBAL_NAME\n    ) {\n      // TODO: This only works if imports transform is active, which it will be for jest.\n      //       But if jest adds module support and we no longer need the import transform, this needs fixing.\n      if (_optionalChain([this, 'access', _ => _.importProcessor, 'optionalAccess', _2 => _2.getGlobalNames, 'call', _3 => _3(), 'optionalAccess', _4 => _4.has, 'call', _5 => _5(JEST_GLOBAL_NAME)])) {\n        return false;\n      }\n      return this.extractHoistedCalls();\n    }\n\n    return false;\n  }\n\n  getHoistedCode() {\n    if (this.hoistedFunctionNames.length > 0) {\n      // This will be placed before module interop code, but that's fine since\n      // imports aren't allowed in module mock factories.\n      return this.hoistedFunctionNames.map((name) => `${name}();`).join(\"\");\n    }\n    return \"\";\n  }\n\n  /**\n   * Extracts any methods calls on the jest-object that should be hoisted.\n   *\n   * According to the jest docs, https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options,\n   * mock, unmock, enableAutomock, disableAutomock, are the methods that should be hoisted.\n   *\n   * We do not apply the same checks of the arguments as babel-plugin-jest-hoist does.\n   */\n   extractHoistedCalls() {\n    // We're handling a chain of calls where `jest` may or may not need to be inserted for each call\n    // in the chain, so remove the initial `jest` to make the loop implementation cleaner.\n    this.tokens.removeToken();\n    // Track some state so that multiple non-hoisted chained calls in a row keep their chaining\n    // syntax.\n    let followsNonHoistedJestCall = false;\n\n    // Iterate through all chained calls on the jest object.\n    while (this.tokens.matches3(_types.TokenType.dot, _types.TokenType.name, _types.TokenType.parenL)) {\n      const methodName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n      const shouldHoist = HOISTED_METHODS.includes(methodName);\n      if (shouldHoist) {\n        // We've matched e.g. `.mock(...)` or similar call.\n        // Replace the initial `.` with `function __jestHoist(){jest.`\n        const hoistedFunctionName = this.nameManager.claimFreeName(\"__jestHoist\");\n        this.hoistedFunctionNames.push(hoistedFunctionName);\n        this.tokens.replaceToken(`function ${hoistedFunctionName}(){${JEST_GLOBAL_NAME}.`);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_types.TokenType.parenR);\n        this.tokens.appendCode(\";}\");\n        followsNonHoistedJestCall = false;\n      } else {\n        // This is a non-hoisted method, so just transform the code as usual.\n        if (followsNonHoistedJestCall) {\n          // If we didn't hoist the previous call, we can leave the code as-is to chain off of the\n          // previous method call. It's important to preserve the code here because we don't know\n          // for sure that the method actually returned the jest object for chaining.\n          this.tokens.copyToken();\n        } else {\n          // If we hoisted the previous call, we know it returns the jest object back, so we insert\n          // the identifier `jest` to continue the chain.\n          this.tokens.replaceToken(`${JEST_GLOBAL_NAME}.`);\n        }\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.rootTransformer.processBalancedCode();\n        this.tokens.copyExpectedToken(_types.TokenType.parenR);\n        followsNonHoistedJestCall = true;\n      }\n    }\n\n    return true;\n  }\n} exports.default = JestHoistTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _types = require('../parser/tokenizer/types');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class NumericSeparatorTransformer extends _Transformer2.default {\n  constructor( tokens) {\n    super();this.tokens = tokens;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.num)) {\n      const code = this.tokens.currentTokenCode();\n      if (code.includes(\"_\")) {\n        this.tokens.replaceToken(code.replace(/_/g, \"\"));\n        return true;\n      }\n    }\n    return false;\n  }\n} exports.default = NumericSeparatorTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _types = require('../parser/tokenizer/types');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class OptionalCatchBindingTransformer extends _Transformer2.default {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches2(_types.TokenType._catch, _types.TokenType.braceL)) {\n      this.tokens.copyToken();\n      this.tokens.appendCode(` (${this.nameManager.claimFreeName(\"e\")})`);\n      return true;\n    }\n    return false;\n  }\n} exports.default = OptionalCatchBindingTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _types = require('../parser/tokenizer/types');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Transformer supporting the optional chaining and nullish coalescing operators.\n *\n * Tech plan here:\n * https://github.com/alangpierce/sucrase/wiki/Sucrase-Optional-Chaining-and-Nullish-Coalescing-Technical-Plan\n *\n * The prefix and suffix code snippets are handled by TokenProcessor, and this transformer handles\n * the operators themselves.\n */\n class OptionalChainingNullishTransformer extends _Transformer2.default {\n  constructor( tokens,  nameManager) {\n    super();this.tokens = tokens;this.nameManager = nameManager;;\n  }\n\n  process() {\n    if (this.tokens.matches1(_types.TokenType.nullishCoalescing)) {\n      const token = this.tokens.currentToken();\n      if (this.tokens.tokens[token.nullishStartIndex].isAsyncOperation) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\", async () => (\");\n      } else {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\", () => (\");\n      }\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._delete)) {\n      const nextToken = this.tokens.tokenAtRelativeIndex(1);\n      if (nextToken.isOptionalChainStart) {\n        this.tokens.removeInitialToken();\n        return true;\n      }\n    }\n    const token = this.tokens.currentToken();\n    const chainStart = token.subscriptStartIndex;\n    if (\n      chainStart != null &&\n      this.tokens.tokens[chainStart].isOptionalChainStart &&\n      // Super subscripts can't be optional (since super is never null/undefined), and the syntax\n      // relies on the subscript being intact, so leave this token alone.\n      this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._super\n    ) {\n      const param = this.nameManager.claimFreeName(\"_\");\n      let arrowStartSnippet;\n      if (\n        chainStart > 0 &&\n        this.tokens.matches1AtIndex(chainStart - 1, _types.TokenType._delete) &&\n        this.isLastSubscriptInChain()\n      ) {\n        // Delete operations are special: we already removed the delete keyword, and to still\n        // perform a delete, we need to insert a delete in the very last part of the chain, which\n        // in correct code will always be a property access.\n        arrowStartSnippet = `${param} => delete ${param}`;\n      } else {\n        arrowStartSnippet = `${param} => ${param}`;\n      }\n      if (this.tokens.tokens[chainStart].isAsyncOperation) {\n        arrowStartSnippet = `async ${arrowStartSnippet}`;\n      }\n      if (\n        this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.parenL) ||\n        this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.lessThan)\n      ) {\n        if (this.justSkippedSuper()) {\n          this.tokens.appendCode(\".bind(this)\");\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${arrowStartSnippet}`);\n      } else if (this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.bracketL)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}`);\n      } else if (this.tokens.matches1(_types.TokenType.questionDot)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}.`);\n      } else if (this.tokens.matches1(_types.TokenType.dot)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}.`);\n      } else if (this.tokens.matches1(_types.TokenType.bracketL)) {\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}[`);\n      } else if (this.tokens.matches1(_types.TokenType.parenL)) {\n        if (this.justSkippedSuper()) {\n          this.tokens.appendCode(\".bind(this)\");\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${arrowStartSnippet}(`);\n      } else {\n        throw new Error(\"Unexpected subscript operator in optional chain.\");\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the current token is the last of its chain, so that we know whether it's eligible\n   * to have a delete op inserted.\n   *\n   * We can do this by walking forward until we determine one way or another. Each\n   * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in\n   * a nesting way, so we can track depth and walk to the end of the chain (the point where the\n   * depth goes negative) and see if any other subscript token is after us in the chain.\n   */\n  isLastSubscriptInChain() {\n    let depth = 0;\n    for (let i = this.tokens.currentIndex() + 1; ; i++) {\n      if (i >= this.tokens.tokens.length) {\n        throw new Error(\"Reached the end of the code while finding the end of the access chain.\");\n      }\n      if (this.tokens.tokens[i].isOptionalChainStart) {\n        depth++;\n      } else if (this.tokens.tokens[i].isOptionalChainEnd) {\n        depth--;\n      }\n      if (depth < 0) {\n        return true;\n      }\n\n      // This subscript token is a later one in the same chain.\n      if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Determine if we are the open-paren in an expression like super.a()?.b.\n   *\n   * We can do this by walking backward to find the previous subscript. If that subscript was\n   * preceded by a super, then we must be the subscript after it, so if this is a call expression,\n   * we'll need to attach the right context.\n   */\n  justSkippedSuper() {\n    let depth = 0;\n    let index = this.tokens.currentIndex() - 1;\n    while (true) {\n      if (index < 0) {\n        throw new Error(\n          \"Reached the start of the code while finding the start of the access chain.\",\n        );\n      }\n      if (this.tokens.tokens[index].isOptionalChainStart) {\n        depth--;\n      } else if (this.tokens.tokens[index].isOptionalChainEnd) {\n        depth++;\n      }\n      if (depth < 0) {\n        return false;\n      }\n\n      // This subscript token is a later one in the same chain.\n      if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {\n        return this.tokens.tokens[index - 1].type === _types.TokenType._super;\n      }\n      index--;\n    }\n  }\n} exports.default = OptionalChainingNullishTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _tokenizer = require('../parser/tokenizer');\nvar _types = require('../parser/tokenizer/types');\n\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n/**\n * Implementation of babel-plugin-transform-react-display-name, which adds a\n * display name to usages of React.createClass and createReactClass.\n */\n class ReactDisplayNameTransformer extends _Transformer2.default {\n  constructor(\n     rootTransformer,\n     tokens,\n     importProcessor,\n     options,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.options = options;;\n  }\n\n  process() {\n    const startIndex = this.tokens.currentIndex();\n    if (this.tokens.identifierName() === \"createReactClass\") {\n      const newName =\n        this.importProcessor && this.importProcessor.getIdentifierReplacement(\"createReactClass\");\n      if (newName) {\n        this.tokens.replaceToken(`(0, ${newName})`);\n      } else {\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    if (\n      this.tokens.matches3(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name) &&\n      this.tokens.identifierName() === \"React\" &&\n      this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === \"createClass\"\n    ) {\n      const newName = this.importProcessor\n        ? this.importProcessor.getIdentifierReplacement(\"React\") || \"React\"\n        : \"React\";\n      if (newName) {\n        this.tokens.replaceToken(newName);\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      } else {\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n        this.tokens.copyToken();\n      }\n      this.tryProcessCreateClassCall(startIndex);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * This is called with the token position at the open-paren.\n   */\n   tryProcessCreateClassCall(startIndex) {\n    const displayName = this.findDisplayName(startIndex);\n    if (!displayName) {\n      return;\n    }\n\n    if (this.classNeedsDisplayName()) {\n      this.tokens.copyExpectedToken(_types.TokenType.parenL);\n      this.tokens.copyExpectedToken(_types.TokenType.braceL);\n      this.tokens.appendCode(`displayName: '${displayName}',`);\n      this.rootTransformer.processBalancedCode();\n      this.tokens.copyExpectedToken(_types.TokenType.braceR);\n      this.tokens.copyExpectedToken(_types.TokenType.parenR);\n    }\n  }\n\n   findDisplayName(startIndex) {\n    if (startIndex < 2) {\n      return null;\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType.name, _types.TokenType.eq)) {\n      // This is an assignment (or declaration) and the LHS is either an identifier or a member\n      // expression ending in an identifier, so use that identifier name.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (\n      startIndex >= 2 &&\n      this.tokens.tokens[startIndex - 2].identifierRole === _tokenizer.IdentifierRole.ObjectKey\n    ) {\n      // This is an object literal value.\n      return this.tokens.identifierNameAtIndex(startIndex - 2);\n    }\n    if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType._export, _types.TokenType._default)) {\n      return this.getDisplayNameFromFilename();\n    }\n    return null;\n  }\n\n   getDisplayNameFromFilename() {\n    const filePath = this.options.filePath || \"unknown\";\n    const pathSegments = filePath.split(\"/\");\n    const filename = pathSegments[pathSegments.length - 1];\n    const dotIndex = filename.lastIndexOf(\".\");\n    const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);\n    if (baseFilename === \"index\" && pathSegments[pathSegments.length - 2]) {\n      return pathSegments[pathSegments.length - 2];\n    } else {\n      return baseFilename;\n    }\n  }\n\n  /**\n   * We only want to add a display name when this is a function call containing\n   * one argument, which is an object literal without `displayName` as an\n   * existing key.\n   */\n   classNeedsDisplayName() {\n    let index = this.tokens.currentIndex();\n    if (!this.tokens.matches2(_types.TokenType.parenL, _types.TokenType.braceL)) {\n      return false;\n    }\n    // The block starts on the {, and we expect any displayName key to be in\n    // that context. We need to ignore other other contexts to avoid matching\n    // nested displayName keys.\n    const objectStartIndex = index + 1;\n    const objectContextId = this.tokens.tokens[objectStartIndex].contextId;\n    if (objectContextId == null) {\n      throw new Error(\"Expected non-null context ID on object open-brace.\");\n    }\n\n    for (; index < this.tokens.tokens.length; index++) {\n      const token = this.tokens.tokens[index];\n      if (token.type === _types.TokenType.braceR && token.contextId === objectContextId) {\n        index++;\n        break;\n      }\n\n      if (\n        this.tokens.identifierNameAtIndex(index) === \"displayName\" &&\n        this.tokens.tokens[index].identifierRole === _tokenizer.IdentifierRole.ObjectKey &&\n        token.contextId === objectContextId\n      ) {\n        // We found a displayName key, so bail out.\n        return false;\n      }\n    }\n\n    if (index === this.tokens.tokens.length) {\n      throw new Error(\"Unexpected end of input when processing React class.\");\n    }\n\n    // If we got this far, we know we have createClass with an object with no\n    // display name, so we want to proceed as long as that was the only argument.\n    return (\n      this.tokens.matches1AtIndex(index, _types.TokenType.parenR) ||\n      this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.parenR)\n    );\n  }\n} exports.default = ReactDisplayNameTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _tokenizer = require('../parser/tokenizer');\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class ReactHotLoaderTransformer extends _Transformer2.default {\n   __init() {this.extractedDefaultExportName = null}\n\n  constructor( tokens,  filePath) {\n    super();this.tokens = tokens;this.filePath = filePath;ReactHotLoaderTransformer.prototype.__init.call(this);;\n  }\n\n  setExtractedDefaultExportName(extractedDefaultExportName) {\n    this.extractedDefaultExportName = extractedDefaultExportName;\n  }\n\n  getPrefixCode() {\n    return `\n      (function () {\n        var enterModule = require('react-hot-loader').enterModule;\n        enterModule && enterModule(module);\n      })();`\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  getSuffixCode() {\n    const topLevelNames = new Set();\n    for (const token of this.tokens.tokens) {\n      if (\n        !token.isType &&\n        _tokenizer.isTopLevelDeclaration.call(void 0, token) &&\n        token.identifierRole !== _tokenizer.IdentifierRole.ImportDeclaration\n      ) {\n        topLevelNames.add(this.tokens.identifierNameForToken(token));\n      }\n    }\n    const namesToRegister = Array.from(topLevelNames).map((name) => ({\n      variableName: name,\n      uniqueLocalName: name,\n    }));\n    if (this.extractedDefaultExportName) {\n      namesToRegister.push({\n        variableName: this.extractedDefaultExportName,\n        uniqueLocalName: \"default\",\n      });\n    }\n    return `\n;(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n  var leaveModule = require('react-hot-loader').leaveModule;\n  if (!reactHotLoader) {\n    return;\n  }\n${namesToRegister\n  .map(\n    ({variableName, uniqueLocalName}) =>\n      `  reactHotLoader.register(${variableName}, \"${uniqueLocalName}\", ${JSON.stringify(\n        this.filePath || \"\",\n      )});`,\n  )\n  .join(\"\\n\")}\n  leaveModule(module);\n})();`;\n  }\n\n  process() {\n    return false;\n  }\n} exports.default = ReactHotLoaderTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _identifier = require('../parser/util/identifier');\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n// Hard-code a list of reserved words rather than trying to use keywords or contextual keywords\n// from the parser, since currently there are various exceptions, like `package` being reserved\n// but unused and various contextual keywords being reserved. Note that we assume that all code\n// compiled by Sucrase is in a module, so strict mode words and await are all considered reserved\n// here.\nconst RESERVED_WORDS = new Set([\n  // Reserved keywords as of ECMAScript 2015\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"export\",\n  \"extends\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"yield\",\n  // Future reserved keywords\n  \"enum\",\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"await\",\n  // Literals that cannot be used as identifiers\n  \"false\",\n  \"null\",\n  \"true\",\n]);\n\n/**\n * Determine if the given name is a legal variable name.\n *\n * This is needed when transforming TypeScript enums; if an enum key is a valid\n * variable name, it might be referenced later in the enum, so we need to\n * declare a variable.\n */\n function isIdentifier(name) {\n  if (name.length === 0) {\n    return false;\n  }\n  if (!_identifier.IS_IDENTIFIER_START[name.charCodeAt(0)]) {\n    return false;\n  }\n  for (let i = 1; i < name.length; i++) {\n    if (!_identifier.IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {\n      return false;\n    }\n  }\n  return !RESERVED_WORDS.has(name);\n} exports.default = isIdentifier;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar _types = require('../parser/tokenizer/types');\n\nvar _isIdentifier = require('../util/isIdentifier'); var _isIdentifier2 = _interopRequireDefault(_isIdentifier);\n\nvar _Transformer = require('./Transformer'); var _Transformer2 = _interopRequireDefault(_Transformer);\n\n class TypeScriptTransformer extends _Transformer2.default {\n  constructor(\n     rootTransformer,\n     tokens,\n     isImportsTransformEnabled,\n  ) {\n    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;;\n  }\n\n  process() {\n    if (\n      this.rootTransformer.processPossibleArrowParamEnd() ||\n      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||\n      this.rootTransformer.processPossibleTypeRange()\n    ) {\n      return true;\n    }\n    if (\n      this.tokens.matches1(_types.TokenType._public) ||\n      this.tokens.matches1(_types.TokenType._protected) ||\n      this.tokens.matches1(_types.TokenType._private) ||\n      this.tokens.matches1(_types.TokenType._abstract) ||\n      this.tokens.matches1(_types.TokenType._readonly) ||\n      this.tokens.matches1(_types.TokenType._override) ||\n      this.tokens.matches1(_types.TokenType.nonNullAssertion)\n    ) {\n      this.tokens.removeInitialToken();\n      return true;\n    }\n    if (this.tokens.matches1(_types.TokenType._enum) || this.tokens.matches2(_types.TokenType._const, _types.TokenType._enum)) {\n      this.processEnum();\n      return true;\n    }\n    if (\n      this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) ||\n      this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)\n    ) {\n      this.processEnum(true);\n      return true;\n    }\n    return false;\n  }\n\n  processEnum(isExport = false) {\n    // We might have \"export const enum\", so just remove all relevant tokens.\n    this.tokens.removeInitialToken();\n    while (this.tokens.matches1(_types.TokenType._const) || this.tokens.matches1(_types.TokenType._enum)) {\n      this.tokens.removeToken();\n    }\n    const enumName = this.tokens.identifierName();\n    this.tokens.removeToken();\n    if (isExport && !this.isImportsTransformEnabled) {\n      this.tokens.appendCode(\"export \");\n    }\n    this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    this.processEnumBody(enumName);\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n    if (isExport && this.isImportsTransformEnabled) {\n      this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);\n    } else {\n      this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);\n    }\n  }\n\n  /**\n   * Transform an enum into equivalent JS. This has complexity in a few places:\n   * - TS allows string enums, numeric enums, and a mix of the two styles within an enum.\n   * - Enum keys are allowed to be referenced in later enum values.\n   * - Enum keys are allowed to be strings.\n   * - When enum values are omitted, they should follow an auto-increment behavior.\n   */\n  processEnumBody(enumName) {\n    // Code that can be used to reference the previous enum member, or null if this is the first\n    // enum member.\n    let previousValueCode = null;\n    while (true) {\n      if (this.tokens.matches1(_types.TokenType.braceR)) {\n        break;\n      }\n      const {nameStringCode, variableName} = this.extractEnumKeyInfo(this.tokens.currentToken());\n      this.tokens.removeInitialToken();\n\n      if (\n        this.tokens.matches3(_types.TokenType.eq, _types.TokenType.string, _types.TokenType.comma) ||\n        this.tokens.matches3(_types.TokenType.eq, _types.TokenType.string, _types.TokenType.braceR)\n      ) {\n        this.processStringLiteralEnumMember(enumName, nameStringCode, variableName);\n      } else if (this.tokens.matches1(_types.TokenType.eq)) {\n        this.processExplicitValueEnumMember(enumName, nameStringCode, variableName);\n      } else {\n        this.processImplicitValueEnumMember(\n          enumName,\n          nameStringCode,\n          variableName,\n          previousValueCode,\n        );\n      }\n      if (this.tokens.matches1(_types.TokenType.comma)) {\n        this.tokens.removeToken();\n      }\n\n      if (variableName != null) {\n        previousValueCode = variableName;\n      } else {\n        previousValueCode = `${enumName}[${nameStringCode}]`;\n      }\n    }\n  }\n\n  /**\n   * Detect name information about this enum key, which will be used to determine which code to emit\n   * and whether we should declare a variable as part of this declaration.\n   *\n   * Some cases to keep in mind:\n   * - Enum keys can be implicitly referenced later, e.g. `X = 1, Y = X`. In Sucrase, we implement\n   *   this by declaring a variable `X` so that later expressions can use it.\n   * - In addition to the usual identifier key syntax, enum keys are allowed to be string literals,\n   *   e.g. `\"hello world\" = 3,`. Template literal syntax is NOT allowed.\n   * - Even if the enum key is defined as a string literal, it may still be referenced by identifier\n   *   later, e.g. `\"X\" = 1, Y = X`. That means that we need to detect whether or not a string\n   *   literal is identifier-like and emit a variable if so, even if the declaration did not use an\n   *   identifier.\n   * - Reserved keywords like `break` are valid enum keys, but are not valid to be referenced later\n   *   and would be a syntax error if we emitted a variable, so we need to skip the variable\n   *   declaration in those cases.\n   *\n   * The variableName return value captures these nuances: if non-null, we can and must emit a\n   * variable declaration, and if null, we can't and shouldn't.\n   */\n  extractEnumKeyInfo(nameToken) {\n    if (nameToken.type === _types.TokenType.name) {\n      const name = this.tokens.identifierNameForToken(nameToken);\n      return {\n        nameStringCode: `\"${name}\"`,\n        variableName: _isIdentifier2.default.call(void 0, name) ? name : null,\n      };\n    } else if (nameToken.type === _types.TokenType.string) {\n      const name = this.tokens.stringValueForToken(nameToken);\n      return {\n        nameStringCode: this.tokens.code.slice(nameToken.start, nameToken.end),\n        variableName: _isIdentifier2.default.call(void 0, name) ? name : null,\n      };\n    } else {\n      throw new Error(\"Expected name or string at beginning of enum element.\");\n    }\n  }\n\n  /**\n   * Handle an enum member where the RHS is just a string literal (not omitted, not a number, and\n   * not a complex expression). This is the typical form for TS string enums, and in this case, we\n   * do *not* create a reverse mapping.\n   *\n   * This is called after deleting the key token, when the token processor is at the equals sign.\n   *\n   * Example 1:\n   * someKey = \"some value\"\n   * ->\n   * const someKey = \"some value\"; MyEnum[\"someKey\"] = someKey;\n   *\n   * Example 2:\n   * \"some key\" = \"some value\"\n   * ->\n   * MyEnum[\"some key\"] = \"some value\";\n   */\n  processStringLiteralEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n  ) {\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName}`);\n      // =\n      this.tokens.copyToken();\n      // value string\n      this.tokens.copyToken();\n      this.tokens.appendCode(`; ${enumName}[${nameStringCode}] = ${variableName};`);\n    } else {\n      this.tokens.appendCode(`${enumName}[${nameStringCode}]`);\n      // =\n      this.tokens.copyToken();\n      // value string\n      this.tokens.copyToken();\n      this.tokens.appendCode(\";\");\n    }\n  }\n\n  /**\n   * Handle an enum member initialized with an expression on the right-hand side (other than a\n   * string literal). In these cases, we should transform the expression and emit code that sets up\n   * a reverse mapping.\n   *\n   * The TypeScript implementation of this operation distinguishes between expressions that can be\n   * \"constant folded\" at compile time (i.e. consist of number literals and simple math operations\n   * on those numbers) and ones that are dynamic. For constant expressions, it emits the resolved\n   * numeric value, and auto-incrementing is only allowed in that case. Evaluating expressions at\n   * compile time would add significant complexity to Sucrase, so Sucrase instead leaves the\n   * expression as-is, and will later emit something like `MyEnum[\"previousKey\"] + 1` to implement\n   * auto-incrementing.\n   *\n   * This is called after deleting the key token, when the token processor is at the equals sign.\n   *\n   * Example 1:\n   * someKey = 1 + 1\n   * ->\n   * const someKey = 1 + 1; MyEnum[MyEnum[\"someKey\"] = someKey] = \"someKey\";\n   *\n   * Example 2:\n   * \"some key\" = 1 + 1\n   * ->\n   * MyEnum[MyEnum[\"some key\"] = 1 + 1] = \"some key\";\n   */\n  processExplicitValueEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n  ) {\n    const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;\n    if (rhsEndIndex == null) {\n      throw new Error(\"Expected rhsEndIndex on enum assign.\");\n    }\n\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName}`);\n      this.tokens.copyToken();\n      while (this.tokens.currentIndex() < rhsEndIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(\n        `; ${enumName}[${enumName}[${nameStringCode}] = ${variableName}] = ${nameStringCode};`,\n      );\n    } else {\n      this.tokens.appendCode(`${enumName}[${enumName}[${nameStringCode}]`);\n      this.tokens.copyToken();\n      while (this.tokens.currentIndex() < rhsEndIndex) {\n        this.rootTransformer.processToken();\n      }\n      this.tokens.appendCode(`] = ${nameStringCode};`);\n    }\n  }\n\n  /**\n   * Handle an enum member with no right-hand side expression. In this case, the value is the\n   * previous value plus 1, or 0 if there was no previous value. We should also always emit a\n   * reverse mapping.\n   *\n   * Example 1:\n   * someKey2\n   * ->\n   * const someKey2 = someKey1 + 1; MyEnum[MyEnum[\"someKey2\"] = someKey2] = \"someKey2\";\n   *\n   * Example 2:\n   * \"some key 2\"\n   * ->\n   * MyEnum[MyEnum[\"some key 2\"] = someKey1 + 1] = \"some key 2\";\n   */\n  processImplicitValueEnumMember(\n    enumName,\n    nameStringCode,\n    variableName,\n    previousValueCode,\n  ) {\n    let valueCode = previousValueCode != null ? `${previousValueCode} + 1` : \"0\";\n    if (variableName != null) {\n      this.tokens.appendCode(`const ${variableName} = ${valueCode}; `);\n      valueCode = variableName;\n    }\n    this.tokens.appendCode(\n      `${enumName}[${enumName}[${nameStringCode}] = ${valueCode}] = ${nameStringCode};`,\n    );\n  }\n} exports.default = TypeScriptTransformer;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _keywords = require('../parser/tokenizer/keywords');\nvar _types = require('../parser/tokenizer/types');\n\nvar _getClassInfo = require('../util/getClassInfo'); var _getClassInfo2 = _interopRequireDefault(_getClassInfo);\nvar _CJSImportTransformer = require('./CJSImportTransformer'); var _CJSImportTransformer2 = _interopRequireDefault(_CJSImportTransformer);\nvar _ESMImportTransformer = require('./ESMImportTransformer'); var _ESMImportTransformer2 = _interopRequireDefault(_ESMImportTransformer);\nvar _FlowTransformer = require('./FlowTransformer'); var _FlowTransformer2 = _interopRequireDefault(_FlowTransformer);\nvar _JestHoistTransformer = require('./JestHoistTransformer'); var _JestHoistTransformer2 = _interopRequireDefault(_JestHoistTransformer);\nvar _JSXTransformer = require('./JSXTransformer'); var _JSXTransformer2 = _interopRequireDefault(_JSXTransformer);\nvar _NumericSeparatorTransformer = require('./NumericSeparatorTransformer'); var _NumericSeparatorTransformer2 = _interopRequireDefault(_NumericSeparatorTransformer);\nvar _OptionalCatchBindingTransformer = require('./OptionalCatchBindingTransformer'); var _OptionalCatchBindingTransformer2 = _interopRequireDefault(_OptionalCatchBindingTransformer);\nvar _OptionalChainingNullishTransformer = require('./OptionalChainingNullishTransformer'); var _OptionalChainingNullishTransformer2 = _interopRequireDefault(_OptionalChainingNullishTransformer);\nvar _ReactDisplayNameTransformer = require('./ReactDisplayNameTransformer'); var _ReactDisplayNameTransformer2 = _interopRequireDefault(_ReactDisplayNameTransformer);\nvar _ReactHotLoaderTransformer = require('./ReactHotLoaderTransformer'); var _ReactHotLoaderTransformer2 = _interopRequireDefault(_ReactHotLoaderTransformer);\n\nvar _TypeScriptTransformer = require('./TypeScriptTransformer'); var _TypeScriptTransformer2 = _interopRequireDefault(_TypeScriptTransformer);\n\n class RootTransformer {\n   __init() {this.transformers = []}\n  \n  \n   __init2() {this.generatedVariables = []}\n  \n  \n  \n  \n\n  constructor(\n    sucraseContext,\n    transforms,\n    enableLegacyBabel5ModuleInterop,\n    options,\n  ) {;RootTransformer.prototype.__init.call(this);RootTransformer.prototype.__init2.call(this);\n    this.nameManager = sucraseContext.nameManager;\n    this.helperManager = sucraseContext.helperManager;\n    const {tokenProcessor, importProcessor} = sucraseContext;\n    this.tokens = tokenProcessor;\n    this.isImportsTransformEnabled = transforms.includes(\"imports\");\n    this.isReactHotLoaderTransformEnabled = transforms.includes(\"react-hot-loader\");\n    this.disableESTransforms = Boolean(options.disableESTransforms);\n\n    if (!options.disableESTransforms) {\n      this.transformers.push(\n        new (0, _OptionalChainingNullishTransformer2.default)(tokenProcessor, this.nameManager),\n      );\n      this.transformers.push(new (0, _NumericSeparatorTransformer2.default)(tokenProcessor));\n      this.transformers.push(new (0, _OptionalCatchBindingTransformer2.default)(tokenProcessor, this.nameManager));\n    }\n\n    if (transforms.includes(\"jsx\")) {\n      this.transformers.push(\n        new (0, _JSXTransformer2.default)(this, tokenProcessor, importProcessor, this.nameManager, options),\n      );\n      this.transformers.push(\n        new (0, _ReactDisplayNameTransformer2.default)(this, tokenProcessor, importProcessor, options),\n      );\n    }\n\n    let reactHotLoaderTransformer = null;\n    if (transforms.includes(\"react-hot-loader\")) {\n      if (!options.filePath) {\n        throw new Error(\"filePath is required when using the react-hot-loader transform.\");\n      }\n      reactHotLoaderTransformer = new (0, _ReactHotLoaderTransformer2.default)(tokenProcessor, options.filePath);\n      this.transformers.push(reactHotLoaderTransformer);\n    }\n\n    // Note that we always want to enable the imports transformer, even when the import transform\n    // itself isn't enabled, since we need to do type-only import pruning for both Flow and\n    // TypeScript.\n    if (transforms.includes(\"imports\")) {\n      if (importProcessor === null) {\n        throw new Error(\"Expected non-null importProcessor with imports transform enabled.\");\n      }\n      this.transformers.push(\n        new (0, _CJSImportTransformer2.default)(\n          this,\n          tokenProcessor,\n          importProcessor,\n          this.nameManager,\n          reactHotLoaderTransformer,\n          enableLegacyBabel5ModuleInterop,\n          transforms.includes(\"typescript\"),\n        ),\n      );\n    } else {\n      this.transformers.push(\n        new (0, _ESMImportTransformer2.default)(\n          tokenProcessor,\n          this.nameManager,\n          reactHotLoaderTransformer,\n          transforms.includes(\"typescript\"),\n          options,\n        ),\n      );\n    }\n\n    if (transforms.includes(\"flow\")) {\n      this.transformers.push(new (0, _FlowTransformer2.default)(this, tokenProcessor));\n    }\n    if (transforms.includes(\"typescript\")) {\n      this.transformers.push(\n        new (0, _TypeScriptTransformer2.default)(this, tokenProcessor, transforms.includes(\"imports\")),\n      );\n    }\n    if (transforms.includes(\"jest\")) {\n      this.transformers.push(\n        new (0, _JestHoistTransformer2.default)(this, tokenProcessor, this.nameManager, importProcessor),\n      );\n    }\n  }\n\n  transform() {\n    this.tokens.reset();\n    this.processBalancedCode();\n    const shouldAddUseStrict = this.isImportsTransformEnabled;\n    // \"use strict\" always needs to be first, so override the normal transformer order.\n    let prefix = shouldAddUseStrict ? '\"use strict\";' : \"\";\n    for (const transformer of this.transformers) {\n      prefix += transformer.getPrefixCode();\n    }\n    prefix += this.helperManager.emitHelpers();\n    prefix += this.generatedVariables.map((v) => ` var ${v};`).join(\"\");\n    for (const transformer of this.transformers) {\n      prefix += transformer.getHoistedCode();\n    }\n    let suffix = \"\";\n    for (const transformer of this.transformers) {\n      suffix += transformer.getSuffixCode();\n    }\n    let code = this.tokens.finish();\n    if (code.startsWith(\"#!\")) {\n      let newlineIndex = code.indexOf(\"\\n\");\n      if (newlineIndex === -1) {\n        newlineIndex = code.length;\n        code += \"\\n\";\n      }\n      return code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix;\n    } else {\n      return prefix + this.tokens.finish() + suffix;\n    }\n  }\n\n  processBalancedCode() {\n    let braceDepth = 0;\n    let parenDepth = 0;\n    while (!this.tokens.isAtEnd()) {\n      if (this.tokens.matches1(_types.TokenType.braceL) || this.tokens.matches1(_types.TokenType.dollarBraceL)) {\n        braceDepth++;\n      } else if (this.tokens.matches1(_types.TokenType.braceR)) {\n        if (braceDepth === 0) {\n          return;\n        }\n        braceDepth--;\n      }\n      if (this.tokens.matches1(_types.TokenType.parenL)) {\n        parenDepth++;\n      } else if (this.tokens.matches1(_types.TokenType.parenR)) {\n        if (parenDepth === 0) {\n          return;\n        }\n        parenDepth--;\n      }\n      this.processToken();\n    }\n  }\n\n  processToken() {\n    if (this.tokens.matches1(_types.TokenType._class)) {\n      this.processClass();\n      return;\n    }\n    for (const transformer of this.transformers) {\n      const wasProcessed = transformer.process();\n      if (wasProcessed) {\n        return;\n      }\n    }\n    this.tokens.copyToken();\n  }\n\n  /**\n   * Skip past a class with a name and return that name.\n   */\n  processNamedClass() {\n    if (!this.tokens.matches2(_types.TokenType._class, _types.TokenType.name)) {\n      throw new Error(\"Expected identifier for exported class name.\");\n    }\n    const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);\n    this.processClass();\n    return name;\n  }\n\n  processClass() {\n    const classInfo = _getClassInfo2.default.call(void 0, this, this.tokens, this.nameManager, this.disableESTransforms);\n\n    // Both static and instance initializers need a class name to use to invoke the initializer, so\n    // assign to one if necessary.\n    const needsCommaExpression =\n      (classInfo.headerInfo.isExpression || !classInfo.headerInfo.className) &&\n      classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;\n\n    let className = classInfo.headerInfo.className;\n    if (needsCommaExpression) {\n      className = this.nameManager.claimFreeName(\"_class\");\n      this.generatedVariables.push(className);\n      this.tokens.appendCode(` (${className} =`);\n    }\n\n    const classToken = this.tokens.currentToken();\n    const contextId = classToken.contextId;\n    if (contextId == null) {\n      throw new Error(\"Expected class to have a context ID.\");\n    }\n    this.tokens.copyExpectedToken(_types.TokenType._class);\n    while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {\n      this.processToken();\n    }\n\n    this.processClassBody(classInfo, className);\n\n    const staticInitializerStatements = classInfo.staticInitializerNames.map(\n      (name) => `${className}.${name}()`,\n    );\n    if (needsCommaExpression) {\n      this.tokens.appendCode(\n        `, ${staticInitializerStatements.map((s) => `${s}, `).join(\"\")}${className})`,\n      );\n    } else if (classInfo.staticInitializerNames.length > 0) {\n      this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(\" \")}`);\n    }\n  }\n\n  /**\n   * We want to just handle class fields in all contexts, since TypeScript supports them. Later,\n   * when some JS implementations support class fields, this should be made optional.\n   */\n  processClassBody(classInfo, className) {\n    const {\n      headerInfo,\n      constructorInsertPos,\n      constructorInitializerStatements,\n      fields,\n      instanceInitializerNames,\n      rangesToRemove,\n    } = classInfo;\n    let fieldIndex = 0;\n    let rangeToRemoveIndex = 0;\n    const classContextId = this.tokens.currentToken().contextId;\n    if (classContextId == null) {\n      throw new Error(\"Expected non-null context ID on class.\");\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceL);\n    if (this.isReactHotLoaderTransformEnabled) {\n      this.tokens.appendCode(\n        \"__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}\",\n      );\n    }\n\n    const needsConstructorInit =\n      constructorInitializerStatements.length + instanceInitializerNames.length > 0;\n\n    if (constructorInsertPos === null && needsConstructorInit) {\n      const constructorInitializersCode = this.makeConstructorInitCode(\n        constructorInitializerStatements,\n        instanceInitializerNames,\n        className,\n      );\n      if (headerInfo.hasSuperclass) {\n        const argsName = this.nameManager.claimFreeName(\"args\");\n        this.tokens.appendCode(\n          `constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`,\n        );\n      } else {\n        this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);\n      }\n    }\n\n    while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {\n      if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {\n        let needsCloseBrace = false;\n        if (this.tokens.matches1(_types.TokenType.bracketL)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);\n        } else if (this.tokens.matches1(_types.TokenType.string) || this.tokens.matches1(_types.TokenType.num)) {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);\n          needsCloseBrace = true;\n        } else {\n          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);\n        }\n        while (this.tokens.currentIndex() < fields[fieldIndex].end) {\n          if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {\n            this.tokens.appendCode(\"]\");\n          }\n          this.processToken();\n        }\n        this.tokens.appendCode(\"}\");\n        fieldIndex++;\n      } else if (\n        rangeToRemoveIndex < rangesToRemove.length &&\n        this.tokens.currentIndex() >= rangesToRemove[rangeToRemoveIndex].start\n      ) {\n        if (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {\n          this.tokens.removeInitialToken();\n        }\n        while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {\n          this.tokens.removeToken();\n        }\n        rangeToRemoveIndex++;\n      } else if (this.tokens.currentIndex() === constructorInsertPos) {\n        this.tokens.copyToken();\n        if (needsConstructorInit) {\n          this.tokens.appendCode(\n            `;${this.makeConstructorInitCode(\n              constructorInitializerStatements,\n              instanceInitializerNames,\n              className,\n            )};`,\n          );\n        }\n        this.processToken();\n      } else {\n        this.processToken();\n      }\n    }\n    this.tokens.copyExpectedToken(_types.TokenType.braceR);\n  }\n\n  makeConstructorInitCode(\n    constructorInitializerStatements,\n    instanceInitializerNames,\n    className,\n  ) {\n    return [\n      ...constructorInitializerStatements,\n      ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`),\n    ].join(\";\");\n  }\n\n  /**\n   * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with\n   * arrow function return types since they can confuse the parser. In that case, we want to move\n   * the close-paren to the same line as the arrow.\n   *\n   * See https://github.com/alangpierce/sucrase/issues/391 for more details.\n   */\n  processPossibleArrowParamEnd() {\n    if (this.tokens.matches2(_types.TokenType.parenR, _types.TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {\n      let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n      // Look ahead to see if this is an arrow function or something else.\n      while (this.tokens.tokens[nextNonTypeIndex].isType) {\n        nextNonTypeIndex++;\n      }\n      if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.arrow)) {\n        this.tokens.removeInitialToken();\n        while (this.tokens.currentIndex() < nextNonTypeIndex) {\n          this.tokens.removeToken();\n        }\n        this.tokens.replaceTokenTrimmingLeftWhitespace(\") =>\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * An async arrow function might be of the form:\n   *\n   * async <\n   *   T\n   * >() => {}\n   *\n   * in which case, removing the type parameters will cause a syntax error. Detect this case and\n   * move the open-paren earlier.\n   */\n  processPossibleAsyncArrowWithTypeParams() {\n    if (\n      !this.tokens.matchesContextual(_keywords.ContextualKeyword._async) &&\n      !this.tokens.matches1(_types.TokenType._async)\n    ) {\n      return false;\n    }\n    const nextToken = this.tokens.tokenAtRelativeIndex(1);\n    if (nextToken.type !== _types.TokenType.lessThan || !nextToken.isType) {\n      return false;\n    }\n\n    let nextNonTypeIndex = this.tokens.currentIndex() + 1;\n    // Look ahead to see if this is an arrow function or something else.\n    while (this.tokens.tokens[nextNonTypeIndex].isType) {\n      nextNonTypeIndex++;\n    }\n    if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.parenL)) {\n      this.tokens.replaceToken(\"async (\");\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentIndex() < nextNonTypeIndex) {\n        this.tokens.removeToken();\n      }\n      this.tokens.removeToken();\n      // We ate a ( token, so we need to process the tokens in between and then the ) token so that\n      // we remain balanced.\n      this.processBalancedCode();\n      this.processToken();\n      return true;\n    }\n    return false;\n  }\n\n  processPossibleTypeRange() {\n    if (this.tokens.currentToken().isType) {\n      this.tokens.removeInitialToken();\n      while (this.tokens.currentToken().isType) {\n        this.tokens.removeToken();\n      }\n      return true;\n    }\n    return false;\n  }\n} exports.default = RootTransformer;\n", "\"use strict\";\nvar LF = '\\n';\nvar CR = '\\r';\nvar LinesAndColumns = (function () {\n    function LinesAndColumns(string) {\n        this.string = string;\n        var offsets = [0];\n        for (var offset = 0; offset < string.length;) {\n            switch (string[offset]) {\n                case LF:\n                    offset += LF.length;\n                    offsets.push(offset);\n                    break;\n                case CR:\n                    offset += CR.length;\n                    if (string[offset] === LF) {\n                        offset += LF.length;\n                    }\n                    offsets.push(offset);\n                    break;\n                default:\n                    offset++;\n                    break;\n            }\n        }\n        this.offsets = offsets;\n    }\n    LinesAndColumns.prototype.locationForIndex = function (index) {\n        if (index < 0 || index > this.string.length) {\n            return null;\n        }\n        var line = 0;\n        var offsets = this.offsets;\n        while (offsets[line + 1] <= index) {\n            line++;\n        }\n        var column = index - offsets[line];\n        return { line: line, column: column };\n    };\n    LinesAndColumns.prototype.indexForLocation = function (location) {\n        var line = location.line, column = location.column;\n        if (line < 0 || line >= this.offsets.length) {\n            return null;\n        }\n        if (column < 0 || column > this.lengthOfLine(line)) {\n            return null;\n        }\n        return this.offsets[line] + column;\n    };\n    LinesAndColumns.prototype.lengthOfLine = function (line) {\n        var offset = this.offsets[line];\n        var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];\n        return nextOffset - offset;\n    };\n    return LinesAndColumns;\n}());\nexports.__esModule = true;\nexports[\"default\"] = LinesAndColumns;\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _linesandcolumns = require('lines-and-columns'); var _linesandcolumns2 = _interopRequireDefault(_linesandcolumns);\n\n\nvar _types = require('../parser/tokenizer/types');\n\n function formatTokens(code, tokens) {\n  if (tokens.length === 0) {\n    return \"\";\n  }\n\n  const tokenKeys = Object.keys(tokens[0]).filter(\n    (k) => k !== \"type\" && k !== \"value\" && k !== \"start\" && k !== \"end\" && k !== \"loc\",\n  );\n  const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== \"label\" && k !== \"keyword\");\n\n  const headings = [\"Location\", \"Label\", \"Raw\", ...tokenKeys, ...typeKeys];\n\n  const lines = new (0, _linesandcolumns2.default)(code);\n  const rows = [headings, ...tokens.map(getTokenComponents)];\n  const padding = headings.map(() => 0);\n  for (const components of rows) {\n    for (let i = 0; i < components.length; i++) {\n      padding[i] = Math.max(padding[i], components[i].length);\n    }\n  }\n  return rows\n    .map((components) => components.map((component, i) => component.padEnd(padding[i])).join(\" \"))\n    .join(\"\\n\");\n\n  function getTokenComponents(token) {\n    const raw = code.slice(token.start, token.end);\n    return [\n      formatRange(token.start, token.end),\n      _types.formatTokenType.call(void 0, token.type),\n      truncate(String(raw), 14),\n      // @ts-ignore: Intentional dynamic access by key.\n      ...tokenKeys.map((key) => formatValue(token[key], key)),\n      // @ts-ignore: Intentional dynamic access by key.\n      ...typeKeys.map((key) => formatValue(token.type[key], key)),\n    ];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function formatValue(value, key) {\n    if (value === true) {\n      return key;\n    } else if (value === false || value === null) {\n      return \"\";\n    } else {\n      return String(value);\n    }\n  }\n\n  function formatRange(start, end) {\n    return `${formatPos(start)}-${formatPos(end)}`;\n  }\n\n  function formatPos(pos) {\n    const location = lines.locationForIndex(pos);\n    if (!location) {\n      return \"Unknown\";\n    } else {\n      return `${location.line + 1}:${location.column + 1}`;\n    }\n  }\n} exports.default = formatTokens;\n\nfunction truncate(s, length) {\n  if (s.length > length) {\n    return `${s.slice(0, length - 3)}...`;\n  } else {\n    return s;\n  }\n}\n", "\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var _keywords = require('../parser/tokenizer/keywords');\nvar _types = require('../parser/tokenizer/types');\n\n\n/**\n * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can\n * properly get globals so we can compute shadowed globals.\n *\n * This is similar to logic in CJSImportProcessor, but trimmed down to avoid logic with CJS\n * replacement and flow type imports.\n */\n function getTSImportedNames(tokens) {\n  const importedNames = new Set();\n  for (let i = 0; i < tokens.tokens.length; i++) {\n    if (\n      tokens.matches1AtIndex(i, _types.TokenType._import) &&\n      !tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)\n    ) {\n      collectNamesForImport(tokens, i, importedNames);\n    }\n  }\n  return importedNames;\n} exports.default = getTSImportedNames;\n\nfunction collectNamesForImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  index++;\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.parenL)) {\n    // Dynamic import, so nothing to do\n    return;\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.name)) {\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n    if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n      index++;\n    }\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.star)) {\n    // * as\n    index += 2;\n    importedNames.add(tokens.identifierNameAtIndex(index));\n    index++;\n  }\n\n  if (tokens.matches1AtIndex(index, _types.TokenType.braceL)) {\n    index++;\n    collectNamesForNamedImport(tokens, index, importedNames);\n  }\n}\n\nfunction collectNamesForNamedImport(\n  tokens,\n  index,\n  importedNames,\n) {\n  while (true) {\n    if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n      return;\n    }\n\n    // We care about the local name, which might be the first token, or if there's an \"as\", is the\n    // one after that.\n    let name = tokens.identifierNameAtIndex(index);\n    index++;\n    if (tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._as)) {\n      index++;\n      name = tokens.identifierNameAtIndex(index);\n      index++;\n    }\n    importedNames.add(name);\n    if (tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {\n      return;\n    } else if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {\n      index++;\n    } else {\n      throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);\n    }\n  }\n}\n", "const NOOP = () => {};\nconst IDENTITY = <T>(value: T): T => value;\n\nfunction wrap<T>(value: Array<T> | T | undefined): Array<T> {\n\treturn value === undefined ? [] : Array.isArray(value) ? value : [value];\n}\n\nfunction unwrap<T>(arr: Array<T>): Array<T> | T | undefined {\n\treturn arr.length === 0 ? undefined : arr.length === 1 ? arr[0] : arr;\n}\n\ntype NonStringIterable<T> = Iterable<T> & object;\n\n/**\n * Ensures a value is an array.\n *\n * This function does the same thing as wrap() above except it handles nulls\n * and iterables, so it is appropriate for wrapping user-provided element\n * children.\n */\nfunction arrayify<T>(\n\tvalue: NonStringIterable<T> | T | null | undefined,\n): Array<T> {\n\treturn value == null\n\t\t? []\n\t\t: Array.isArray(value)\n\t\t? value\n\t\t: typeof value === \"string\" ||\n\t\t  typeof (value as any)[Symbol.iterator] !== \"function\"\n\t\t? [value]\n\t\t: [...(value as NonStringIterable<T>)];\n}\n\nfunction isIteratorLike(\n\tvalue: any,\n): value is Iterator<unknown> | AsyncIterator<unknown> {\n\treturn value != null && typeof value.next === \"function\";\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<unknown> {\n\treturn value != null && typeof value.then === \"function\";\n}\n\n/**\n * A type which represents all valid values for an element tag.\n */\nexport type Tag = string | symbol | Component;\n\n/**\n * A helper type to map the tag of an element to its expected props.\n *\n * @template TTag - The tag associated with the props. Can be a string, symbol\n * or a component function.\n */\nexport type TagProps<TTag extends Tag> = TTag extends string\n\t? JSX.IntrinsicElements[TTag]\n\t: TTag extends Component<infer TProps>\n\t? TProps\n\t: Record<string, unknown>;\n\n/***\n * SPECIAL TAGS\n *\n * Crank provides a couple tags which have special meaning for the renderer.\n ***/\n\n/**\n * A special tag for grouping multiple children within the same parent.\n *\n * All non-string iterables which appear in the element tree are implicitly\n * wrapped in a fragment element.\n *\n * This tag is just the empty string, and you can use the empty string in\n * createElement calls or transpiler options directly to avoid having to\n * reference this export.\n */\nexport const Fragment = \"\";\nexport type Fragment = typeof Fragment;\n\n// TODO: We assert the following symbol tags as any because TypeScript support\n// for symbol tags in JSX doesn\u2019t exist yet.\n// https://github.com/microsoft/TypeScript/issues/38367\n\n/**\n * A special tag for rendering into a new root node via a root prop.\n *\n * This tag is useful for creating element trees with multiple roots, for\n * things like modals or tooltips.\n *\n * Renderer.prototype.render() will implicitly wrap top-level element trees in\n * a Portal element.\n */\nexport const Portal = Symbol.for(\"crank.Portal\") as any;\nexport type Portal = typeof Portal;\n\n/**\n * A special tag which preserves whatever was previously rendered in the\n * element\u2019s position.\n *\n * Copy elements are useful for when you want to prevent a subtree from\n * rerendering as a performance optimization. Copy elements can also be keyed,\n * in which case the previously rendered keyed element will be copied.\n */\nexport const Copy = Symbol.for(\"crank.Copy\") as any;\nexport type Copy = typeof Copy;\n\n/**\n * A special tag for injecting raw nodes or strings via a value prop.\n *\n * If the value prop is a string, Renderer.prototype.parse() will be called on\n * the string and the result will be set as the element\u2019s value.\n */\nexport const Raw = Symbol.for(\"crank.Raw\") as any;\nexport type Raw = typeof Raw;\n\n/**\n * Describes all valid values of an element tree, excluding iterables.\n *\n * Arbitrary objects can also be safely rendered, but will be converted to a\n * string using the toString() method. We exclude them from this type to catch\n * potential mistakes.\n */\nexport type Child = Element | string | number | boolean | null | undefined;\n\n/**\n * An arbitrarily nested iterable of Child values.\n *\n * We use a recursive interface here rather than making the Children type\n * directly recursive because recursive type aliases were added in TypeScript\n * 3.7.\n *\n * You should avoid referencing this type directly, as it is mainly exported to\n * prevent TypeScript errors.\n */\nexport interface ChildIterable extends Iterable<Child | ChildIterable> {}\n\n/**\n * Describes all valid values of an element tree, including arbitrarily nested\n * iterables of such values.\n */\nexport type Children = Child | ChildIterable;\n\n/**\n * Represents all functions which can be used as a component.\n *\n * @template [TProps=*] - The expected props for the component.\n */\nexport type Component<TProps extends Record<string, unknown> = any> = (\n\tthis: Context<TProps>,\n\tprops: TProps,\n) =>\n\t| Children\n\t| PromiseLike<Children>\n\t// The return type of iterators must include void because TypeScript will\n\t// infer generators which return implicitly as having a void return type.\n\t| Iterator<Children, Children | void, any>\n\t| AsyncIterator<Children, Children | void, any>;\n\ntype ChildrenIteration =\n\t| Promise<IteratorResult<Children, Children | void>>\n\t| IteratorResult<Children, Children | void>;\n\n/**\n * A type to keep track of keys. Any value can be a key, though null and\n * undefined are ignored.\n */\ntype Key = unknown;\n\nconst ElementSymbol = Symbol.for(\"crank.Element\");\n\n// To maximize compatibility between Crank versions, starting with 0.2.0, any\n// changes to the Element properties will be considered a breaking change.\nexport interface Element<TTag extends Tag = Tag> {\n\t/**\n\t * @internal\n\t * A unique symbol to identify elements as elements across versions and\n\t * realms, and to protect against basic injection attacks.\n\t * https://overreacted.io/why-do-react-elements-have-typeof-property/\n\t *\n\t * This property is defined on the element prototype rather than per\n\t * instance, because it is the same for every Element.\n\t */\n\t$$typeof: typeof ElementSymbol;\n\n\t/**\n\t * The tag of the element. Can be a string, symbol or function.\n\t */\n\ttag: TTag;\n\n\t/**\n\t * An object containing the \u201Cproperties\u201D of an element. These correspond to\n\t * the attribute syntax from JSX.\n\t */\n\tprops: TagProps<TTag>;\n\n\t/**\n\t * A value which uniquely identifies an element from its siblings so that it\n\t * can be added/updated/moved/removed by key rather than position.\n\t *\n\t * Passed in createElement() as the prop \"c-key\".\n\t */\n\tkey: Key;\n\n\t/**\n\t * A callback which is called with the element\u2019s result when it is committed.\n\t *\n\t * Passed in createElement() as the prop \"c-ref\".\n\t */\n\tref: ((value: unknown) => unknown) | undefined;\n\n\t/**\n\t * A possible boolean which indicates that element should NOT be rerendered.\n\t * If the element has never been rendered, this property has no effect.\n\t *\n\t * Passed in createElement() as the prop \"c-static\".\n\t */\n\tstatic_: boolean | undefined;\n}\n\n/**\n * Elements are the basic building blocks of Crank applications. They are\n * JavaScript objects which are interpreted by special classes called renderers\n * to produce and manage stateful nodes.\n *\n * @template {Tag} [TTag=Tag] - The type of the tag of the element.\n *\n * @example\n * // specific element types\n * let div: Element<\"div\">;\n * let portal: Element<Portal>;\n * let myEl: Element<MyComponent>;\n *\n * // general element types\n * let host: Element<string | symbol>;\n * let component: Element<Component>;\n *\n * Typically, you use a helper function like createElement to create elements\n * rather than instatiating this class directly.\n */\nexport class Element<TTag extends Tag = Tag> {\n\tconstructor(\n\t\ttag: TTag,\n\t\tprops: TagProps<TTag>,\n\t\tkey: Key,\n\t\tref?: ((value: unknown) => unknown) | undefined,\n\t\tstatic_?: boolean | undefined,\n\t) {\n\t\tthis.tag = tag;\n\t\tthis.props = props;\n\t\tthis.key = key;\n\t\tthis.ref = ref;\n\t\tthis.static_ = static_;\n\t}\n}\n\nElement.prototype.$$typeof = ElementSymbol;\n\nexport function isElement(value: any): value is Element {\n\treturn value != null && value.$$typeof === ElementSymbol;\n}\n\n/**\n * Creates an element with the specified tag, props and children.\n *\n * This function is usually used as a transpilation target for JSX transpilers,\n * but it can also be called directly. It additionally extracts special props so\n * they aren\u2019t accessible to renderer methods or components, and assigns the\n * children prop according to any additional arguments passed to the function.\n */\nexport function createElement<TTag extends Tag>(\n\ttag: TTag,\n\tprops?: TagProps<TTag> | null | undefined,\n\t...children: Array<unknown>\n): Element<TTag> {\n\tlet key: Key;\n\tlet ref: ((value: unknown) => unknown) | undefined;\n\tlet static_ = false;\n\tconst props1 = {} as TagProps<TTag>;\n\tif (props != null) {\n\t\tfor (const name in props) {\n\t\t\tswitch (name) {\n\t\t\t\tcase \"crank-key\":\n\t\t\t\tcase \"c-key\":\n\t\t\t\t\t// We have to make sure we don\u2019t assign null to the key because we\n\t\t\t\t\t// don\u2019t check for null keys in the diffing functions.\n\t\t\t\t\tif (props[name] != null) {\n\t\t\t\t\t\tkey = props[name];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"crank-ref\":\n\t\t\t\tcase \"c-ref\":\n\t\t\t\t\tif (typeof props[name] === \"function\") {\n\t\t\t\t\t\tref = props[name];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"crank-static\":\n\t\t\t\tcase \"c-static\":\n\t\t\t\t\tstatic_ = !!props[name];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tprops1[name] = props[name];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (children.length > 1) {\n\t\tprops1.children = children;\n\t} else if (children.length === 1) {\n\t\tprops1.children = children[0];\n\t}\n\n\treturn new Element(tag, props1, key, ref, static_);\n}\n\n/**\n * Clones a given element, shallowly copying the props object.\n */\nexport function cloneElement<TTag extends Tag>(\n\tel: Element<TTag>,\n): Element<TTag> {\n\tif (!isElement(el)) {\n\t\tthrow new TypeError(\"Cannot clone non-element\");\n\t}\n\n\treturn new Element(el.tag, {...el.props}, el.key, el.ref);\n}\n\n/*** ELEMENT UTILITIES ***/\n\n// WHAT ARE WE DOING TO THE CHILDREN???\n/**\n * All values in the element tree are narrowed from the union in Child to\n * NarrowedChild during rendering, to simplify element diffing.\n */\ntype NarrowedChild = Element | string | undefined;\n\nfunction narrow(value: Children): NarrowedChild {\n\tif (typeof value === \"boolean\" || value == null) {\n\t\treturn undefined;\n\t} else if (typeof value === \"string\" || isElement(value)) {\n\t\treturn value;\n\t} else if (typeof (value as any)[Symbol.iterator] === \"function\") {\n\t\treturn createElement(Fragment, null, value);\n\t}\n\n\treturn value.toString();\n}\n\n/**\n * A helper type which repesents all possible rendered values of an element.\n *\n * @template TNode - The node type for the element provided by the renderer.\n *\n * When asking the question, what is the \u201Cvalue\u201D of a specific element, the\n * answer varies depending on the tag:\n *\n * For host elements, the value is the nodes created for the element.\n *\n * For fragments, the value is usually an array of nodes.\n *\n * For portals, the value is undefined, because a Portal element\u2019s root and\n * children are opaque to its parent.\n *\n * For components, the value can be any of the above, because the value of a\n * component is determined by its immediate children.\n *\n * Rendered values can also be strings or arrays of nodes and strings, in the\n * case of component or fragment elements with strings or multiple children.\n *\n * All of these possible values are reflected in this utility type.\n */\nexport type ElementValue<TNode> =\n\t| Array<TNode | string>\n\t| TNode\n\t| string\n\t| undefined;\n\n/**\n * Takes an array of element values and normalizes the output as an array of\n * nodes and strings.\n *\n * @returns Normalized array of nodes and/or strings.\n *\n * Normalize will flatten only one level of nested arrays, because it is\n * designed to be called once at each level of the tree. It will also\n * concatenate adjacent strings and remove all undefined values.\n */\nfunction normalize<TNode>(\n\tvalues: Array<ElementValue<TNode>>,\n): Array<TNode | string> {\n\tconst result: Array<TNode | string> = [];\n\tlet buffer: string | undefined;\n\tfor (let i = 0; i < values.length; i++) {\n\t\tconst value = values[i];\n\t\tif (!value) {\n\t\t\t// pass\n\t\t} else if (typeof value === \"string\") {\n\t\t\tbuffer = (buffer || \"\") + value;\n\t\t} else if (!Array.isArray(value)) {\n\t\t\tif (buffer) {\n\t\t\t\tresult.push(buffer);\n\t\t\t\tbuffer = undefined;\n\t\t\t}\n\n\t\t\tresult.push(value);\n\t\t} else {\n\t\t\t// We could use recursion here but it\u2019s just easier to do it inline.\n\t\t\tfor (let j = 0; j < value.length; j++) {\n\t\t\t\tconst value1 = value[j];\n\t\t\t\tif (!value1) {\n\t\t\t\t\t// pass\n\t\t\t\t} else if (typeof value1 === \"string\") {\n\t\t\t\t\tbuffer = (buffer || \"\") + value1;\n\t\t\t\t} else {\n\t\t\t\t\tif (buffer) {\n\t\t\t\t\t\tresult.push(buffer);\n\t\t\t\t\t\tbuffer = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.push(value1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (buffer) {\n\t\tresult.push(buffer);\n\t}\n\n\treturn result;\n}\n\n/**\n * @internal\n * The internal nodes which are cached and diffed against new elements when\n * rendering element trees.\n */\nclass Retainer<TNode> {\n\t/**\n\t * The element associated with this retainer.\n\t */\n\tdeclare el: Element;\n\t/**\n\t * The context associated with this element. Will only be defined for\n\t * component elements.\n\t */\n\tdeclare ctx: ContextImpl<TNode> | undefined;\n\t/**\n\t * The retainer children of this element. Retainers form a tree which mirrors\n\t * elements. Can be a single child or undefined as a memory optimization.\n\t */\n\tdeclare children: Array<RetainerChild<TNode>> | RetainerChild<TNode>;\n\t/**\n\t * The value associated with this element.\n\t */\n\tdeclare value: ElementValue<TNode>;\n\t/**\n\t * The cached child values of this element. Only host and component elements\n\t * will use this property.\n\t */\n\tdeclare cached: ElementValue<TNode>;\n\t/**\n\t * The child which this retainer replaces. This property is used when an\n\t * async retainer tree replaces previously rendered elements, so that the\n\t * previously rendered elements can remain visible until the async tree\n\t * fulfills. Will be set to undefined once this subtree fully renders.\n\t */\n\tdeclare fallback: RetainerChild<TNode>;\n\tdeclare inflight: Promise<ElementValue<TNode>> | undefined;\n\tdeclare onCommit: Function | undefined;\n\tconstructor(el: Element) {\n\t\tthis.el = el;\n\t\tthis.value = undefined;\n\t\tthis.ctx = undefined;\n\t\tthis.children = undefined;\n\t\tthis.cached = undefined;\n\t\tthis.fallback = undefined;\n\t\tthis.inflight = undefined;\n\t\tthis.onCommit = undefined;\n\t}\n}\n\n/**\n * The retainer equivalent of ElementValue\n */\ntype RetainerChild<TNode> = Retainer<TNode> | string | undefined;\n\n/**\n * Finds the value of the element according to its type.\n *\n * @returns The value of the element.\n */\nfunction getValue<TNode>(ret: Retainer<TNode>): ElementValue<TNode> {\n\tif (typeof ret.fallback !== \"undefined\") {\n\t\treturn typeof ret.fallback === \"object\"\n\t\t\t? getValue(ret.fallback)\n\t\t\t: ret.fallback;\n\t} else if (ret.el.tag === Portal) {\n\t\treturn;\n\t} else if (typeof ret.el.tag !== \"function\" && ret.el.tag !== Fragment) {\n\t\treturn ret.value;\n\t}\n\n\treturn unwrap(getChildValues(ret));\n}\n\n/**\n * Walks an element\u2019s children to find its child values.\n *\n * @returns A normalized array of nodes and strings.\n */\nfunction getChildValues<TNode>(ret: Retainer<TNode>): Array<TNode | string> {\n\tif (ret.cached) {\n\t\treturn wrap(ret.cached);\n\t}\n\n\tconst values: Array<ElementValue<TNode>> = [];\n\tconst children = wrap(ret.children);\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst child = children[i];\n\t\tif (child) {\n\t\t\tvalues.push(typeof child === \"string\" ? child : getValue(child));\n\t\t}\n\t}\n\n\tconst values1 = normalize(values);\n\tconst tag = ret.el.tag;\n\tif (typeof tag === \"function\" || (tag !== Fragment && tag !== Raw)) {\n\t\tret.cached = unwrap(values1);\n\t}\n\treturn values1;\n}\n\n// TODO: Document the interface and methods\nexport interface RendererImpl<\n\tTNode,\n\tTScope,\n\tTRoot extends TNode = TNode,\n\tTResult = ElementValue<TNode>,\n> {\n\tscope<TTag extends string | symbol>(\n\t\tscope: TScope | undefined,\n\t\ttag: TTag,\n\t\tprops: TagProps<TTag>,\n\t): TScope | undefined;\n\n\tcreate<TTag extends string | symbol>(\n\t\ttag: TTag,\n\t\tprops: TagProps<TTag>,\n\t\tscope: TScope | undefined,\n\t): TNode;\n\n\t/**\n\t * Called when an element\u2019s rendered value is exposed via render, schedule,\n\t * refresh, refs, or generator yield expressions.\n\t *\n\t * @param value - The value of the element being read. Can be a node, a\n\t * string, undefined, or an array of nodes and strings, depending on the\n\t * element.\n\t *\n\t * @returns Varies according to the specific renderer subclass. By default,\n\t * it exposes the element\u2019s value.\n\t *\n\t * This is useful for renderers which don\u2019t want to expose their internal\n\t * nodes. For instance, the HTML renderer will convert all internal nodes to\n\t * strings.\n\t */\n\tread(value: ElementValue<TNode>): TResult;\n\n\t/**\n\t * Called for each string in an element tree.\n\t *\n\t * @param text - The string child.\n\t * @param scope - The current scope.\n\t *\n\t * @returns The escaped string.\n\t *\n\t * Rather than returning text nodes for whatever environment we\u2019re rendering\n\t * to, we defer that step for Renderer.prototype.arrange. We do this so that\n\t * adjacent strings can be concatenated and the actual element tree can be\n\t * rendered in a normalized form.\n\t */\n\tescape(text: string, scope: TScope | undefined): string;\n\n\t/**\n\t * Called for each Raw element whose value prop is a string.\n\t *\n\t * @param text - The string child.\n\t * @param scope - The current scope.\n\t *\n\t * @returns The parsed node or string.\n\t */\n\tparse(text: string, scope: TScope | undefined): ElementValue<TNode>;\n\n\tpatch<TTag extends string | symbol, TName extends string>(\n\t\ttag: TTag,\n\t\tnode: TNode,\n\t\tname: TName,\n\t\tvalue: TagProps<TTag>[TName],\n\t\toldValue: TagProps<TTag>[TName] | undefined,\n\t\tscope: TScope,\n\t): unknown;\n\n\tarrange<TTag extends string | symbol>(\n\t\ttag: TTag,\n\t\tnode: TNode,\n\t\tprops: TagProps<TTag>,\n\t\tchildren: Array<TNode | string>,\n\t\toldProps: TagProps<TTag> | undefined,\n\t\toldChildren: Array<TNode | string> | undefined,\n\t): unknown;\n\n\tdispose<TTag extends string | symbol>(\n\t\ttag: TTag,\n\t\tnode: TNode,\n\t\tprops: TagProps<TTag>,\n\t): unknown;\n\n\tflush(root: TRoot): unknown;\n}\n\nconst defaultRendererImpl: RendererImpl<unknown, unknown, unknown, unknown> = {\n\tcreate() {\n\t\tthrow new Error(\"Not implemented\");\n\t},\n\tscope: IDENTITY,\n\tread: IDENTITY,\n\tescape: IDENTITY,\n\tparse: IDENTITY,\n\tpatch: NOOP,\n\tarrange: NOOP,\n\tdispose: NOOP,\n\tflush: NOOP,\n};\n\nconst $RendererImpl = Symbol.for(\"crank.RendererImpl\");\n/**\n * An abstract class which is subclassed to render to different target\n * environments. This class is responsible for kicking off the rendering\n * process and caching previous trees by root.\n *\n * @template TNode - The type of the node for a rendering environment.\n * @template TScope - Data which is passed down the tree.\n * @template TRoot - The type of the root for a rendering environment.\n * @template TResult - The type of exposed values.\n */\nexport class Renderer<\n\tTNode extends object = object,\n\tTScope = unknown,\n\tTRoot extends TNode = TNode,\n\tTResult = ElementValue<TNode>,\n> {\n\t/**\n\t * @internal\n\t * A weakmap which stores element trees by root.\n\t */\n\tdeclare cache: WeakMap<object, Retainer<TNode>>;\n\n\tdeclare [$RendererImpl]: RendererImpl<TNode, TScope, TRoot, TResult>;\n\tconstructor(impl: Partial<RendererImpl<TNode, TScope, TRoot, TResult>>) {\n\t\tthis.cache = new WeakMap();\n\t\tthis[$RendererImpl] = {\n\t\t\t...(defaultRendererImpl as RendererImpl<TNode, TScope, TRoot, TResult>),\n\t\t\t...impl,\n\t\t};\n\t}\n\n\t/**\n\t * Renders an element tree into a specific root.\n\t *\n\t * @param children - An element tree. You can render null with a previously\n\t * used root to delete the previously rendered element tree from the cache.\n\t * @param root - The node to be rendered into. The renderer will cache\n\t * element trees per root.\n\t * @param ctx - An optional context that will be the ancestor context of all\n\t * elements in the tree. Useful for connecting different renderers so that\n\t * events/provisions properly propagate. The context for a given root must be\n\t * the same or an error will be thrown.\n\t *\n\t * @returns The result of rendering the children, or a possible promise of\n\t * the result if the element tree renders asynchronously.\n\t */\n\trender(\n\t\tchildren: Children,\n\t\troot?: TRoot | undefined,\n\t\tbridge?: Context | undefined,\n\t): Promise<TResult> | TResult {\n\t\tlet ret: Retainer<TNode> | undefined;\n\t\tconst ctx = bridge && (bridge[$ContextImpl] as ContextImpl<TNode>);\n\t\tif (typeof root === \"object\" && root !== null) {\n\t\t\tret = this.cache.get(root);\n\t\t}\n\n\t\tlet oldProps: Record<string, any> | undefined;\n\t\tif (ret === undefined) {\n\t\t\tret = new Retainer(createElement(Portal, {children, root}));\n\t\t\tret.value = root;\n\t\t\tret.ctx = ctx;\n\t\t\tif (typeof root === \"object\" && root !== null && children != null) {\n\t\t\t\tthis.cache.set(root, ret);\n\t\t\t}\n\t\t} else if (ret.ctx !== ctx) {\n\t\t\tthrow new Error(\"Context mismatch\");\n\t\t} else {\n\t\t\toldProps = ret.el.props;\n\t\t\tret.el = createElement(Portal, {children, root});\n\t\t\tif (typeof root === \"object\" && root !== null && children == null) {\n\t\t\t\tthis.cache.delete(root);\n\t\t\t}\n\t\t}\n\n\t\tconst impl = this[$RendererImpl];\n\t\tconst childValues = diffChildren(\n\t\t\timpl,\n\t\t\troot,\n\t\t\tret,\n\t\t\tctx,\n\t\t\timpl.scope(undefined, Portal, ret.el.props),\n\t\t\tret,\n\t\t\tchildren,\n\t\t);\n\n\t\t// We return the child values of the portal because portal elements\n\t\t// themselves have no readable value.\n\t\tif (isPromiseLike(childValues)) {\n\t\t\treturn childValues.then((childValues) =>\n\t\t\t\tcommitRootRender(impl, root, ctx, ret!, childValues, oldProps),\n\t\t\t);\n\t\t}\n\n\t\treturn commitRootRender(impl, root, ctx, ret, childValues, oldProps);\n\t}\n}\n\n/*** PRIVATE RENDERER FUNCTIONS ***/\nfunction commitRootRender<TNode, TRoot extends TNode, TResult>(\n\trenderer: RendererImpl<TNode, unknown, TRoot, TResult>,\n\troot: TRoot | undefined,\n\tctx: ContextImpl<TNode> | undefined,\n\tret: Retainer<TNode>,\n\tchildValues: Array<TNode | string>,\n\toldProps: Record<string, any> | undefined,\n): TResult {\n\t// element is a host or portal element\n\tif (root !== undefined) {\n\t\trenderer.arrange(\n\t\t\tPortal,\n\t\t\troot,\n\t\t\tret.el.props,\n\t\t\tchildValues,\n\t\t\toldProps,\n\t\t\twrap(ret.cached),\n\t\t);\n\t\tflush(renderer, root);\n\t}\n\n\tret.cached = unwrap(childValues);\n\tif (root == null) {\n\t\tunmount(renderer, ret, ctx, ret);\n\t}\n\n\treturn renderer.read(ret.cached);\n}\n\nfunction diffChildren<TNode, TScope, TRoot extends TNode, TResult>(\n\trenderer: RendererImpl<TNode, TScope, TRoot, TResult>,\n\troot: TRoot | undefined,\n\thost: Retainer<TNode>,\n\tctx: ContextImpl<TNode, TScope, TRoot, TResult> | undefined,\n\tscope: TScope | undefined,\n\tparent: Retainer<TNode>,\n\tchildren: Children,\n): Promise<Array<TNode | string>> | Array<TNode | string> {\n\tconst oldRetained = wrap(parent.children);\n\tconst newRetained: typeof oldRetained = [];\n\tconst newChildren = arrayify(children);\n\tconst values: Array<Promise<ElementValue<TNode>> | ElementValue<TNode>> = [];\n\tlet graveyard: Array<Retainer<TNode>> | undefined;\n\tlet childrenByKey: Map<Key, Retainer<TNode>> | undefined;\n\tlet seenKeys: Set<Key> | undefined;\n\tlet isAsync = false;\n\tlet oi = 0,\n\t\toldLength = oldRetained.length;\n\tfor (let ni = 0, newLength = newChildren.length; ni < newLength; ni++) {\n\t\t// We make sure we don\u2019t access indices out of bounds to prevent\n\t\t// deoptimizations.\n\t\tlet ret = oi >= oldLength ? undefined : oldRetained[oi];\n\t\tlet child = narrow(newChildren[ni]);\n\t\t{\n\t\t\t// Aligning new children with old retainers\n\t\t\tlet oldKey = typeof ret === \"object\" ? ret.el.key : undefined;\n\t\t\tlet newKey = typeof child === \"object\" ? child.key : undefined;\n\t\t\tif (newKey !== undefined && seenKeys && seenKeys.has(newKey)) {\n\t\t\t\tconsole.error(\"Duplicate key\", newKey);\n\t\t\t\tnewKey = undefined;\n\t\t\t}\n\n\t\t\tif (oldKey === newKey) {\n\t\t\t\tif (childrenByKey !== undefined && newKey !== undefined) {\n\t\t\t\t\tchildrenByKey.delete(newKey);\n\t\t\t\t}\n\n\t\t\t\toi++;\n\t\t\t} else {\n\t\t\t\tchildrenByKey = childrenByKey || createChildrenByKey(oldRetained, oi);\n\t\t\t\tif (newKey === undefined) {\n\t\t\t\t\twhile (ret !== undefined && oldKey !== undefined) {\n\t\t\t\t\t\toi++;\n\t\t\t\t\t\tret = oldRetained[oi];\n\t\t\t\t\t\toldKey = typeof ret === \"object\" ? ret.el.key : undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\toi++;\n\t\t\t\t} else {\n\t\t\t\t\tret = childrenByKey.get(newKey);\n\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\tchildrenByKey.delete(newKey);\n\t\t\t\t\t}\n\n\t\t\t\t\t(seenKeys = seenKeys || new Set()).add(newKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Updating\n\t\tlet value: Promise<ElementValue<TNode>> | ElementValue<TNode>;\n\t\tif (typeof child === \"object\") {\n\t\t\tif (typeof ret === \"object\" && child.static_) {\n\t\t\t\tret.el = child;\n\t\t\t\tvalue = getInflightValue(ret);\n\t\t\t} else if (child.tag === Copy) {\n\t\t\t\tvalue = getInflightValue(ret);\n\t\t\t} else {\n\t\t\t\tlet oldProps: Record<string, any> | undefined;\n\t\t\t\tif (typeof ret === \"object\" && ret.el.tag === child.tag) {\n\t\t\t\t\toldProps = ret.el.props;\n\t\t\t\t\tret.el = child;\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof ret === \"object\") {\n\t\t\t\t\t\t(graveyard = graveyard || []).push(ret);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fallback = ret;\n\t\t\t\t\tret = new Retainer<TNode>(child);\n\t\t\t\t\tret.fallback = fallback;\n\t\t\t\t}\n\n\t\t\t\tif (child.tag === Raw) {\n\t\t\t\t\tvalue = updateRaw(renderer, ret, scope, oldProps);\n\t\t\t\t} else if (child.tag === Fragment) {\n\t\t\t\t\tvalue = updateFragment(renderer, root, host, ctx, scope, ret);\n\t\t\t\t} else if (typeof child.tag === \"function\") {\n\t\t\t\t\tvalue = updateComponent(\n\t\t\t\t\t\trenderer,\n\t\t\t\t\t\troot,\n\t\t\t\t\t\thost,\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\tscope,\n\t\t\t\t\t\tret,\n\t\t\t\t\t\toldProps,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = updateHost(renderer, root, ctx, scope, ret, oldProps);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst ref = child.ref;\n\t\t\tif (isPromiseLike(value)) {\n\t\t\t\tisAsync = true;\n\t\t\t\tif (typeof ref === \"function\") {\n\t\t\t\t\tvalue = value.then((value) => {\n\t\t\t\t\t\tref(renderer.read(value));\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (typeof ref === \"function\") {\n\t\t\t\tref(renderer.read(value));\n\t\t\t}\n\t\t} else {\n\t\t\t// child is a string or undefined\n\t\t\tif (typeof ret === \"object\") {\n\t\t\t\t(graveyard = graveyard || []).push(ret);\n\t\t\t}\n\n\t\t\tif (typeof child === \"string\") {\n\t\t\t\tvalue = ret = renderer.escape(child, scope);\n\t\t\t} else {\n\t\t\t\tret = undefined;\n\t\t\t}\n\t\t}\n\n\t\tvalues[ni] = value;\n\t\tnewRetained[ni] = ret;\n\t}\n\n\t// cleanup remaining retainers\n\tfor (; oi < oldLength; oi++) {\n\t\tconst ret = oldRetained[oi];\n\t\tif (typeof ret === \"object\" && typeof ret.el.key === \"undefined\") {\n\t\t\t(graveyard = graveyard || []).push(ret);\n\t\t}\n\t}\n\n\tif (childrenByKey !== undefined && childrenByKey.size > 0) {\n\t\t(graveyard = graveyard || []).push(...childrenByKey.values());\n\t}\n\n\tparent.children = unwrap(newRetained);\n\tif (isAsync) {\n\t\tlet childValues1 = Promise.all(values).finally(() => {\n\t\t\tif (graveyard) {\n\t\t\t\tfor (let i = 0; i < graveyard.length; i++) {\n\t\t\t\t\tunmount(renderer, host, ctx, graveyard[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet onChildValues!: Function;\n\t\tchildValues1 = Promise.race([\n\t\t\tchildValues1,\n\t\t\tnew Promise<any>((resolve) => (onChildValues = resolve)),\n\t\t]);\n\n\t\tif (parent.onCommit) {\n\t\t\tparent.onCommit(childValues1);\n\t\t}\n\n\t\tparent.onCommit = onChildValues;\n\t\treturn childValues1.then((childValues) => {\n\t\t\tparent.inflight = parent.fallback = undefined;\n\t\t\treturn normalize(childValues);\n\t\t});\n\t}\n\n\tif (graveyard) {\n\t\tfor (let i = 0; i < graveyard.length; i++) {\n\t\t\tunmount(renderer, host, ctx, graveyard[i]);\n\t\t}\n\t}\n\n\tif (parent.onCommit) {\n\t\tparent.onCommit(values);\n\t\tparent.onCommit = undefined;\n\t}\n\n\tparent.inflight = parent.fallback = undefined;\n\t// We can assert there are no promises in the array because isAsync is false\n\treturn normalize(values as Array<ElementValue<TNode>>);\n}\n\nfunction createChildrenByKey<TNode>(\n\tchildren: Array<RetainerChild<TNode>>,\n\toffset: number,\n): Map<Key, Retainer<TNode>> {\n\tconst childrenByKey = new Map<Key, Retainer<TNode>>();\n\tfor (let i = offset; i < children.length; i++) {\n\t\tconst child = children[i];\n\t\tif (typeof child === \"object\" && typeof child.el.key !== \"undefined\") {\n\t\t\tchildrenByKey.set(child.el.key, child);\n\t\t}\n\t}\n\n\treturn childrenByKey;\n}\n\nfunction getInflightValue<TNode>(\n\tchild: RetainerChild<TNode>,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tif (typeof child !== \"object\") {\n\t\treturn child;\n\t}\n\n\tconst ctx: ContextImpl<TNode> | undefined =\n\t\ttypeof child.el.tag === \"function\" ? child.ctx : undefined;\n\tif (ctx && ctx.f & IsUpdating && ctx.inflightValue) {\n\t\treturn ctx.inflightValue;\n\t} else if (child.inflight) {\n\t\treturn child.inflight;\n\t}\n\n\treturn getValue(child);\n}\n\nfunction updateRaw<TNode, TScope>(\n\trenderer: RendererImpl<TNode, TScope, TNode, unknown>,\n\tret: Retainer<TNode>,\n\tscope: TScope | undefined,\n\toldProps: Record<string, any> | undefined,\n): ElementValue<TNode> {\n\tconst props = ret.el.props;\n\tif (typeof props.value === \"string\") {\n\t\tif (!oldProps || oldProps.value !== props.value) {\n\t\t\tret.value = renderer.parse(props.value, scope);\n\t\t}\n\t} else {\n\t\tret.value = props.value;\n\t}\n\n\treturn ret.value;\n}\n\nfunction updateFragment<TNode, TScope, TRoot extends TNode>(\n\trenderer: RendererImpl<TNode, TScope, TRoot, unknown>,\n\troot: TRoot | undefined,\n\thost: Retainer<TNode>,\n\tctx: ContextImpl<TNode, TScope, TRoot> | undefined,\n\tscope: TScope | undefined,\n\tret: Retainer<TNode>,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tconst childValues = diffChildren(\n\t\trenderer,\n\t\troot,\n\t\thost,\n\t\tctx,\n\t\tscope,\n\t\tret,\n\t\tret.el.props.children,\n\t);\n\n\tif (isPromiseLike(childValues)) {\n\t\tret.inflight = childValues.then((childValues) => unwrap(childValues));\n\t\treturn ret.inflight;\n\t}\n\n\treturn unwrap(childValues);\n}\n\nfunction updateHost<TNode, TScope, TRoot extends TNode>(\n\trenderer: RendererImpl<TNode, TScope, TRoot, unknown>,\n\troot: TRoot | undefined,\n\tctx: ContextImpl<TNode, TScope, TRoot> | undefined,\n\tscope: TScope | undefined,\n\tret: Retainer<TNode>,\n\toldProps: Record<string, any> | undefined,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tconst el = ret.el;\n\tconst tag = el.tag as string | symbol;\n\tif (el.tag === Portal) {\n\t\troot = ret.value = el.props.root;\n\t} else if (!oldProps) {\n\t\t// We use the truthiness of oldProps to determine if this the first render.\n\t\tret.value = renderer.create(tag, el.props, scope);\n\t}\n\n\tscope = renderer.scope(scope, tag, el.props);\n\tconst childValues = diffChildren(\n\t\trenderer,\n\t\troot,\n\t\tret,\n\t\tctx,\n\t\tscope,\n\t\tret,\n\t\tret.el.props.children,\n\t);\n\n\tif (isPromiseLike(childValues)) {\n\t\tret.inflight = childValues.then((childValues) =>\n\t\t\tcommitHost(renderer, scope, ret, childValues, oldProps),\n\t\t);\n\n\t\treturn ret.inflight;\n\t}\n\n\treturn commitHost(renderer, scope, ret, childValues, oldProps);\n}\n\nfunction commitHost<TNode, TScope>(\n\trenderer: RendererImpl<TNode, TScope, TNode, unknown>,\n\tscope: TScope,\n\tret: Retainer<TNode>,\n\tchildValues: Array<TNode | string>,\n\toldProps: Record<string, any> | undefined,\n): ElementValue<TNode> {\n\tconst tag = ret.el.tag as string | symbol;\n\tconst value = ret.value as TNode;\n\tlet props = ret.el.props;\n\tlet copied: Set<string> | undefined;\n\tif (tag !== Portal) {\n\t\tfor (const propName in {...oldProps, ...props}) {\n\t\t\tconst propValue = props[propName];\n\t\t\tif (propValue === Copy) {\n\t\t\t\t(copied = copied || new Set()).add(propName);\n\t\t\t} else if (propName !== \"children\") {\n\t\t\t\trenderer.patch(\n\t\t\t\t\ttag,\n\t\t\t\t\tvalue,\n\t\t\t\t\tpropName,\n\t\t\t\t\tpropValue,\n\t\t\t\t\toldProps && oldProps[propName],\n\t\t\t\t\tscope,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (copied) {\n\t\tprops = {...ret.el.props};\n\t\tfor (const name of copied) {\n\t\t\tprops[name] = oldProps && oldProps[name];\n\t\t}\n\n\t\tret.el = new Element(tag, props, ret.el.key, ret.el.ref);\n\t}\n\n\trenderer.arrange(tag, value, props, childValues, oldProps, wrap(ret.cached));\n\tret.cached = unwrap(childValues);\n\tif (tag === Portal) {\n\t\tflush(renderer, ret.value);\n\t\treturn;\n\t}\n\n\treturn value;\n}\n\nfunction flush<TRoot>(\n\trenderer: RendererImpl<unknown, unknown, TRoot>,\n\troot: TRoot,\n\tinitiator?: ContextImpl,\n) {\n\trenderer.flush(root);\n\tif (typeof root !== \"object\" || root === null) {\n\t\treturn;\n\t}\n\n\tconst flushMap = flushMaps.get(root as any);\n\tif (flushMap) {\n\t\tif (initiator) {\n\t\t\tconst flushMap1 = new Map<ContextImpl, Set<Function>>();\n\t\t\tfor (let [ctx, callbacks] of flushMap) {\n\t\t\t\tif (!ctxContains(initiator, ctx)) {\n\t\t\t\t\tflushMap.delete(ctx);\n\t\t\t\t\tflushMap1.set(ctx, callbacks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flushMap1.size) {\n\t\t\t\tflushMaps.set(root as any, flushMap1);\n\t\t\t} else {\n\t\t\t\tflushMaps.delete(root as any);\n\t\t\t}\n\t\t} else {\n\t\t\tflushMaps.delete(root as any);\n\t\t}\n\n\t\tfor (const [ctx, callbacks] of flushMap) {\n\t\t\tconst value = renderer.read(getValue(ctx.ret));\n\t\t\tfor (const callback of callbacks) {\n\t\t\t\tcallback(value);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction unmount<TNode, TScope, TRoot extends TNode, TResult>(\n\trenderer: RendererImpl<TNode, TScope, TRoot, TResult>,\n\thost: Retainer<TNode>,\n\tctx: ContextImpl<TNode, TScope, TRoot, TResult> | undefined,\n\tret: Retainer<TNode>,\n): void {\n\tif (typeof ret.el.tag === \"function\") {\n\t\tctx = ret.ctx as ContextImpl<TNode, TScope, TRoot, TResult>;\n\t\tunmountComponent(ctx);\n\t} else if (ret.el.tag === Portal) {\n\t\thost = ret;\n\t\trenderer.arrange(\n\t\t\tPortal,\n\t\t\thost.value as TNode,\n\t\t\thost.el.props,\n\t\t\t[],\n\t\t\thost.el.props,\n\t\t\twrap(host.cached),\n\t\t);\n\t\tflush(renderer, host.value);\n\t} else if (ret.el.tag !== Fragment) {\n\t\tif (isEventTarget(ret.value)) {\n\t\t\tconst records = getListenerRecords(ctx, host);\n\t\t\tfor (let i = 0; i < records.length; i++) {\n\t\t\t\tconst record = records[i];\n\t\t\t\tret.value.removeEventListener(\n\t\t\t\t\trecord.type,\n\t\t\t\t\trecord.callback,\n\t\t\t\t\trecord.options,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\trenderer.dispose(ret.el.tag, ret.value as TNode, ret.el.props);\n\t\thost = ret;\n\t}\n\n\tconst children = wrap(ret.children);\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst child = children[i];\n\t\tif (typeof child === \"object\") {\n\t\t\tunmount(renderer, host, ctx, child);\n\t\t}\n\t}\n}\n\n/*** CONTEXT FLAGS ***/\n/**\n * A flag which is set when the component is being updated by the parent and\n * cleared when the component has committed. Used to determine things like\n * whether the nearest host ancestor needs to be rearranged.\n */\nconst IsUpdating = 1 << 0;\n\n/**\n * A flag which is set when the component function or generator is\n * synchronously executing. This flags is used to ensure that a component which\n * triggers a second update in the course of rendering does not cause a stack\n * overflow or a generator error.\n */\nconst IsExecuting = 1 << 1;\n\n/**\n * A flag used to make sure multiple values are not pulled from context prop\n * iterators without a yield.\n */\nconst IsIterating = 1 << 2;\n\n/**\n * A flag used by async generator components in conjunction with the\n * onavailable (_oa) callback to mark whether new props can be pulled via the\n * context async iterator. See the Symbol.asyncIterator method and the\n * resumeCtxIterator function.\n */\nconst IsAvailable = 1 << 3;\n\n/**\n * A flag which is set when a generator components returns, i.e. the done\n * property on the iteration is set to true. Generator components will stick to\n * their last rendered value and ignore further updates.\n */\nconst IsDone = 1 << 4;\n\n/**\n * A flag which is set when a generator component errors.\n *\n * NOTE: This is mainly used to prevent some false positives in component\n * yields or returns undefined warnings. The reason we\u2019re using this versus\n * IsUnmounted is a very troubling jest test (cascades sync generator parent\n * and sync generator child) where synchronous code causes a stack overflow\n * error in a non-deterministic way. Deeply disturbing stuff.\n */\nconst IsErrored = 1 << 5;\n\n/**\n * A flag which is set when the component is unmounted. Unmounted components\n * are no longer in the element tree and cannot refresh or rerender.\n */\nconst IsUnmounted = 1 << 6;\n\n/**\n * A flag which indicates that the component is a sync generator component.\n */\nconst IsSyncGen = 1 << 7;\n\n/**\n * A flag which indicates that the component is an async generator component.\n */\nconst IsAsyncGen = 1 << 8;\n\n/**\n * A flag which is set while schedule callbacks are called.\n */\nconst IsScheduling = 1 << 9;\n\n/**\n * A flag which is set when a schedule callback calls refresh.\n */\nconst IsSchedulingRefresh = 1 << 10;\n\nexport interface Context extends Crank.Context {}\n\n/**\n * An interface which can be extended to provide strongly typed provisions.\n * See Context.prototype.consume and Context.prototype.provide.\n */\nexport interface ProvisionMap extends Crank.ProvisionMap {}\n\nconst provisionMaps = new WeakMap<ContextImpl, Map<unknown, unknown>>();\n\nconst scheduleMap = new WeakMap<ContextImpl, Set<Function>>();\n\nconst cleanupMap = new WeakMap<ContextImpl, Set<Function>>();\n\n// keys are roots\nconst flushMaps = new WeakMap<object, Map<ContextImpl, Set<Function>>>();\n\n/**\n * @internal\n * The internal class which holds all context data.\n */\nclass ContextImpl<\n\tTNode = unknown,\n\tTScope = unknown,\n\tTRoot extends TNode = TNode,\n\tTResult = unknown,\n> {\n\t/**\n\t * flags - A bitmask. See CONTEXT FLAGS above.\n\t */\n\tdeclare f: number;\n\n\t/**\n\t * ctx - The actual object passed as this to components.\n\t */\n\tdeclare ctx: Context<unknown, TResult>;\n\n\t/**\n\t * renderer - The renderer which created this context.\n\t */\n\tdeclare renderer: RendererImpl<TNode, TScope, TRoot, TResult>;\n\n\t/**\n\t * root - The root node as set by the nearest ancestor portal.\n\t */\n\tdeclare root: TRoot | undefined;\n\n\t/**\n\t * host - The nearest host or portal retainer.\n\t *\n\t * When refresh is called, the host element will be arranged as the last step\n\t * of the commit, to make sure the parent\u2019s children properly reflects the\n\t * components\u2019s children.\n\t */\n\tdeclare host: Retainer<TNode>;\n\n\t/**\n\t * parent - The parent context.\n\t */\n\tdeclare parent: ContextImpl<TNode, TScope, TRoot, TResult> | undefined;\n\n\t/**\n\t * scope - The value of the scope at the point of element\u2019s creation.\n\t */\n\tdeclare scope: TScope | undefined;\n\n\t/**\n\t * retainer - The internal node associated with this context.\n\t */\n\tdeclare ret: Retainer<TNode>;\n\n\t/**\n\t * iterator - The iterator returned by the component function.\n\t */\n\tdeclare iterator:\n\t\t| Iterator<Children, Children | void, unknown>\n\t\t| AsyncIterator<Children, Children | void, unknown>\n\t\t| undefined;\n\n\t/*** async properties ***/\n\t// See the runComponent/stepComponent/advanceComponent functions for more\n\t// notes on the inflight/enqueued block/value properties.\n\t/**\n\t * inflightBlock\n\t */\n\tdeclare inflightBlock: Promise<unknown> | undefined;\n\n\t// TODO: Can we combine this with retainer.inflight somehow please.\n\t/**\n\t * inflightValue\n\t */\n\tdeclare inflightValue: Promise<ElementValue<TNode>> | undefined;\n\n\t/**\n\t * enqueuedBlock\n\t */\n\tdeclare enqueuedBlock: Promise<unknown> | undefined;\n\n\t/**\n\t * enqueuedValue\n\t */\n\tdeclare enqueuedValue: Promise<ElementValue<TNode>> | undefined;\n\n\t/**\n\t * onavailable - A callback used in conjunction with the IsAvailable flag to\n\t * implement the props async iterator. See the Symbol.asyncIterator method\n\t * and the resumeCtxIterator function.\n\t */\n\tdeclare onAvailable: Function | undefined;\n\n\tconstructor(\n\t\trenderer: RendererImpl<TNode, TScope, TRoot, TResult>,\n\t\troot: TRoot | undefined,\n\t\thost: Retainer<TNode>,\n\t\tparent: ContextImpl<TNode, TScope, TRoot, TResult> | undefined,\n\t\tscope: TScope | undefined,\n\t\tret: Retainer<TNode>,\n\t) {\n\t\tthis.f = 0;\n\t\tthis.ctx = new Context(this);\n\t\tthis.renderer = renderer;\n\t\tthis.root = root;\n\t\tthis.host = host;\n\t\tthis.parent = parent;\n\t\tthis.scope = scope;\n\t\tthis.ret = ret;\n\t\tthis.iterator = undefined;\n\t\tthis.inflightBlock = undefined;\n\t\tthis.inflightValue = undefined;\n\t\tthis.enqueuedBlock = undefined;\n\t\tthis.enqueuedValue = undefined;\n\t\tthis.onAvailable = undefined;\n\t}\n}\n\nconst $ContextImpl = Symbol.for(\"crank.ContextImpl\");\n\n/**\n * A class which is instantiated and passed to every component as its this\n * value. Contexts form a tree just like elements and all components in the\n * element tree are connected via contexts. Components can use this tree to\n * communicate data upwards via events and downwards via provisions.\n *\n * @template [TProps=*] - The expected shape of the props passed to the\n * component. Used to strongly type the Context iterator methods.\n * @template [TResult=*] - The readable element value type. It is used in\n * places such as the return value of refresh and the argument passed to\n * schedule and cleanup callbacks.\n */\nexport class Context<TProps = any, TResult = any> implements EventTarget {\n\t/**\n\t * @internal\n\t */\n\tdeclare [$ContextImpl]: ContextImpl<unknown, unknown, unknown, TResult>;\n\n\tconstructor(impl: ContextImpl<unknown, unknown, unknown, TResult>) {\n\t\tthis[$ContextImpl] = impl;\n\t}\n\n\t/**\n\t * The current props of the associated element.\n\t *\n\t * Typically, you should read props either via the first parameter of the\n\t * component or via the context iterator methods. This property is mainly for\n\t * plugins or utilities which wrap contexts.\n\t */\n\tget props(): TProps {\n\t\treturn this[$ContextImpl].ret.el.props;\n\t}\n\n\t// TODO: Should we rename this???\n\t/**\n\t * The current value of the associated element.\n\t *\n\t * Typically, you should read values via refs, generator yield expressions,\n\t * or the refresh, schedule, cleanup, or flush methods. This property is\n\t * mainly for plugins or utilities which wrap contexts.\n\t */\n\tget value(): TResult {\n\t\treturn this[$ContextImpl].renderer.read(getValue(this[$ContextImpl].ret));\n\t}\n\n\t*[Symbol.iterator](): Generator<TProps> {\n\t\tconst impl = this[$ContextImpl];\n\t\twhile (!(impl.f & IsDone)) {\n\t\t\tif (impl.f & IsIterating) {\n\t\t\t\tthrow new Error(\"Context iterated twice without a yield\");\n\t\t\t} else if (impl.f & IsAsyncGen) {\n\t\t\t\tthrow new Error(\"Use for await\u2026of in async generator components\");\n\t\t\t}\n\n\t\t\timpl.f |= IsIterating;\n\t\t\tyield impl.ret.el.props!;\n\t\t}\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<TProps> {\n\t\t// We use a do while loop rather than a while loop to handle an edge case\n\t\t// where an async generator component is unmounted synchronously and\n\t\t// therefore \u201Cdone\u201D before it starts iterating over the context.\n\t\tconst impl = this[$ContextImpl];\n\t\tdo {\n\t\t\tif (impl.f & IsIterating) {\n\t\t\t\tthrow new Error(\"Context iterated twice without a yield\");\n\t\t\t} else if (impl.f & IsSyncGen) {\n\t\t\t\tthrow new Error(\"Use for\u2026of in sync generator components\");\n\t\t\t}\n\n\t\t\timpl.f |= IsIterating;\n\t\t\tif (impl.f & IsAvailable) {\n\t\t\t\timpl.f &= ~IsAvailable;\n\t\t\t} else {\n\t\t\t\tawait new Promise((resolve) => (impl.onAvailable = resolve));\n\t\t\t\tif (impl.f & IsDone) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tyield impl.ret.el.props;\n\t\t} while (!(impl.f & IsDone));\n\t}\n\n\t/**\n\t * Re-executes a component.\n\t *\n\t * @returns The rendered value of the component or a promise thereof if the\n\t * component or its children execute asynchronously.\n\t *\n\t * The refresh method works a little differently for async generator\n\t * components, in that it will resume the Context\u2019s props async iterator\n\t * rather than resuming execution. This is because async generator components\n\t * are perpetually resumed independent of updates, and rely on the props\n\t * async iterator to suspend.\n\t */\n\trefresh(): Promise<TResult> | TResult {\n\t\tconst impl = this[$ContextImpl];\n\t\tif (impl.f & IsUnmounted) {\n\t\t\tconsole.error(\"Component is unmounted\");\n\t\t\treturn impl.renderer.read(undefined);\n\t\t} else if (impl.f & IsExecuting) {\n\t\t\tconsole.error(\"Component is already executing\");\n\t\t\treturn this.value;\n\t\t}\n\n\t\tresumeCtxIterator(impl);\n\t\tconst value = runComponent(impl);\n\t\tif (isPromiseLike(value)) {\n\t\t\treturn (value as Promise<any>).then((value) => impl.renderer.read(value));\n\t\t}\n\n\t\treturn impl.renderer.read(value);\n\t}\n\n\t/**\n\t * Registers a callback which fires when the component commits. Will only\n\t * fire once per callback and update.\n\t */\n\tschedule(callback: (value: TResult) => unknown): void {\n\t\tconst impl = this[$ContextImpl];\n\t\tlet callbacks = scheduleMap.get(impl);\n\t\tif (!callbacks) {\n\t\t\tcallbacks = new Set<Function>();\n\t\t\tscheduleMap.set(impl, callbacks);\n\t\t}\n\n\t\tcallbacks.add(callback);\n\t}\n\n\t/**\n\t * Registers a callback which fires when the component\u2019s children are\n\t * rendered into the root. Will only fire once per callback and render.\n\t */\n\tflush(callback: (value: TResult) => unknown): void {\n\t\tconst impl = this[$ContextImpl];\n\t\tif (typeof impl.root !== \"object\" || impl.root === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet flushMap = flushMaps.get(impl.root);\n\t\tif (!flushMap) {\n\t\t\tflushMap = new Map<ContextImpl, Set<Function>>();\n\t\t\tflushMaps.set(impl.root, flushMap);\n\t\t}\n\n\t\tlet callbacks = flushMap.get(impl);\n\t\tif (!callbacks) {\n\t\t\tcallbacks = new Set<Function>();\n\t\t\tflushMap.set(impl, callbacks);\n\t\t}\n\n\t\tcallbacks.add(callback);\n\t}\n\n\t/**\n\t * Registers a callback which fires when the component unmounts. Will only\n\t * fire once per callback.\n\t */\n\tcleanup(callback: (value: TResult) => unknown): void {\n\t\tconst impl = this[$ContextImpl];\n\t\tlet callbacks = cleanupMap.get(impl);\n\t\tif (!callbacks) {\n\t\t\tcallbacks = new Set<Function>();\n\t\t\tcleanupMap.set(impl, callbacks);\n\t\t}\n\n\t\tcallbacks.add(callback);\n\t}\n\n\tconsume<TKey extends keyof ProvisionMap>(key: TKey): ProvisionMap[TKey];\n\tconsume(key: unknown): any;\n\tconsume(key: unknown): any {\n\t\tfor (\n\t\t\tlet parent = this[$ContextImpl].parent;\n\t\t\tparent !== undefined;\n\t\t\tparent = parent.parent\n\t\t) {\n\t\t\tconst provisions = provisionMaps.get(parent);\n\t\t\tif (provisions && provisions.has(key)) {\n\t\t\t\treturn provisions.get(key)!;\n\t\t\t}\n\t\t}\n\t}\n\n\tprovide<TKey extends keyof ProvisionMap>(\n\t\tkey: TKey,\n\t\tvalue: ProvisionMap[TKey],\n\t): void;\n\tprovide(key: unknown, value: any): void;\n\tprovide(key: unknown, value: any): void {\n\t\tconst impl = this[$ContextImpl];\n\t\tlet provisions = provisionMaps.get(impl);\n\t\tif (!provisions) {\n\t\t\tprovisions = new Map();\n\t\t\tprovisionMaps.set(impl, provisions);\n\t\t}\n\n\t\tprovisions.set(key, value);\n\t}\n\n\taddEventListener<T extends string>(\n\t\ttype: T,\n\t\tlistener: MappedEventListenerOrEventListenerObject<T> | null,\n\t\toptions?: boolean | AddEventListenerOptions,\n\t): void {\n\t\treturn addEventListener(this[$ContextImpl], type, listener, options);\n\t}\n\n\tremoveEventListener<T extends string>(\n\t\ttype: T,\n\t\tlistener: MappedEventListenerOrEventListenerObject<T> | null,\n\t\toptions?: EventListenerOptions | boolean,\n\t): void {\n\t\treturn removeEventListener(this[$ContextImpl], type, listener, options);\n\t}\n\n\tdispatchEvent(ev: Event): boolean {\n\t\treturn dispatchEvent(this[$ContextImpl], ev);\n\t}\n}\n\n/*** PRIVATE CONTEXT FUNCTIONS ***/\nfunction ctxContains(parent: ContextImpl, child: ContextImpl): boolean {\n\tfor (\n\t\tlet current: ContextImpl | undefined = child;\n\t\tcurrent !== undefined;\n\t\tcurrent = current.parent\n\t) {\n\t\tif (current === parent) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction updateComponent<TNode, TScope, TRoot extends TNode, TResult>(\n\trenderer: RendererImpl<TNode, TScope, TRoot, TResult>,\n\troot: TRoot | undefined,\n\thost: Retainer<TNode>,\n\tparent: ContextImpl<TNode, TScope, TRoot, TResult> | undefined,\n\tscope: TScope | undefined,\n\tret: Retainer<TNode>,\n\toldProps: Record<string, any> | undefined,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tlet ctx: ContextImpl<TNode, TScope, TRoot, TResult>;\n\tif (oldProps) {\n\t\tctx = ret.ctx as ContextImpl<TNode, TScope, TRoot, TResult>;\n\t\tif (ctx.f & IsExecuting) {\n\t\t\tconsole.error(\"Component is already executing\");\n\t\t\treturn ret.cached;\n\t\t}\n\t} else {\n\t\tctx = ret.ctx = new ContextImpl(renderer, root, host, parent, scope, ret);\n\t}\n\n\tctx.f |= IsUpdating;\n\tresumeCtxIterator(ctx);\n\treturn runComponent(ctx);\n}\n\nfunction updateComponentChildren<TNode, TResult>(\n\tctx: ContextImpl<TNode, unknown, TNode, TResult>,\n\tchildren: Children,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tif (ctx.f & IsUnmounted || ctx.f & IsErrored) {\n\t\treturn;\n\t} else if (children === undefined) {\n\t\tconsole.error(\n\t\t\t\"A component has returned or yielded undefined. If this was intentional, return or yield null instead.\",\n\t\t);\n\t}\n\n\tlet childValues: Promise<Array<string | TNode>> | Array<string | TNode>;\n\t// We set the isExecuting flag in case a child component dispatches an event\n\t// which bubbles to this component and causes a synchronous refresh().\n\tctx.f |= IsExecuting;\n\ttry {\n\t\tchildValues = diffChildren(\n\t\t\tctx.renderer,\n\t\t\tctx.root,\n\t\t\tctx.host,\n\t\t\tctx,\n\t\t\tctx.scope,\n\t\t\tctx.ret,\n\t\t\tnarrow(children),\n\t\t);\n\t} finally {\n\t\tctx.f &= ~IsExecuting;\n\t}\n\n\tif (isPromiseLike(childValues)) {\n\t\tctx.ret.inflight = childValues.then((childValues) =>\n\t\t\tcommitComponent(ctx, childValues),\n\t\t);\n\n\t\treturn ctx.ret.inflight;\n\t}\n\n\treturn commitComponent(ctx, childValues);\n}\n\nfunction commitComponent<TNode>(\n\tctx: ContextImpl<TNode, unknown, TNode>,\n\tvalues: Array<TNode | string>,\n): ElementValue<TNode> {\n\tif (ctx.f & IsUnmounted) {\n\t\treturn;\n\t}\n\n\tconst listeners = listenersMap.get(ctx);\n\tif (listeners && listeners.length) {\n\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\tconst value = values[i];\n\t\t\tif (isEventTarget(value)) {\n\t\t\t\tfor (let j = 0; j < listeners.length; j++) {\n\t\t\t\t\tconst record = listeners[j];\n\t\t\t\t\tvalue.addEventListener(record.type, record.callback, record.options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst oldValues = wrap(ctx.ret.cached);\n\tlet value = (ctx.ret.cached = unwrap(values));\n\tif (ctx.f & IsScheduling) {\n\t\tctx.f |= IsSchedulingRefresh;\n\t} else if (!(ctx.f & IsUpdating)) {\n\t\t// If we\u2019re not updating the component, which happens when components are\n\t\t// refreshed, or when async generator components iterate, we have to do a\n\t\t// little bit housekeeping when a component\u2019s child values have changed.\n\t\tif (!valuesEqual(oldValues, values)) {\n\t\t\tconst records = getListenerRecords(ctx.parent, ctx.host);\n\t\t\tif (records.length) {\n\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\tconst value = values[i];\n\t\t\t\t\tif (isEventTarget(value)) {\n\t\t\t\t\t\tfor (let j = 0; j < records.length; j++) {\n\t\t\t\t\t\t\tconst record = records[j];\n\t\t\t\t\t\t\tvalue.addEventListener(\n\t\t\t\t\t\t\t\trecord.type,\n\t\t\t\t\t\t\t\trecord.callback,\n\t\t\t\t\t\t\t\trecord.options,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// rearranging the nearest ancestor host element\n\t\t\tconst host = ctx.host;\n\t\t\tconst oldHostValues = wrap(host.cached);\n\t\t\tinvalidate(ctx, host);\n\t\t\tconst hostValues = getChildValues(host);\n\t\t\tctx.renderer.arrange(\n\t\t\t\thost.el.tag as string | symbol,\n\t\t\t\thost.value as TNode,\n\t\t\t\thost.el.props,\n\t\t\t\thostValues,\n\t\t\t\t// props and oldProps are the same because the host isn\u2019t updated.\n\t\t\t\thost.el.props,\n\t\t\t\toldHostValues,\n\t\t\t);\n\t\t}\n\n\t\tflush(ctx.renderer, ctx.root, ctx);\n\t}\n\n\tconst callbacks = scheduleMap.get(ctx);\n\tif (callbacks) {\n\t\tscheduleMap.delete(ctx);\n\t\tctx.f |= IsScheduling;\n\t\tconst value1 = ctx.renderer.read(value);\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(value1);\n\t\t}\n\n\t\tctx.f &= ~IsScheduling;\n\t\t// Handles an edge case where refresh() is called during a schedule().\n\t\tif (ctx.f & IsSchedulingRefresh) {\n\t\t\tctx.f &= ~IsSchedulingRefresh;\n\t\t\tvalue = getValue(ctx.ret);\n\t\t}\n\t}\n\n\tctx.f &= ~IsUpdating;\n\treturn value;\n}\n\nfunction invalidate(ctx: ContextImpl, host: Retainer<unknown>): void {\n\tfor (\n\t\tlet parent = ctx.parent;\n\t\tparent !== undefined && parent.host === host;\n\t\tparent = parent.parent\n\t) {\n\t\tparent.ret.cached = undefined;\n\t}\n\n\thost.cached = undefined;\n}\n\nfunction valuesEqual<TValue>(\n\tvalues1: Array<TValue>,\n\tvalues2: Array<TValue>,\n): boolean {\n\tif (values1.length !== values2.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < values1.length; i++) {\n\t\tconst value1 = values1[i];\n\t\tconst value2 = values2[i];\n\t\tif (value1 !== value2) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Enqueues and executes the component associated with the context.\n *\n * The functions stepComponent and runComponent work together\n * to implement the async queueing behavior of components. The runComponent\n * function calls the stepComponent function, which returns two results in a\n * tuple. The first result, called the \u201Cblock,\u201D is a possible promise which\n * represents the duration for which the component is blocked from accepting\n * new updates. The second result, called the \u201Cvalue,\u201D is the actual result of\n * the update. The runComponent function caches block/value from the\n * stepComponent function on the context, according to whether the component\n * blocks. The \u201Cinflight\u201D block/value properties are the currently executing\n * update, and the \u201Cenqueued\u201D block/value properties represent an enqueued next\n * stepComponent. Enqueued steps are dequeued every time the current block\n * promise settles.\n */\nfunction runComponent<TNode, TResult>(\n\tctx: ContextImpl<TNode, unknown, TNode, TResult>,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tif (!ctx.inflightBlock) {\n\t\ttry {\n\t\t\tconst [block, value] = stepComponent<TNode, TResult>(ctx);\n\t\t\tif (block) {\n\t\t\t\tctx.inflightBlock = block\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tif (!(ctx.f & IsUpdating)) {\n\t\t\t\t\t\t\treturn propagateError<TNode>(ctx.parent, err);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => advanceComponent(ctx));\n\t\t\t\t// stepComponent will only return a block if the value is asynchronous\n\t\t\t\tctx.inflightValue = value as Promise<ElementValue<TNode>>;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t} catch (err) {\n\t\t\tif (!(ctx.f & IsUpdating)) {\n\t\t\t\treturn propagateError<TNode>(ctx.parent, err);\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t}\n\t} else if (ctx.f & IsAsyncGen) {\n\t\treturn ctx.inflightValue;\n\t} else if (!ctx.enqueuedBlock) {\n\t\tlet resolve: Function;\n\t\tctx.enqueuedBlock = ctx.inflightBlock\n\t\t\t.then(() => {\n\t\t\t\ttry {\n\t\t\t\t\tconst [block, value] = stepComponent<TNode, TResult>(ctx);\n\t\t\t\t\tresolve(value);\n\t\t\t\t\tif (block) {\n\t\t\t\t\t\treturn block.catch((err) => {\n\t\t\t\t\t\t\tif (!(ctx.f & IsUpdating)) {\n\t\t\t\t\t\t\t\treturn propagateError<TNode>(ctx.parent, err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!(ctx.f & IsUpdating)) {\n\t\t\t\t\t\treturn propagateError<TNode>(ctx.parent, err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.finally(() => advanceComponent(ctx));\n\t\tctx.enqueuedValue = new Promise((resolve1) => (resolve = resolve1));\n\t}\n\n\treturn ctx.enqueuedValue;\n}\n\n/**\n * This function is responsible for executing the component and handling all\n * the different component types.\n *\n * @returns {[block, value]} A tuple where\n * block - A possible promise which represents the duration during which the\n * component is blocked from updating.\n * value - A possible promise resolving to the rendered value of children.\n *\n * Each component type will block according to the type of the component.\n * - Sync function components never block and will transparently pass updates\n * to children.\n * - Async function components and async generator components block while\n * executing itself, but will not block for async children.\n * - Sync generator components block while any children are executing, because\n * they are expected to only resume when they\u2019ve actually rendered.\n */\nfunction stepComponent<TNode, TResult>(\n\tctx: ContextImpl<TNode, unknown, TNode, TResult>,\n): [\n\tPromise<unknown> | undefined,\n\tPromise<ElementValue<TNode>> | ElementValue<TNode>,\n] {\n\tconst ret = ctx.ret;\n\tif (ctx.f & IsDone) {\n\t\treturn [undefined, getValue(ret)];\n\t}\n\n\tconst initial = !ctx.iterator;\n\tif (initial) {\n\t\tctx.f |= IsExecuting;\n\t\tclearEventListeners(ctx);\n\t\tlet result: ReturnType<Component>;\n\t\ttry {\n\t\t\tresult = (ret.el.tag as Component).call(ctx.ctx, ret.el.props);\n\t\t} catch (err) {\n\t\t\tctx.f |= IsErrored;\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tctx.f &= ~IsExecuting;\n\t\t}\n\n\t\tif (isIteratorLike(result)) {\n\t\t\tctx.iterator = result;\n\t\t} else if (isPromiseLike(result)) {\n\t\t\t// async function component\n\t\t\tconst result1 =\n\t\t\t\tresult instanceof Promise ? result : Promise.resolve(result);\n\t\t\tconst value = result1.then(\n\t\t\t\t(result) => updateComponentChildren<TNode, TResult>(ctx, result),\n\t\t\t\t(err) => {\n\t\t\t\t\tctx.f |= IsErrored;\n\t\t\t\t\tthrow err;\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn [result1, value];\n\t\t} else {\n\t\t\t// sync function component\n\t\t\treturn [undefined, updateComponentChildren<TNode, TResult>(ctx, result)];\n\t\t}\n\t}\n\n\tlet oldValue: Promise<TResult> | TResult;\n\tif (initial) {\n\t\t// The argument passed to the first call to next is ignored.\n\t\toldValue = undefined as any;\n\t} else if (ctx.ret.inflight) {\n\t\t// The value passed back into the generator as the argument to the next\n\t\t// method is a promise if an async generator component has async children.\n\t\t// Sync generator components only resume when their children have fulfilled\n\t\t// so the element\u2019s inflight child values will never be defined.\n\t\toldValue = ctx.ret.inflight.then(\n\t\t\t(value) => ctx.renderer.read(value),\n\t\t\t() => ctx.renderer.read(undefined),\n\t\t);\n\t} else {\n\t\toldValue = ctx.renderer.read(getValue(ret));\n\t}\n\n\tlet iteration: ChildrenIteration;\n\tctx.f |= IsExecuting;\n\ttry {\n\t\titeration = ctx.iterator!.next(oldValue);\n\t} catch (err) {\n\t\tctx.f |= IsDone | IsErrored;\n\t\tthrow err;\n\t} finally {\n\t\tctx.f &= ~IsExecuting;\n\t}\n\n\tif (isPromiseLike(iteration)) {\n\t\t// async generator component\n\t\tif (initial) {\n\t\t\tctx.f |= IsAsyncGen;\n\t\t}\n\n\t\tconst value: Promise<ElementValue<TNode>> = iteration.then(\n\t\t\t(iteration) => {\n\t\t\t\tif (!(ctx.f & IsIterating)) {\n\t\t\t\t\tctx.f &= ~IsAvailable;\n\t\t\t\t}\n\n\t\t\t\tctx.f &= ~IsIterating;\n\t\t\t\tif (iteration.done) {\n\t\t\t\t\tctx.f |= IsDone;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst value = updateComponentChildren<TNode, TResult>(\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\titeration.value as Children,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isPromiseLike(value)) {\n\t\t\t\t\t\treturn value.catch((err) => handleChildError(ctx, err));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value;\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn handleChildError(ctx, err);\n\t\t\t\t}\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tctx.f |= IsDone | IsErrored;\n\t\t\t\tthrow err;\n\t\t\t},\n\t\t);\n\n\t\treturn [iteration, value];\n\t}\n\n\t// sync generator component\n\tif (initial) {\n\t\tctx.f |= IsSyncGen;\n\t}\n\n\tctx.f &= ~IsIterating;\n\tif (iteration.done) {\n\t\tctx.f |= IsDone;\n\t}\n\n\tlet value: Promise<ElementValue<TNode>> | ElementValue<TNode>;\n\ttry {\n\t\tvalue = updateComponentChildren<TNode, TResult>(\n\t\t\tctx,\n\t\t\titeration.value as Children,\n\t\t);\n\t\tif (isPromiseLike(value)) {\n\t\t\tvalue = value.catch((err) => handleChildError(ctx, err));\n\t\t}\n\t} catch (err) {\n\t\tvalue = handleChildError(ctx, err);\n\t}\n\n\tif (isPromiseLike(value)) {\n\t\treturn [value.catch(NOOP), value];\n\t}\n\n\treturn [undefined, value];\n}\n\n/**\n * Called when the inflight block promise settles.\n */\nfunction advanceComponent(ctx: ContextImpl): void {\n\tctx.inflightBlock = ctx.enqueuedBlock;\n\tctx.inflightValue = ctx.enqueuedValue;\n\tctx.enqueuedBlock = undefined;\n\tctx.enqueuedValue = undefined;\n\tif (ctx.f & IsAsyncGen && !(ctx.f & IsDone) && !(ctx.f & IsUnmounted)) {\n\t\trunComponent(ctx);\n\t}\n}\n\n/**\n * Called to make props available to the props async iterator for async\n * generator components.\n */\nfunction resumeCtxIterator(ctx: ContextImpl): void {\n\tif (ctx.onAvailable) {\n\t\tctx.onAvailable();\n\t\tctx.onAvailable = undefined;\n\t} else {\n\t\tctx.f |= IsAvailable;\n\t}\n}\n\n// TODO: async unmounting\nfunction unmountComponent(ctx: ContextImpl): void {\n\tctx.f |= IsUnmounted;\n\tclearEventListeners(ctx);\n\tconst callbacks = cleanupMap.get(ctx);\n\tif (callbacks) {\n\t\tcleanupMap.delete(ctx);\n\t\tconst value = ctx.renderer.read(getValue(ctx.ret));\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(value);\n\t\t}\n\t}\n\n\tif (!(ctx.f & IsDone)) {\n\t\tctx.f |= IsDone;\n\t\tresumeCtxIterator(ctx);\n\t\tif (ctx.iterator && typeof ctx.iterator.return === \"function\") {\n\t\t\tctx.f |= IsExecuting;\n\t\t\ttry {\n\t\t\t\tconst iteration = ctx.iterator.return();\n\t\t\t\tif (isPromiseLike(iteration)) {\n\t\t\t\t\titeration.catch((err) => propagateError<unknown>(ctx.parent, err));\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tctx.f &= ~IsExecuting;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/*** EVENT TARGET UTILITIES ***/\n// EVENT PHASE CONSTANTS\n// https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase\nconst NONE = 0;\nconst CAPTURING_PHASE = 1;\nconst AT_TARGET = 2;\nconst BUBBLING_PHASE = 3;\n\nconst listenersMap = new WeakMap<ContextImpl, Array<EventListenerRecord>>();\n/**\n * A map of event type strings to Event subclasses. Can be extended via\n * TypeScript module augmentation to have strongly typed event listeners.\n */\nexport interface EventMap extends Crank.EventMap {\n\t[type: string]: Event;\n}\n\ntype MappedEventListener<T extends string> = (ev: EventMap[T]) => unknown;\n\ntype MappedEventListenerOrEventListenerObject<T extends string> =\n\t| MappedEventListener<T>\n\t| {handleEvent: MappedEventListener<T>};\n\ninterface EventListenerRecord {\n\ttype: string;\n\tcallback: MappedEventListener<any>;\n\tlistener: MappedEventListenerOrEventListenerObject<any>;\n\toptions: AddEventListenerOptions;\n}\n\nfunction addEventListener<T extends string>(\n\tctx: ContextImpl,\n\ttype: T,\n\tlistener: MappedEventListenerOrEventListenerObject<T> | null,\n\toptions?: boolean | AddEventListenerOptions,\n): void {\n\tlet listeners: Array<EventListenerRecord>;\n\tif (listener == null) {\n\t\treturn;\n\t} else {\n\t\tconst listeners1 = listenersMap.get(ctx);\n\t\tif (listeners1) {\n\t\t\tlisteners = listeners1;\n\t\t} else {\n\t\t\tlisteners = [];\n\t\t\tlistenersMap.set(ctx, listeners);\n\t\t}\n\t}\n\n\toptions = normalizeListenerOptions(options);\n\tlet callback: MappedEventListener<T>;\n\tif (typeof listener === \"object\") {\n\t\tcallback = () => listener.handleEvent.apply(listener, arguments as any);\n\t} else {\n\t\tcallback = listener;\n\t}\n\n\tconst record: EventListenerRecord = {type, callback, listener, options};\n\tif (options.once) {\n\t\trecord.callback = function (this: any) {\n\t\t\tconst i = listeners.indexOf(record);\n\t\t\tif (i !== -1) {\n\t\t\t\tlisteners.splice(i, 1);\n\t\t\t}\n\n\t\t\treturn callback.apply(this, arguments as any);\n\t\t};\n\t}\n\n\tif (\n\t\tlisteners.some(\n\t\t\t(record1) =>\n\t\t\t\trecord.type === record1.type &&\n\t\t\t\trecord.listener === record1.listener &&\n\t\t\t\t!record.options.capture === !record1.options.capture,\n\t\t)\n\t) {\n\t\treturn;\n\t}\n\n\tlisteners.push(record);\n\n\t// TODO: is it possible to separate out the EventTarget delegation logic\n\tfor (const value of getChildValues(ctx.ret)) {\n\t\tif (isEventTarget(value)) {\n\t\t\tvalue.addEventListener(record.type, record.callback, record.options);\n\t\t}\n\t}\n}\n\nfunction removeEventListener<T extends string>(\n\tctx: ContextImpl,\n\ttype: T,\n\tlistener: MappedEventListenerOrEventListenerObject<T> | null,\n\toptions?: EventListenerOptions | boolean,\n): void {\n\tconst listeners = listenersMap.get(ctx);\n\tif (listener == null || listeners == null) {\n\t\treturn;\n\t}\n\n\tconst options1 = normalizeListenerOptions(options);\n\tconst i = listeners.findIndex(\n\t\t(record) =>\n\t\t\trecord.type === type &&\n\t\t\trecord.listener === listener &&\n\t\t\t!record.options.capture === !options1.capture,\n\t);\n\n\tif (i === -1) {\n\t\treturn;\n\t}\n\n\tconst record = listeners[i];\n\tlisteners.splice(i, 1);\n\n\t// TODO: is it possible to separate out the EventTarget delegation logic\n\tfor (const value of getChildValues(ctx.ret)) {\n\t\tif (isEventTarget(value)) {\n\t\t\tvalue.removeEventListener(record.type, record.callback, record.options);\n\t\t}\n\t}\n}\n\nfunction dispatchEvent(ctx: ContextImpl, ev: Event): boolean {\n\tconst path: Array<ContextImpl> = [];\n\tfor (let parent = ctx.parent; parent !== undefined; parent = parent.parent) {\n\t\tpath.push(parent);\n\t}\n\n\t// We patch the stopImmediatePropagation method because ev.cancelBubble\n\t// only informs us if stopPropagation was called and there are no\n\t// properties which inform us if stopImmediatePropagation was called.\n\tlet immediateCancelBubble = false;\n\tconst stopImmediatePropagation = ev.stopImmediatePropagation;\n\tsetEventProperty(ev, \"stopImmediatePropagation\", () => {\n\t\timmediateCancelBubble = true;\n\t\treturn stopImmediatePropagation.call(ev);\n\t});\n\tsetEventProperty(ev, \"target\", ctx.ctx);\n\n\t// The only possible errors in this block are errors thrown by callbacks,\n\t// and dispatchEvent will only log these errors rather than throwing\n\t// them. Therefore, we place all code in a try block, log errors in the\n\t// catch block, and use an unsafe return statement in the finally block.\n\t//\n\t// Each early return within the try block returns true because while the\n\t// return value is overridden in the finally block, TypeScript\n\t// (justifiably) does not recognize the unsafe return statement.\n\t//\n\t// TODO: Run all callbacks even if one of them errors\n\ttry {\n\t\tsetEventProperty(ev, \"eventPhase\", CAPTURING_PHASE);\n\t\tfor (let i = path.length - 1; i >= 0; i--) {\n\t\t\tconst target = path[i];\n\t\t\tconst listeners = listenersMap.get(target);\n\t\t\tif (listeners) {\n\t\t\t\tsetEventProperty(ev, \"currentTarget\", target.ctx);\n\t\t\t\tfor (const record of listeners) {\n\t\t\t\t\tif (record.type === ev.type && record.options.capture) {\n\t\t\t\t\t\trecord.callback.call(target.ctx, ev);\n\t\t\t\t\t\tif (immediateCancelBubble) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ev.cancelBubble) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t{\n\t\t\tconst listeners = listenersMap.get(ctx);\n\t\t\tif (listeners) {\n\t\t\t\tsetEventProperty(ev, \"eventPhase\", AT_TARGET);\n\t\t\t\tsetEventProperty(ev, \"currentTarget\", ctx.ctx);\n\t\t\t\tfor (const record of listeners) {\n\t\t\t\t\tif (record.type === ev.type) {\n\t\t\t\t\t\trecord.callback.call(ctx.ctx, ev);\n\t\t\t\t\t\tif (immediateCancelBubble) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (ev.cancelBubble) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (ev.bubbles) {\n\t\t\tsetEventProperty(ev, \"eventPhase\", BUBBLING_PHASE);\n\t\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\t\tconst target = path[i];\n\t\t\t\tconst listeners = listenersMap.get(target);\n\t\t\t\tif (listeners) {\n\t\t\t\t\tsetEventProperty(ev, \"currentTarget\", target.ctx);\n\t\t\t\t\tfor (const record of listeners) {\n\t\t\t\t\t\tif (record.type === ev.type && !record.options.capture) {\n\t\t\t\t\t\t\trecord.callback.call(target.ctx, ev);\n\t\t\t\t\t\t\tif (immediateCancelBubble) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (ev.cancelBubble) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t// TODO: Use setTimeout to rethrow the error.\n\t\tconsole.error(err);\n\t} finally {\n\t\tsetEventProperty(ev, \"eventPhase\", NONE);\n\t\tsetEventProperty(ev, \"currentTarget\", null);\n\t\t// eslint-disable-next-line no-unsafe-finally\n\t\treturn !ev.defaultPrevented;\n\t}\n}\n\nfunction normalizeListenerOptions(\n\toptions: AddEventListenerOptions | boolean | null | undefined,\n): AddEventListenerOptions {\n\tif (typeof options === \"boolean\") {\n\t\treturn {capture: options};\n\t} else if (options == null) {\n\t\treturn {};\n\t}\n\n\treturn options;\n}\n\nfunction isEventTarget(value: any): value is EventTarget {\n\treturn (\n\t\tvalue != null &&\n\t\ttypeof value.addEventListener === \"function\" &&\n\t\ttypeof value.removeEventListener === \"function\" &&\n\t\ttypeof value.dispatchEvent === \"function\"\n\t);\n}\n\nfunction setEventProperty<T extends keyof Event>(\n\tev: Event,\n\tkey: T,\n\tvalue: Event[T],\n): void {\n\tObject.defineProperty(ev, key, {value, writable: false, configurable: true});\n}\n\n// TODO: Maybe we can pass in the current context directly, rather than\n// starting from the parent?\n/**\n * A function to reconstruct an array of every listener given a context and a\n * host element.\n *\n * This function exploits the fact that contexts retain their nearest ancestor\n * host element. We can determine all the contexts which are directly listening\n * to an element by traversing up the context tree and checking that the host\n * element passed in matches the parent context\u2019s host element.\n */\nfunction getListenerRecords(\n\tctx: ContextImpl | undefined,\n\tret: Retainer<unknown>,\n): Array<EventListenerRecord> {\n\tlet listeners: Array<EventListenerRecord> = [];\n\twhile (ctx !== undefined && ctx.host === ret) {\n\t\tconst listeners1 = listenersMap.get(ctx);\n\t\tif (listeners1) {\n\t\t\tlisteners = listeners.concat(listeners1);\n\t\t}\n\n\t\tctx = ctx.parent;\n\t}\n\n\treturn listeners;\n}\n\nfunction clearEventListeners(ctx: ContextImpl): void {\n\tconst listeners = listenersMap.get(ctx);\n\tif (listeners && listeners.length) {\n\t\tfor (const value of getChildValues(ctx.ret)) {\n\t\t\tif (isEventTarget(value)) {\n\t\t\t\tfor (const record of listeners) {\n\t\t\t\t\tvalue.removeEventListener(\n\t\t\t\t\t\trecord.type,\n\t\t\t\t\t\trecord.callback,\n\t\t\t\t\t\trecord.options,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlisteners.length = 0;\n\t}\n}\n\n/*** ERROR HANDLING UTILITIES ***/\n// TODO: generator components which throw errors should be recoverable\nfunction handleChildError<TNode>(\n\tctx: ContextImpl<TNode, unknown, TNode>,\n\terr: unknown,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tif (\n\t\tctx.f & IsDone ||\n\t\t!ctx.iterator ||\n\t\ttypeof ctx.iterator.throw !== \"function\"\n\t) {\n\t\tthrow err;\n\t}\n\n\tresumeCtxIterator(ctx);\n\tlet iteration: ChildrenIteration;\n\ttry {\n\t\tctx.f |= IsExecuting;\n\t\titeration = ctx.iterator.throw(err);\n\t} catch (err) {\n\t\tctx.f |= IsDone | IsErrored;\n\t\tthrow err;\n\t} finally {\n\t\tctx.f &= ~IsExecuting;\n\t}\n\n\tif (isPromiseLike(iteration)) {\n\t\treturn iteration.then(\n\t\t\t(iteration) => {\n\t\t\t\tif (iteration.done) {\n\t\t\t\t\tctx.f |= IsDone;\n\t\t\t\t}\n\n\t\t\t\treturn updateComponentChildren(ctx, iteration.value as Children);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tctx.f |= IsDone | IsErrored;\n\t\t\t\tthrow err;\n\t\t\t},\n\t\t);\n\t}\n\n\tif (iteration.done) {\n\t\tctx.f |= IsDone;\n\t}\n\n\treturn updateComponentChildren(ctx, iteration.value as Children);\n}\n\nfunction propagateError<TNode>(\n\tctx: ContextImpl<TNode, unknown, TNode> | undefined,\n\terr: unknown,\n): Promise<ElementValue<TNode>> | ElementValue<TNode> {\n\tif (ctx === undefined) {\n\t\tthrow err;\n\t}\n\n\tlet result: Promise<ElementValue<TNode>> | ElementValue<TNode>;\n\ttry {\n\t\tresult = handleChildError(ctx, err);\n\t} catch (err) {\n\t\treturn propagateError<TNode>(ctx.parent, err);\n\t}\n\n\tif (isPromiseLike(result)) {\n\t\treturn result.catch((err) => propagateError<TNode>(ctx.parent, err));\n\t}\n\n\treturn result;\n}\n\n// TODO: uncomment and use in the Element interface below\n// type CrankElement = Element;\ndeclare global {\n\tnamespace Crank {\n\t\texport interface EventMap {}\n\n\t\texport interface ProvisionMap {}\n\n\t\texport interface Context {}\n\t}\n\n\tnamespace JSX {\n\t\t// TODO: JSX Element type (the result of JSX expressions) don\u2019t work\n\t\t// because TypeScript demands that all Components return JSX elements for\n\t\t// some reason.\n\t\t// interface Element extends CrankElement {}\n\n\t\texport interface IntrinsicElements {\n\t\t\t[tag: string]: any;\n\t\t}\n\n\t\texport interface ElementChildrenAttribute {\n\t\t\tchildren: {};\n\t\t}\n\t}\n}\n\n/**\n * Some JSX transpilation tools expect these functions to be defined on the\n * default export. Prefer named exports when importing directly.\n */\nexport default {createElement, Fragment};\n", "import {\n\tChildren,\n\tContext,\n\tElementValue,\n\tPortal,\n\tRenderer,\n\tRendererImpl,\n} from \"./crank.js\";\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\nexport const impl: Partial<RendererImpl<Node, string>> = {\n\tparse(text: string): ElementValue<Node> {\n\t\tif (typeof document.createRange === \"function\") {\n\t\t\tconst fragment = document.createRange().createContextualFragment(text);\n\t\t\treturn Array.from(fragment.childNodes);\n\t\t} else {\n\t\t\tconst childNodes = new DOMParser().parseFromString(text, \"text/html\").body\n\t\t\t\t.childNodes;\n\t\t\treturn Array.from(childNodes);\n\t\t}\n\t},\n\n\tscope(scope: string, tag: string | symbol): string | undefined {\n\t\t// TODO: Should we handle xmlns???\n\t\tswitch (tag) {\n\t\t\tcase Portal:\n\t\t\tcase \"foreignObject\":\n\t\t\t\treturn undefined;\n\t\t\tcase \"svg\":\n\t\t\t\treturn SVG_NAMESPACE;\n\t\t\tdefault:\n\t\t\t\treturn scope;\n\t\t}\n\t},\n\n\tcreate(tag: string | symbol, _props: unknown, ns: string | undefined): Node {\n\t\tif (typeof tag !== \"string\") {\n\t\t\tthrow new Error(`Unknown tag: ${tag.toString()}`);\n\t\t} else if (tag.toLowerCase() === \"svg\") {\n\t\t\tns = SVG_NAMESPACE;\n\t\t}\n\n\t\treturn ns ? document.createElementNS(ns, tag) : document.createElement(tag);\n\t},\n\n\tpatch(\n\t\t_tag: string | symbol,\n\t\t// TODO: Why does this assignment work?\n\t\tnode: HTMLElement | SVGElement,\n\t\tname: string,\n\t\t// TODO: Stricter typings?\n\t\tvalue: unknown,\n\t\toldValue: unknown,\n\t\tscope: string | undefined,\n\t): void {\n\t\tconst isSVG = scope === SVG_NAMESPACE;\n\t\tswitch (name) {\n\t\t\tcase \"style\": {\n\t\t\t\tconst style: CSSStyleDeclaration = node.style;\n\t\t\t\tif (style == null) {\n\t\t\t\t\tnode.setAttribute(\"style\", value as string);\n\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\tnode.removeAttribute(\"style\");\n\t\t\t\t} else if (value === true) {\n\t\t\t\t\tnode.setAttribute(\"style\", \"\");\n\t\t\t\t} else if (typeof value === \"string\") {\n\t\t\t\t\tif (style.cssText !== value) {\n\t\t\t\t\t\tstyle.cssText = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof oldValue === \"string\") {\n\t\t\t\t\t\tstyle.cssText = \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const styleName in {...(oldValue as {}), ...(value as {})}) {\n\t\t\t\t\t\tconst styleValue = value && (value as any)[styleName];\n\t\t\t\t\t\tif (styleValue == null) {\n\t\t\t\t\t\t\tstyle.removeProperty(styleName);\n\t\t\t\t\t\t} else if (style.getPropertyValue(styleName) !== styleValue) {\n\t\t\t\t\t\t\tstyle.setProperty(styleName, styleValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"class\":\n\t\t\tcase \"className\":\n\t\t\t\tif (value === true) {\n\t\t\t\t\tnode.setAttribute(\"class\", \"\");\n\t\t\t\t} else if (value == null) {\n\t\t\t\t\tnode.removeAttribute(\"class\");\n\t\t\t\t} else if (!isSVG) {\n\t\t\t\t\tif (node.className !== value) {\n\t\t\t\t\t\t(node as any)[\"className\"] = value;\n\t\t\t\t\t}\n\t\t\t\t} else if (node.getAttribute(\"class\") !== value) {\n\t\t\t\t\tnode.setAttribute(\"class\", value as string);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"innerHTML\":\n\t\t\t\tif (value !== oldValue) {\n\t\t\t\t\tnode.innerHTML = value as any;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tdefault: {\n\t\t\t\tif (\n\t\t\t\t\tname in node &&\n\t\t\t\t\t// boolean properties will coerce strings, but sometimes they map to\n\t\t\t\t\t// enumerated attributes, where truthy strings (\"false\", \"no\") map to\n\t\t\t\t\t// falsy properties, so we use attributes in this case.\n\t\t\t\t\t!(\n\t\t\t\t\t\ttypeof value === \"string\" &&\n\t\t\t\t\t\ttypeof (node as any)[name] === \"boolean\"\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ((node as any)[name] !== value) {\n\t\t\t\t\t\t\t(node as any)[name] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t// some properties are readonly so we fallback to setting them as\n\t\t\t\t\t\t// attributes\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value === true) {\n\t\t\t\t\tvalue = \"\";\n\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\tnode.removeAttribute(name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (node.getAttribute(name) !== value) {\n\t\t\t\t\tnode.setAttribute(name, value as any);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tarrange(\n\t\ttag: string | symbol,\n\t\tnode: Node,\n\t\tprops: Record<string, any>,\n\t\tchildren: Array<Element | string>,\n\t\t_oldProps: Record<string, any> | undefined,\n\t\toldChildren: Array<Element | string> | undefined,\n\t): void {\n\t\tif (tag === Portal && (node == null || typeof node.nodeType !== \"number\")) {\n\t\t\tthrow new TypeError(\n\t\t\t\t`Portal root is not a node. Received: ${JSON.stringify(\n\t\t\t\t\tnode && node.toString(),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t!(\"innerHTML\" in props) &&\n\t\t\t// We don\u2019t want to update elements without explicit children (<div/>),\n\t\t\t// because these elements sometimes have child nodes added via raw\n\t\t\t// DOM manipulations.\n\t\t\t// However, if an element has previously rendered children, we clear the\n\t\t\t// them because it would be surprising not to clear Crank managed\n\t\t\t// children, even if the new element does not have explicit children.\n\t\t\t(\"children\" in props || (oldChildren && oldChildren.length))\n\t\t) {\n\t\t\tif (children.length === 0) {\n\t\t\t\tnode.textContent = \"\";\n\t\t\t} else {\n\t\t\t\tlet oldChild = node.firstChild;\n\t\t\t\tlet i = 0;\n\t\t\t\twhile (oldChild !== null && i < children.length) {\n\t\t\t\t\tconst newChild = children[i];\n\t\t\t\t\tif (oldChild === newChild) {\n\t\t\t\t\t\toldChild = oldChild.nextSibling;\n\t\t\t\t\t\ti++;\n\t\t\t\t\t} else if (typeof newChild === \"string\") {\n\t\t\t\t\t\tif (oldChild.nodeType === Node.TEXT_NODE) {\n\t\t\t\t\t\t\tif ((oldChild as Text).data !== newChild) {\n\t\t\t\t\t\t\t\t(oldChild as Text).data = newChild;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toldChild = oldChild.nextSibling;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode.insertBefore(document.createTextNode(newChild), oldChild);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ti++;\n\t\t\t\t\t} else if (oldChild.nodeType === Node.TEXT_NODE) {\n\t\t\t\t\t\tconst nextSibling = oldChild.nextSibling;\n\t\t\t\t\t\tnode.removeChild(oldChild);\n\t\t\t\t\t\toldChild = nextSibling;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.insertBefore(newChild, oldChild);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\t// TODO: This is an optimization but we need to think a little more about other cases like prepending.\n\t\t\t\t\t\tif (oldChild !== children[i]) {\n\t\t\t\t\t\t\tconst nextSibling = oldChild.nextSibling;\n\t\t\t\t\t\t\tnode.removeChild(oldChild);\n\t\t\t\t\t\t\toldChild = nextSibling;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// remove excess DOM nodes\n\t\t\t\twhile (oldChild !== null) {\n\t\t\t\t\tconst nextSibling = oldChild.nextSibling;\n\t\t\t\t\tnode.removeChild(oldChild);\n\t\t\t\t\toldChild = nextSibling;\n\t\t\t\t}\n\n\t\t\t\t// append excess children\n\t\t\t\tfor (; i < children.length; i++) {\n\t\t\t\t\tconst newChild = children[i];\n\t\t\t\t\tnode.appendChild(\n\t\t\t\t\t\ttypeof newChild === \"string\"\n\t\t\t\t\t\t\t? document.createTextNode(newChild)\n\t\t\t\t\t\t\t: newChild,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n};\n\nexport class DOMRenderer extends Renderer<Node, string> {\n\tconstructor() {\n\t\tsuper(impl);\n\t}\n\n\trender(\n\t\tchildren: Children,\n\t\troot: Node,\n\t\tctx?: Context,\n\t): Promise<ElementValue<Node>> | ElementValue<Node> {\n\t\tif (root == null || typeof root.nodeType !== \"number\") {\n\t\t\tthrow new TypeError(\n\t\t\t\t`Render root is not a node. Received: ${JSON.stringify(\n\t\t\t\t\troot && root.toString(),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\n\t\treturn super.render(children, root, ctx);\n\t}\n}\n\nexport const renderer = new DOMRenderer();\n\ndeclare global {\n\tmodule Crank {\n\t\tinterface EventMap extends GlobalEventHandlersEventMap {}\n\t}\n}\n", "/** @jsx createElement */\nimport {createElement} from \"@b9g/crank\";\nimport {renderer} from \"@b9g/crank/dom.js\";\n\nimport Prism from \"prismjs\";\n// TODO: lazily import these?\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-tsx\";\nimport \"prismjs/components/prism-diff\";\nimport \"prismjs/components/prism-bash\";\nimport {ContentAreaElement} from \"@b9g/revise/contentarea.js\";\nimport {CodeBlock} from \"../shared/prism\";\n\n// @ts-ignore\nPrism.manual = true;\n\nif (!window.customElements.get(\"content-area\")) {\n\twindow.customElements.define(\"content-area\", ContentAreaElement);\n}\n\nfor (const el of Array.from(document.querySelectorAll(\".codeblock\"))) {\n\tconst {code, lang} = (el as HTMLElement).dataset;\n\tif (code != null && lang != null) {\n\t\trenderer.render(<CodeBlock value={code} lang={lang} />, el);\n\t}\n}\n", "Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:prototype|constructor))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n", "(function (Prism) {\n\n\tvar javascript = Prism.util.clone(Prism.languages.javascript);\n\n\tvar space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n\tvar braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n\tvar spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n\n\t/**\n\t * @param {string} source\n\t * @param {string} [flags]\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<S>/g, function () { return space; })\n\t\t\t.replace(/<BRACES>/g, function () { return braces; })\n\t\t\t.replace(/<SPREAD>/g, function () { return spread; });\n\t\treturn RegExp(source, flags);\n\t}\n\n\tspread = re(spread).source;\n\n\n\tPrism.languages.jsx = Prism.languages.extend('markup', javascript);\n\tPrism.languages.jsx.tag.pattern = re(\n\t\t/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source\n\t);\n\n\tPrism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n\tPrism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i;\n\tPrism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n\tPrism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n\n\tPrism.languages.insertBefore('inside', 'attr-name', {\n\t\t'spread': {\n\t\t\tpattern: re(/<SPREAD>/.source),\n\t\t\tinside: Prism.languages.jsx\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\tPrism.languages.insertBefore('inside', 'special-attr', {\n\t\t'script': {\n\t\t\t// Allow for two levels of nesting\n\t\t\tpattern: re(/=<BRACES>/.source),\n\t\t\tinside: {\n\t\t\t\t'script-punctuation': {\n\t\t\t\t\tpattern: /^=(?=\\{)/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.jsx\n\t\t\t},\n\t\t\t'alias': 'language-javascript'\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\t// The following will handle plain text inside tags\n\tvar stringifyToken = function (token) {\n\t\tif (!token) {\n\t\t\treturn '';\n\t\t}\n\t\tif (typeof token === 'string') {\n\t\t\treturn token;\n\t\t}\n\t\tif (typeof token.content === 'string') {\n\t\t\treturn token.content;\n\t\t}\n\t\treturn token.content.map(stringifyToken).join('');\n\t};\n\n\tvar walkTokens = function (tokens) {\n\t\tvar openedTags = [];\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar notTagNorBrace = false;\n\n\t\t\tif (typeof token !== 'string') {\n\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n\t\t\t\t\t// We found a tag, now find its kind\n\n\t\t\t\t\tif (token.content[0].content[0].content === '</') {\n\t\t\t\t\t\t// Closing tag\n\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n\t\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\t\topenedTags.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {\n\t\t\t\t\t\t\t// Autoclosed tag, ignore\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\t\topenedTags.push({\n\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),\n\t\t\t\t\t\t\t\topenedBraces: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n\n\t\t\t\t\t// Here we might have entered a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;\n\n\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n\n\t\t\t\t\t// Here we might have left a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;\n\n\t\t\t\t} else {\n\t\t\t\t\tnotTagNorBrace = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (notTagNorBrace || typeof token === 'string') {\n\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n\t\t\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t\t\t// That's plain text: drop any tokens matched.\n\t\t\t\t\tvar plainText = stringifyToken(token);\n\n\t\t\t\t\t// And merge text with adjacent text\n\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);\n\t\t\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;\n\t\t\t\t\t\ttokens.splice(i - 1, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (token.content && typeof token.content !== 'string') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'jsx' && env.language !== 'tsx') {\n\t\t\treturn;\n\t\t}\n\t\twalkTokens(env.tokens);\n\t});\n\n}(Prism));\n", "(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n", "(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n", "(function (Prism) {\n\n\tPrism.languages.diff = {\n\t\t'coord': [\n\t\t\t// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n\t\t\t/^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n\t\t\t// Match \"@@ ... @@\" coord lines in unified diff.\n\t\t\t/^@@.*@@$/m,\n\t\t\t// Match coord lines in normal diff (starts with a number).\n\t\t\t/^\\d.*$/m\n\t\t]\n\n\t\t// deleted, inserted, unchanged, diff\n\t};\n\n\t/**\n\t * A map from the name of a block to its line prefix.\n\t *\n\t * @type {Object<string, string>}\n\t */\n\tvar PREFIXES = {\n\t\t'deleted-sign': '-',\n\t\t'deleted-arrow': '<',\n\t\t'inserted-sign': '+',\n\t\t'inserted-arrow': '>',\n\t\t'unchanged': ' ',\n\t\t'diff': '!',\n\t};\n\n\t// add a token for each prefix\n\tObject.keys(PREFIXES).forEach(function (name) {\n\t\tvar prefix = PREFIXES[name];\n\n\t\tvar alias = [];\n\t\tif (!/^\\w+$/.test(name)) { // \"deleted-sign\" -> \"deleted\"\n\t\t\talias.push(/\\w+/.exec(name)[0]);\n\t\t}\n\t\tif (name === 'diff') {\n\t\t\talias.push('bold');\n\t\t}\n\n\t\tPrism.languages.diff[name] = {\n\t\t\tpattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n\t\t\talias: alias,\n\t\t\tinside: {\n\t\t\t\t'line': {\n\t\t\t\t\tpattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'prefix': {\n\t\t\t\t\tpattern: /[\\s\\S]/,\n\t\t\t\t\talias: /\\w+/.exec(name)[0]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t});\n\n\t// make prefixes available to Diff plugin\n\tObject.defineProperty(Prism.languages.diff, 'PREFIXES', {\n\t\tvalue: PREFIXES\n\t});\n\n}(Prism));\n", "(function (Prism) {\n\t// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n\t// + LC_ALL, RANDOM, REPLY, SECONDS.\n\t// + make sure PS1..4 are here as they are not always set,\n\t// - some useless things.\n\tvar envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n\n\tvar commandAfterHeredoc = {\n\t\tpattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation', // this looks reasonably well in all themes\n\t\tinside: null // see below\n\t};\n\n\tvar insideString = {\n\t\t'bash': commandAfterHeredoc,\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': [\n\t\t\t// [0]: Arithmetic Environment\n\t\t\t{\n\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable\n\t\t\t\t\t'variable': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/^\\$\\(\\(/\n\t\t\t\t\t],\n\t\t\t\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n\t\t\t\t\t'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation\n\t\t\t\t\t'punctuation': /\\(\\(?|\\)\\)?|,|;/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [1]: Command Substitution\n\t\t\t{\n\t\t\t\tpattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'variable': /^\\$\\(|^`|\\)$|`$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [2]: Brace expansion\n\t\t\t{\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n\t\t\t\t\t'punctuation': /[\\[\\]]/,\n\t\t\t\t\t'environment': {\n\t\t\t\t\t\tpattern: RegExp('(\\\\{)' + envVars),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'constant'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t/\\$(?:\\w+|[#?*!@$])/\n\t\t],\n\t\t// Escape sequences from echo and printf's manuals, and escaped quotes.\n\t\t'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n\t};\n\n\tPrism.languages.bash = {\n\t\t'shebang': {\n\t\t\tpattern: /^#!\\s*\\/.*/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\"{\\\\$])#.*/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function-name': [\n\t\t\t// a) function foo {\n\t\t\t// b) foo() {\n\t\t\t// c) function foo() {\n\t\t\t// but not \u201Cfoo {\u201D\n\t\t\t{\n\t\t\t\t// a) and c)\n\t\t\t\tpattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'function'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// b)\n\t\t\t\tpattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n\t\t\t\talias: 'function'\n\t\t\t}\n\t\t],\n\t\t// Highlight variable names as variables in for and select beginnings.\n\t\t'for-or-select': {\n\t\t\tpattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight variable names as variables in the left-hand part\n\t\t// of assignments (\u201C=\u201D and \u201C+=\u201D).\n\t\t'assign-left': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n\t\t\tinside: {\n\t\t\t\t'environment': {\n\t\t\t\t\tpattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'constant'\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': [\n\t\t\t// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t// Here-document with quotes around the tag\n\t\t\t// \u2192 No expansion (so no \u201Cinside\u201D).\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'bash': commandAfterHeredoc\n\t\t\t\t}\n\t\t\t},\n\t\t\t// \u201CNormal\u201D string\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n\t\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n\t\t\t\tpattern: /(^|[^$\\\\])'[^']*'/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n\t\t\t\tpattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'entity': insideString.entity\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$?' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': insideString.variable,\n\t\t'function': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n\t\t'builtin': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true,\n\t\t\t// Alias added to make those easier to distinguish from strings.\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'file-descriptor': {\n\t\t\tpattern: /\\B&\\d\\b/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'operator': {\n\t\t\t// Lots of redirections here, but not just that.\n\t\t\tpattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n\t\t\tinside: {\n\t\t\t\t'file-descriptor': {\n\t\t\t\t\tpattern: /^\\d/,\n\t\t\t\t\talias: 'important'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n\t\t'number': {\n\t\t\tpattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n\t\t\tlookbehind: true\n\t\t}\n\t};\n\n\tcommandAfterHeredoc.inside = Prism.languages.bash;\n\n\t/* Patterns in command substitution. */\n\tvar toBeCopied = [\n\t\t'comment',\n\t\t'function-name',\n\t\t'for-or-select',\n\t\t'assign-left',\n\t\t'string',\n\t\t'environment',\n\t\t'function',\n\t\t'keyword',\n\t\t'builtin',\n\t\t'boolean',\n\t\t'file-descriptor',\n\t\t'operator',\n\t\t'punctuation',\n\t\t'number'\n\t];\n\tvar inside = insideString.variable[1].inside;\n\tfor (var i = 0; i < toBeCopied.length; i++) {\n\t\tinside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n\t}\n\n\tPrism.languages.shell = Prism.languages.bash;\n}(Prism));\n", "/**\n * A data structure for representing \u201Csubsequences.\u201D Subsequences are created\n * by removing zero or more elements from a given sequence while preserving the\n * order of remaining elements.\n */\nexport class Subseq {\n\t/**\n\t * The sum of the sizes of segments of the subsequence.\n\t */\n\tsize: number;\n\n\t/**\n\t * The sum of the sizes of the included segments of the subsequence.\n\t */\n\tincludedSize: number;\n\n\t/**\n\t * The sum of the sizes of the excluded segments of the subsequence.\n\t */\n\texcludedSize: number;\n\n\t/**\n\t * An array of numbers, where each number represents the size of a\n\t * continguous segment from the original sequence. The subsequence \u201Ccontains\u201D\n\t * a segment based on its position in this array. Segments alternate between\n\t * excluded and included, with the first number representing the size of an\n\t * excluded segment. In other words, the first segment is excluded, the second\n\t * included, the third excluded and so on.\n\t *\n\t * Because the first segment is always an excluded segment, a subsequence\n\t * array will start with a 0 when the subsequence includes the first element\n\t * of the sequence. No other segments will be of size 0 in the array.\n\t *\n\t * @example\n\t * Given the following string sequence: \"abcdefgh\"\n\t * The following size arrays represent the following subsequences:\n\t *\n\t * [0, 4, 4]                = \"abcd\"\n\t * [4, 4]                   = \"efgh\"\n\t * [0, 2, 2, 2, 2]          = \"abef\"\n\t * [2, 2, 2, 2]             = \"cdgh\"\n\t * [0, 1, 6, 1]             = \"ah\"\n\t * [1, 1, 1, 1, 1, 1, 1, 1] = \"bdfh\"\n\t */\n\tsizes: Array<number>;\n\n\tconstructor(sizes: Array<number>) {\n\t\tconst [size, includedSize, excludedSize] = measure(sizes);\n\t\tthis.size = size;\n\t\tthis.includedSize = includedSize;\n\t\tthis.excludedSize = excludedSize;\n\t\tthis.sizes = sizes;\n\t}\n\n\t/**\n\t * A utility method to debug subseqs.\n\t */\n\tprint(): string {\n\t\tlet result = \"\";\n\t\tfor (let i = 0; i < this.sizes.length; i++) {\n\t\t\tif (i % 2 === 0) {\n\t\t\t\tresult += \"=\".repeat(this.sizes[i]);\n\t\t\t} else {\n\t\t\t\tresult += \"+\".repeat(this.sizes[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tcontains(offset: number): boolean {\n\t\tif (offset < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < this.sizes.length; i++) {\n\t\t\toffset -= this.sizes[i];\n\t\t\tif (offset < 0) {\n\t\t\t\treturn i % 2 === 1;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tclear(): Subseq {\n\t\treturn new Subseq(this.size ? [this.size] : []);\n\t}\n\n\tfill(): Subseq {\n\t\treturn new Subseq(this.size ? [0, this.size] : []);\n\t}\n\n\tcomplement(): Subseq {\n\t\tconst sizes =\n\t\t\tthis.sizes[0] === 0 ? this.sizes.slice(1) : [0, ...this.sizes];\n\t\treturn new Subseq(sizes);\n\t}\n\n\talign(that: Subseq): Array<[number, boolean, boolean]> {\n\t\tif (this.size !== that.size) {\n\t\t\tthrow new Error(\"Size mismatch\");\n\t\t}\n\n\t\tconst result: Array<[number, boolean, boolean]> = [];\n\t\tconst length1 = this.sizes.length;\n\t\tconst length2 = that.sizes.length;\n\t\tfor (\n\t\t\tlet i1 = 0, i2 = 0, size1 = 0, size2 = 0, flag1 = true, flag2 = true;\n\t\t\ti1 < length1 || i2 < length2;\n\n\t\t) {\n\t\t\tif (size1 === 0) {\n\t\t\t\tif (i1 >= length1) {\n\t\t\t\t\tthrow new Error(\"Size mismatch\");\n\t\t\t\t}\n\n\t\t\t\tsize1 = this.sizes[i1++];\n\t\t\t\tflag1 = !flag1;\n\t\t\t}\n\n\t\t\tif (size2 === 0) {\n\t\t\t\tif (i2 >= length2) {\n\t\t\t\t\tthrow new Error(\"Size mismatch\");\n\t\t\t\t}\n\n\t\t\t\tsize2 = that.sizes[i2++];\n\t\t\t\tflag2 = !flag2;\n\t\t\t}\n\n\t\t\tif (size1 < size2) {\n\t\t\t\tif (size1) {\n\t\t\t\t\tresult.push([size1, flag1, flag2]);\n\t\t\t\t}\n\n\t\t\t\tsize2 = size2 - size1;\n\t\t\t\tsize1 = 0;\n\t\t\t} else if (size1 > size2) {\n\t\t\t\tif (size2) {\n\t\t\t\t\tresult.push([size2, flag1, flag2]);\n\t\t\t\t}\n\n\t\t\t\tsize1 = size1 - size2;\n\t\t\t\tsize2 = 0;\n\t\t\t} else {\n\t\t\t\tif (size1) {\n\t\t\t\t\tresult.push([size1, flag1, flag2]);\n\t\t\t\t}\n\n\t\t\t\tsize1 = size2 = 0;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tunion(that: Subseq): Subseq {\n\t\tconst sizes: Array<number> = [];\n\t\tfor (const [size, flag1, flag2] of this.align(that)) {\n\t\t\tpushSegment(sizes, size, flag1 || flag2);\n\t\t}\n\n\t\treturn new Subseq(sizes);\n\t}\n\n\tintersection(that: Subseq): Subseq {\n\t\tconst sizes: Array<number> = [];\n\t\tfor (const [size, flag1, flag2] of this.align(that)) {\n\t\t\tpushSegment(sizes, size, flag1 && flag2);\n\t\t}\n\n\t\treturn new Subseq(sizes);\n\t}\n\n\tdifference(that: Subseq): Subseq {\n\t\tconst sizes: Array<number> = [];\n\t\tfor (const [size, flag1, flag2] of this.align(that)) {\n\t\t\tpushSegment(sizes, size, flag1 && !flag2);\n\t\t}\n\n\t\treturn new Subseq(sizes);\n\t}\n\n\tshrink(that: Subseq): Subseq {\n\t\tif (this.size !== that.size) {\n\t\t\tthrow new Error(\"Size mismatch\");\n\t\t}\n\n\t\tconst sizes: Array<number> = [];\n\t\tfor (const [size, flag1, flag2] of this.align(that)) {\n\t\t\tif (!flag2) {\n\t\t\t\tpushSegment(sizes, size, flag1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Subseq(sizes);\n\t}\n\n\texpand(that: Subseq): Subseq {\n\t\tif (this.size !== that.excludedSize) {\n\t\t\tthrow new Error(\"Size mismatch\");\n\t\t}\n\n\t\tconst sizes: Array<number> = [];\n\t\tconst length1 = this.sizes.length;\n\t\tconst length2 = that.sizes.length;\n\t\tfor (\n\t\t\tlet i1 = 0, i2 = 0, size1 = 0, flag1 = true, flag2 = true;\n\t\t\ti2 < length2;\n\t\t\ti2++\n\t\t) {\n\t\t\tlet size2 = that.sizes[i2];\n\t\t\tflag2 = !flag2;\n\t\t\tif (flag2) {\n\t\t\t\tpushSegment(sizes, size2, false);\n\t\t\t} else {\n\t\t\t\twhile (size2) {\n\t\t\t\t\tif (size1 === 0) {\n\t\t\t\t\t\tif (i1 >= length1) {\n\t\t\t\t\t\t\tthrow new Error(\"Size mismatch\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsize1 = this.sizes[i1++];\n\t\t\t\t\t\tflag1 = !flag1;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst size = Math.min(size1, size2);\n\t\t\t\t\tpushSegment(sizes, size, flag1);\n\t\t\t\t\tsize1 -= size;\n\t\t\t\t\tsize2 -= size;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Subseq(sizes);\n\t}\n\n\tinterleave(that: Subseq): [Subseq, Subseq] {\n\t\tif (this.excludedSize !== that.excludedSize) {\n\t\t\tthrow new Error(\"Size mismatch\");\n\t\t}\n\n\t\tconst sizes1: Array<number> = [];\n\t\tconst sizes2: Array<number> = [];\n\t\tconst length1 = this.sizes.length;\n\t\tconst length2 = that.sizes.length;\n\t\tfor (\n\t\t\tlet i1 = 0, i2 = 0, size1 = 0, size2 = 0, flag1 = true, flag2 = true;\n\t\t\ti1 < length1 || i2 < length2;\n\n\t\t) {\n\t\t\tif (size1 === 0 && i1 < length1) {\n\t\t\t\tsize1 = this.sizes[i1++];\n\t\t\t\tflag1 = !flag1;\n\t\t\t}\n\n\t\t\tif (size2 === 0 && i2 < length2) {\n\t\t\t\tsize2 = that.sizes[i2++];\n\t\t\t\tflag2 = !flag2;\n\t\t\t}\n\n\t\t\tif (flag1 && flag2) {\n\t\t\t\tpushSegment(sizes1, size1, true);\n\t\t\t\tpushSegment(sizes1, size2, false);\n\t\t\t\tpushSegment(sizes2, size1, false);\n\t\t\t\tpushSegment(sizes2, size2, true);\n\t\t\t\tsize1 = size2 = 0;\n\t\t\t} else if (flag1) {\n\t\t\t\tpushSegment(sizes1, size1, true);\n\t\t\t\tpushSegment(sizes2, size1, false);\n\t\t\t\tsize1 = 0;\n\t\t\t} else if (flag2) {\n\t\t\t\tpushSegment(sizes1, size2, false);\n\t\t\t\tpushSegment(sizes2, size2, true);\n\t\t\t\tsize2 = 0;\n\t\t\t} else {\n\t\t\t\tconst size = Math.min(size1, size2);\n\t\t\t\tpushSegment(sizes1, size, false);\n\t\t\t\tpushSegment(sizes2, size, false);\n\t\t\t\tsize1 -= size;\n\t\t\t\tsize2 -= size;\n\t\t\t}\n\t\t}\n\n\t\treturn [new Subseq(sizes1), new Subseq(sizes2)];\n\t}\n\n\tstatic pushSegment = pushSegment;\n}\n\nfunction pushSegment(sizes: Array<number>, size: number, flag: boolean): void {\n\tif (size < 0) {\n\t\tthrow new RangeError(\"Negative size\");\n\t} else if (size === 0) {\n\t\treturn;\n\t} else if (!sizes.length) {\n\t\tif (flag) {\n\t\t\tsizes.push(0, size);\n\t\t} else {\n\t\t\tsizes.push(size);\n\t\t}\n\t} else {\n\t\tconst flag1 = sizes.length % 2 === 0;\n\t\tif (flag === flag1) {\n\t\t\tsizes[sizes.length - 1] += size;\n\t\t} else {\n\t\t\tsizes.push(size);\n\t\t}\n\t}\n}\n\nfunction measure(sizes: Array<number>): [number, number, number] {\n\tlet size = 0,\n\t\tincludedSize = 0,\n\t\texcludedSize = 0;\n\tfor (let i = 0; i < sizes.length; i++) {\n\t\tconst s = sizes[i];\n\t\tsize += s;\n\t\tif (i % 2 === 0) {\n\t\t\texcludedSize += s;\n\t\t} else {\n\t\t\tincludedSize += s;\n\t\t}\n\t}\n\n\treturn [size, includedSize, excludedSize];\n}\n", "import {Subseq} from \"./subseq\";\n\nexport interface RetainOperation {\n\ttype: \"retain\";\n\tstart: number;\n\tend: number;\n}\n\nexport interface DeleteOperation {\n\ttype: \"delete\";\n\tstart: number;\n\tend: number;\n\tvalue: string | undefined;\n}\n\nexport interface InsertOperation {\n\ttype: \"insert\";\n\tstart: number;\n\tvalue: string;\n}\n\nexport type Operation = RetainOperation | DeleteOperation | InsertOperation;\n\n/**\n * A data structure which represents edits to strings.\n */\nexport class Edit {\n\t/** An array of strings and numbers representing operations. */\n\tparts: Array<string | number>;\n\n\t/**\n\t * A string which represents a concatenation of all deletions.\n\t *\n\t * This property must be provided if you want to invert the edit.\n\t */\n\tdeleted: string | undefined;\n\n\tconstructor(parts: Array<string | number>, deleted?: string) {\n\t\tthis.parts = parts;\n\t\tthis.deleted = deleted;\n\t}\n\n\tstatic synthesize(\n\t\tinsertSeq: Subseq,\n\t\tinserted: string,\n\t\tdeleteSeq: Subseq,\n\t\tdeleted?: string | undefined,\n\t): Edit {\n\t\tif (insertSeq.includedSize !== inserted.length) {\n\t\t\tthrow new Error(\"insertSeq and inserted string do not match in length\");\n\t\t} else if (\n\t\t\tdeleted !== undefined &&\n\t\t\tdeleteSeq.includedSize !== deleted.length\n\t\t) {\n\t\t\tthrow new Error(\"deleteSeq and deleted string do not match in length\");\n\t\t} else if (deleteSeq.size !== insertSeq.excludedSize) {\n\t\t\tthrow new Error(\"deleteSeq and insertSeq do not match in length\");\n\t\t}\n\n\t\tconst parts: Array<string | number> = [];\n\t\tlet insertIndex = 0;\n\t\tlet retainIndex = 0;\n\t\tlet needsLength = true;\n\t\tfor (const [length, deleting, inserting] of deleteSeq\n\t\t\t.expand(insertSeq)\n\t\t\t.align(insertSeq)) {\n\t\t\tif (inserting) {\n\t\t\t\tparts.push(inserted.slice(insertIndex, insertIndex + length));\n\t\t\t\tinsertIndex += length;\n\t\t\t} else {\n\t\t\t\tif (!deleting) {\n\t\t\t\t\tparts.push(retainIndex, retainIndex + length);\n\t\t\t\t}\n\n\t\t\t\tretainIndex += length;\n\t\t\t\tneedsLength = deleting;\n\t\t\t}\n\t\t}\n\n\t\tif (needsLength) {\n\t\t\tparts.push(retainIndex);\n\t\t}\n\n\t\treturn new Edit(parts, deleted);\n\t}\n\n\tstatic build(\n\t\ttext: string,\n\t\tinserted: string,\n\t\tfrom: number,\n\t\tto: number = from,\n\t): Edit {\n\t\tconst insertSizes: Array<number> = [];\n\t\tSubseq.pushSegment(insertSizes, from, false);\n\t\tSubseq.pushSegment(insertSizes, inserted.length, true);\n\t\tSubseq.pushSegment(insertSizes, to - from, false);\n\t\tSubseq.pushSegment(insertSizes, text.length - to, false);\n\t\tconst deleteSizes: Array<number> = [];\n\t\tSubseq.pushSegment(deleteSizes, from, false);\n\t\tSubseq.pushSegment(deleteSizes, to - from, true);\n\t\tSubseq.pushSegment(deleteSizes, text.length - to, false);\n\t\tconst deleted = text.slice(from, to);\n\t\treturn Edit.synthesize(\n\t\t\tnew Subseq(insertSizes),\n\t\t\tinserted,\n\t\t\tnew Subseq(deleteSizes),\n\t\t\tdeleted,\n\t\t);\n\t}\n\n\t/**\n\t * Given two strings, this method finds an edit which can be applied to the\n\t * first string to result in the second.\n\t * An optional hint can be provided to disambiguate edits when they are made\n\t * to overlapping characters.\n\t */\n\tstatic diff(text1: string, text2: string, hint?: number): Edit {\n\t\tlet prefix = commonPrefixLength(text1, text2);\n\t\tlet suffix = commonSuffixLength(text1, text2);\n\t\t// prefix and suffix overlap when edits are runs of the same character.\n\t\tif (prefix + suffix > Math.min(text1.length, text2.length)) {\n\t\t\tif (hint !== undefined && hint > -1) {\n\t\t\t\tprefix = Math.min(prefix, hint);\n\t\t\t}\n\n\t\t\t// TODO: We can probably avoid the commonSuffixLength() call here in\n\t\t\t// favor of arithmetic but I\u2019m too dumb to figure it out.\n\t\t\tsuffix = commonSuffixLength(text1.slice(prefix), text2.slice(prefix));\n\t\t}\n\n\t\treturn Edit.build(\n\t\t\ttext1,\n\t\t\ttext2.slice(prefix, text2.length - suffix),\n\t\t\tprefix,\n\t\t\ttext1.length - suffix,\n\t\t);\n\t}\n\n\t/**\n\t * A string which represents a concatenation of all insertions.\n\t */\n\tget inserted(): string {\n\t\tlet text = \"\";\n\t\tfor (let i = 0; i < this.parts.length; i++) {\n\t\t\tif (typeof this.parts[i] === \"string\") {\n\t\t\t\ttext += this.parts[i];\n\t\t\t}\n\t\t}\n\n\t\treturn text;\n\t}\n\n\toperations(): Array<Operation> {\n\t\tconst operations: Array<Operation> = [];\n\t\tlet retaining = false;\n\t\tlet index = 0;\n\t\tlet deleteStart = 0;\n\t\tfor (let i = 0; i < this.parts.length; i++) {\n\t\t\tconst part = this.parts[i];\n\t\t\tif (typeof part === \"number\") {\n\t\t\t\tif (part < index) {\n\t\t\t\t\tthrow new TypeError(\"Malformed edit\");\n\t\t\t\t} else if (part > index) {\n\t\t\t\t\tif (retaining) {\n\t\t\t\t\t\toperations.push({type: \"retain\", start: index, end: part});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value =\n\t\t\t\t\t\t\ttypeof this.deleted === \"undefined\"\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: this.deleted.slice(deleteStart, part);\n\t\t\t\t\t\toperations.push({\n\t\t\t\t\t\t\ttype: \"delete\",\n\t\t\t\t\t\t\tstart: index,\n\t\t\t\t\t\t\tend: part,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdeleteStart = part;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindex = part;\n\t\t\t\tretaining = !retaining;\n\t\t\t} else {\n\t\t\t\toperations.push({type: \"insert\", start: index, value: part});\n\t\t\t}\n\t\t}\n\n\t\treturn operations;\n\t}\n\n\t// TODO: I\u2019m not too happy about the name of this method, insofar as it might\n\t// imply that this object is callable.\n\tapply(text: string): string {\n\t\tlet text1 = \"\";\n\t\tconst operations = this.operations();\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tconst op = operations[i];\n\t\t\tswitch (op.type) {\n\t\t\t\tcase \"retain\":\n\t\t\t\t\ttext1 += text.slice(op.start, op.end);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"insert\":\n\t\t\t\t\ttext1 += op.value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn text1;\n\t}\n\n\tfactor(): [Subseq, string, Subseq, string | undefined] {\n\t\tconst insertSizes: Array<number> = [];\n\t\tconst deleteSizes: Array<number> = [];\n\t\tlet inserted = \"\";\n\t\tconst operations = this.operations();\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tconst op = operations[i];\n\t\t\tswitch (op.type) {\n\t\t\t\tcase \"retain\": {\n\t\t\t\t\tconst length = op.end - op.start;\n\t\t\t\t\tSubseq.pushSegment(insertSizes, length, false);\n\t\t\t\t\tSubseq.pushSegment(deleteSizes, length, false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"delete\": {\n\t\t\t\t\tconst length = op.end - op.start;\n\t\t\t\t\tSubseq.pushSegment(insertSizes, length, false);\n\t\t\t\t\tSubseq.pushSegment(deleteSizes, length, true);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"insert\":\n\t\t\t\t\tSubseq.pushSegment(insertSizes, op.value.length, true);\n\t\t\t\t\tinserted += op.value;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Invalid operation type\");\n\t\t\t}\n\t\t}\n\n\t\tconst insertSeq = new Subseq(insertSizes);\n\t\tconst deleteSeq = new Subseq(deleteSizes);\n\t\treturn [insertSeq, inserted, deleteSeq, this.deleted];\n\t}\n\n\tnormalize(): Edit {\n\t\tif (typeof this.deleted === \"undefined\") {\n\t\t\tthrow new Error(\"Missing deleted property\");\n\t\t}\n\n\t\tconst insertSizes: Array<number> = [];\n\t\tconst deleteSizes: Array<number> = [];\n\t\tlet inserted = \"\";\n\t\tlet deleted = \"\";\n\t\tlet prevInserted: string | undefined;\n\t\tconst operations = this.operations();\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tconst op = operations[i];\n\t\t\tswitch (op.type) {\n\t\t\t\tcase \"insert\": {\n\t\t\t\t\tprevInserted = op.value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase \"retain\": {\n\t\t\t\t\tif (prevInserted !== undefined) {\n\t\t\t\t\t\tSubseq.pushSegment(insertSizes, prevInserted.length, true);\n\t\t\t\t\t\tinserted += prevInserted;\n\t\t\t\t\t\tprevInserted = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tSubseq.pushSegment(insertSizes, op.end - op.start, false);\n\t\t\t\t\tSubseq.pushSegment(deleteSizes, op.end - op.start, false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase \"delete\": {\n\t\t\t\t\tconst length = op.end - op.start;\n\t\t\t\t\tlet prefix = 0;\n\t\t\t\t\tif (prevInserted !== undefined) {\n\t\t\t\t\t\tprefix = commonPrefixLength(prevInserted, op.value!);\n\t\t\t\t\t\tSubseq.pushSegment(insertSizes, prefix, false);\n\t\t\t\t\t\tSubseq.pushSegment(insertSizes, prevInserted.length - prefix, true);\n\t\t\t\t\t\tinserted += prevInserted.slice(prefix);\n\t\t\t\t\t\tprevInserted = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tdeleted += op.value!.slice(prefix);\n\t\t\t\t\tSubseq.pushSegment(deleteSizes, prefix, false);\n\t\t\t\t\tSubseq.pushSegment(deleteSizes, length - prefix, true);\n\t\t\t\t\tSubseq.pushSegment(insertSizes, length - prefix, false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdefault: {\n\t\t\t\t\tthrow new TypeError(\"Invalid operation type\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (prevInserted !== undefined) {\n\t\t\tSubseq.pushSegment(insertSizes, prevInserted.length, true);\n\t\t\tinserted += prevInserted;\n\t\t}\n\n\t\tconst insertSeq = new Subseq(insertSizes);\n\t\tconst deleteSeq = new Subseq(deleteSizes);\n\t\treturn Edit.synthesize(insertSeq, inserted, deleteSeq, deleted);\n\t}\n\n\t/**\n\t * Composes two consecutive edits.\n\t */\n\tcompose(that: Edit): Edit {\n\t\tlet [insertSeq1, inserted1, deleteSeq1, deleted1] = this.factor();\n\t\tlet [insertSeq2, inserted2, deleteSeq2, deleted2] = that.factor();\n\t\t// Expand all subseqs so that they share the same coordinate space.\n\t\tdeleteSeq1 = deleteSeq1.expand(insertSeq1);\n\t\tdeleteSeq2 = deleteSeq2.expand(deleteSeq1);\n\t\t[deleteSeq1, insertSeq2] = deleteSeq1.interleave(insertSeq2);\n\t\tdeleteSeq2 = deleteSeq2.expand(insertSeq2);\n\t\tinsertSeq1 = insertSeq1.expand(insertSeq2);\n\n\t\t// Find insertions which have been deleted and remove them.\n\t\t{\n\t\t\tconst toggleSeq = insertSeq1.intersection(deleteSeq2);\n\t\t\tif (toggleSeq.includedSize) {\n\t\t\t\tdeleteSeq1 = deleteSeq1.shrink(toggleSeq);\n\t\t\t\tinserted1 = erase(insertSeq1, inserted1, toggleSeq);\n\t\t\t\tinsertSeq1 = insertSeq1.shrink(toggleSeq);\n\t\t\t\tdeleteSeq2 = deleteSeq2.shrink(toggleSeq);\n\t\t\t\tinsertSeq2 = insertSeq2.shrink(toggleSeq);\n\t\t\t}\n\t\t}\n\n\t\tconst insertSeq = insertSeq1.union(insertSeq2);\n\t\tconst inserted = consolidate(insertSeq1, inserted1, insertSeq2, inserted2);\n\t\tconst deleteSeq = deleteSeq1.union(deleteSeq2).shrink(insertSeq);\n\t\tconst deleted =\n\t\t\tdeleted1 != null && deleted2 != null\n\t\t\t\t? consolidate(deleteSeq1, deleted1, deleteSeq2, deleted2)\n\t\t\t\t: undefined;\n\t\treturn Edit.synthesize(insertSeq, inserted, deleteSeq, deleted).normalize();\n\t}\n\n\tinvert(): Edit {\n\t\tif (typeof this.deleted === \"undefined\") {\n\t\t\tthrow new Error(\"Missing deleted property\");\n\t\t}\n\n\t\tlet [insertSeq, inserted, deleteSeq, deleted] = this.factor();\n\t\tdeleteSeq = deleteSeq.expand(insertSeq);\n\t\tinsertSeq = insertSeq.shrink(deleteSeq);\n\t\treturn Edit.synthesize(deleteSeq, deleted!, insertSeq, inserted);\n\t}\n}\n\n/**\n * Given two subseqs and strings which are represented by the included segments\n * of the subseqs, this function combines the two strings so that they overlap\n * according to the positions of the included segments of subseqs.\n *\n * The subseqs must have the same size, and the included segments of these\n * subseqs may not overlap.\n */\nfunction consolidate(\n\tsubseq1: Subseq,\n\ttext1: string,\n\tsubseq2: Subseq,\n\ttext2: string,\n): string {\n\tlet i1 = 0;\n\tlet i2 = 0;\n\tlet result = \"\";\n\tfor (const [size, flag1, flag2] of subseq1.align(subseq2)) {\n\t\tif (flag1 && flag2) {\n\t\t\tthrow new Error(\"Overlapping subseqs\");\n\t\t} else if (flag1) {\n\t\t\tresult += text1.slice(i1, i1 + size);\n\t\t\ti1 += size;\n\t\t} else if (flag2) {\n\t\t\tresult += text2.slice(i2, i2 + size);\n\t\t\ti2 += size;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Given two subseqs as well a string which is represented by the included\n * segments of the first subseq, this function returns the result of removing\n * the included segments of the second subseq from the first subseq.\n *\n * The subseqs must have the same size, and the included segments of the second\n * subseq must overlap with the first subseq\u2019s included segments.\n */\nfunction erase(subseq1: Subseq, str: string, subseq2: Subseq): string {\n\tlet i = 0;\n\tlet result = \"\";\n\tfor (const [size, flag1, flag2] of subseq1.align(subseq2)) {\n\t\tif (flag1) {\n\t\t\tif (!flag2) {\n\t\t\t\tresult += str.slice(i, i + size);\n\t\t\t}\n\n\t\t\ti += size;\n\t\t} else if (flag2) {\n\t\t\tthrow new Error(\"Non-overlapping subseqs\");\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * @returns The length of the common prefix between two strings.\n */\nfunction commonPrefixLength(text1: string, text2: string) {\n\tconst length = Math.min(text1.length, text2.length);\n\tfor (let i = 0; i < length; i++) {\n\t\tif (text1[i] !== text2[i]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn length;\n}\n\n/**\n * @returns The length of the common suffix between two strings.\n */\nfunction commonSuffixLength(text1: string, text2: string) {\n\tconst length1 = text1.length;\n\tconst length2 = text2.length;\n\tconst length = Math.min(length1, length2);\n\tfor (let i = 0; i < length; i++) {\n\t\tif (text1[length1 - i - 1] !== text2[length2 - i - 1]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn length;\n}\n", "/// <reference lib=\"dom\" />\nimport {Edit} from \"./edit\";\n\nexport interface ContentEventDetail {\n\tedit: Edit;\n\tsource: string | null;\n\t// TODO: add information about changed ranges\n}\n\nexport interface ContentEventInit extends CustomEventInit<ContentEventDetail> {}\n\nexport class ContentEvent extends CustomEvent<ContentEventDetail> {\n\tconstructor(typeArg: string, eventInit: ContentEventInit) {\n\t\t// Maybe we should do some runtime eventInit validation.\n\t\tsuper(typeArg, {bubbles: true, ...eventInit});\n\t}\n}\n\n/** Whether the node\u2019s info is up to date. */\nconst IS_VALID = 1 << 0;\n/** Whether the node is responsible for the newline before it. */\nconst PREPENDS_NEWLINE = 1 << 1;\n/** Whether the node is responsible for the newline after it. */\nconst APPENDS_NEWLINE = 1 << 2;\n\nclass NodeInfo {\n\t/** A bitmask (see flags above) */\n\tflags: number;\n\t/** The string length of this node\u2019s contents. */\n\tsize: number;\n\t/** The start of this node\u2019s contents relative to the start of the parent. */\n\toffset: number;\n\n\tconstructor(offset: number) {\n\t\tthis.flags = 0;\n\t\tthis.size = 0;\n\t\tthis.offset = offset;\n\t}\n}\n\ntype NodeInfoCache = Map<Node, NodeInfo>;\n\n/********************************************/\n/*** ContentAreaElement symbol properties ***/\n/********************************************/\nconst $slot = Symbol.for(\"revise$slot\");\nconst $cache = Symbol.for(\"revise$cache\");\nconst $value = Symbol.for(\"revise$value\");\nconst $observer = Symbol.for(\"revise$observer\");\nconst $selectionStart = Symbol.for(\"revise$selectionStart\");\nconst $onselectionchange = Symbol.for(\"revise$onselectionchange\");\n\nconst css = `:host {\n\tdisplay: contents;\n\twhite-space: pre-wrap;\n\twhite-space: break-spaces;\n\toverflow-wrap: break-word;\n}`;\n\nexport class ContentAreaElement extends HTMLElement implements SelectionRange {\n\t[$slot]: HTMLSlotElement;\n\t[$cache]: NodeInfoCache;\n\t[$value]: string;\n\t[$observer]: MutationObserver;\n\t// For the most part, we compute selection info on the fly, because of weird\n\t// race conditions. However, we need to retain the previous selectionStart\n\t// when building edits so that we can disambiguate edits to runs of\n\t// characters. See the Edit.diff call below.\n\t[$selectionStart]: number;\n\t[$onselectionchange]: () => void;\n\tconstructor() {\n\t\tsuper();\n\t\t{\n\t\t\t// Creating the shadow DOM.\n\t\t\tconst slot = document.createElement(\"slot\");\n\t\t\tconst shadow = this.attachShadow({mode: \"closed\"});\n\t\t\tconst style = document.createElement(\"style\");\n\t\t\tstyle.textContent = css;\n\t\t\tshadow.appendChild(style);\n\t\t\tslot.contentEditable = this.contentEditable;\n\t\t\tshadow.appendChild(slot);\n\t\t\tthis[$slot] = slot;\n\t\t}\n\n\t\tthis[$cache] = new Map();\n\t\tthis[$value] = \"\";\n\t\tthis[$observer] = new MutationObserver((records) => {\n\t\t\tvalidate(this, null, records);\n\t\t});\n\t\tthis[$selectionStart] = 0;\n\t\tthis[$onselectionchange] = () => {\n\t\t\tvalidate(this);\n\t\t\tthis[$selectionStart] = getSelectionRange(\n\t\t\t\tthis,\n\t\t\t\tthis[$cache],\n\t\t\t).selectionStart;\n\t\t};\n\t}\n\n\t/******************************/\n\t/*** Custom Element methods ***/\n\t/******************************/\n\tstatic get observedAttributes(): Array<string> {\n\t\treturn [\"contenteditable\"];\n\t}\n\n\tconnectedCallback() {\n\t\tthis[$observer].observe(this, {\n\t\t\tsubtree: true,\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tattributes: true,\n\t\t\tattributeFilter: [\n\t\t\t\t\"data-content\",\n\t\t\t\t\"data-contentbefore\",\n\t\t\t\t\"data-contentafter\",\n\t\t\t],\n\t\t});\n\n\t\tthis[$value] = getValue(this, this[$cache], \"\");\n\t\tthis[$selectionStart] = getSelectionRange(\n\t\t\tthis,\n\t\t\tthis[$cache],\n\t\t).selectionStart;\n\t\tdocument.addEventListener(\n\t\t\t\"selectionchange\",\n\t\t\tthis[$onselectionchange],\n\t\t\t// We use capture in an attempt to run before other event listeners.\n\t\t\ttrue,\n\t\t);\n\t}\n\n\tdisconnectedCallback() {\n\t\tthis[$cache].clear();\n\t\tthis[$value] = \"\";\n\t\tthis[$observer].disconnect();\n\t\t// JSDOM-based environments like Jest will make the global document null\n\t\t// before calling the disconnectedCallback for some reason.\n\t\tif (document) {\n\t\t\tdocument.removeEventListener(\n\t\t\t\t\"selectionchange\",\n\t\t\t\tthis[$onselectionchange],\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n\n\tattributeChangedCallback(name: string) {\n\t\tswitch (name) {\n\t\t\tcase \"contenteditable\": {\n\t\t\t\tconst slot = this[$slot];\n\t\t\t\t// We have to set slot.contentEditable to this.contentEditable because\n\t\t\t\t// Chrome has trouble selecting elements across shadow DOM boundaries.\n\t\t\t\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=1175930\n\n\t\t\t\t// Chrome has additional issues with using the host element as a\n\t\t\t\t// contenteditable element but this normalizes some of the behavior.\n\t\t\t\tslot.contentEditable = this.contentEditable;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/***********************/\n\t/*** Content methods ***/\n\t/***********************/\n\tget value(): string {\n\t\tvalidate(this);\n\t\treturn this[$value];\n\t}\n\n\tget selectionStart(): number {\n\t\tvalidate(this);\n\t\treturn getSelectionRange(this, this[$cache]).selectionStart;\n\t}\n\n\tset selectionStart(selectionStart: number) {\n\t\tvalidate(this);\n\n\t\tconst selectionRange = getSelectionRange(this, this[$cache]);\n\t\tsetSelectionRange(\n\t\t\tthis,\n\t\t\tthis[$cache],\n\t\t\tselectionStart,\n\t\t\tselectionRange.selectionEnd,\n\t\t\tselectionRange.selectionDirection,\n\t\t);\n\t}\n\n\tget selectionEnd(): number {\n\t\tvalidate(this);\n\t\treturn getSelectionRange(this, this[$cache]).selectionEnd;\n\t}\n\n\tset selectionEnd(selectionEnd: number) {\n\t\tvalidate(this);\n\t\tconst selectionRange = getSelectionRange(this, this[$cache]);\n\t\tsetSelectionRange(\n\t\t\tthis,\n\t\t\tthis[$cache],\n\t\t\tselectionRange.selectionStart,\n\t\t\tselectionEnd,\n\t\t\tselectionRange.selectionDirection,\n\t\t);\n\t}\n\n\tget selectionDirection(): SelectionDirection {\n\t\tvalidate(this);\n\t\treturn getSelectionRange(this, this[$cache]).selectionDirection;\n\t}\n\n\tset selectionDirection(selectionDirection: SelectionDirection) {\n\t\tvalidate(this);\n\t\tconst selectionRange = getSelectionRange(this, this[$cache]);\n\t\tsetSelectionRange(\n\t\t\tthis,\n\t\t\tthis[$cache],\n\t\t\tselectionRange.selectionStart,\n\t\t\tselectionRange.selectionEnd,\n\t\t\tselectionDirection,\n\t\t);\n\t}\n\n\tgetSelectionRange(): SelectionRange {\n\t\tvalidate(this);\n\t\treturn getSelectionRange(this, this[$cache]);\n\t}\n\n\tsetSelectionRange(\n\t\tselectionStart: number,\n\t\tselectionEnd: number,\n\t\tselectionDirection: SelectionDirection = \"none\",\n\t): void {\n\t\tvalidate(this);\n\t\tsetSelectionRange(\n\t\t\tthis,\n\t\t\tthis[$cache],\n\t\t\tselectionStart,\n\t\t\tselectionEnd,\n\t\t\tselectionDirection,\n\t\t);\n\t}\n\n\tindexAt(node: Node | null, offset: number): number {\n\t\tvalidate(this);\n\t\tconst cache = this[$cache];\n\t\treturn indexAt(this, cache, node, offset);\n\t}\n\n\tnodeOffsetAt(index: number): [Node | null, number] {\n\t\tvalidate(this);\n\t\tconst cache = this[$cache];\n\t\treturn nodeOffsetAt(this, cache, index);\n\t}\n\n\tsource(source: string): boolean {\n\t\treturn validate(this, source, this[$observer].takeRecords());\n\t}\n}\n\n// TODO: custom newlines?\nconst NEWLINE = \"\\n\";\n\n// TODO: Try using getComputedStyle\nconst BLOCKLIKE_ELEMENTS = new Set([\n\t\"ADDRESS\",\n\t\"ARTICLE\",\n\t\"ASIDE\",\n\t\"BLOCKQUOTE\",\n\t\"CAPTION\",\n\t\"DETAILS\",\n\t\"DIALOG\",\n\t\"DD\",\n\t\"DIV\",\n\t\"DL\",\n\t\"DT\",\n\t\"FIELDSET\",\n\t\"FIGCAPTION\",\n\t\"FIGURE\",\n\t\"FOOTER\",\n\t\"FORM\",\n\t\"H1\",\n\t\"H2\",\n\t\"H3\",\n\t\"H4\",\n\t\"H5\",\n\t\"H6\",\n\t\"HEADER\",\n\t\"HGROUP\",\n\t\"HR\",\n\t\"LI\",\n\t\"MAIN\",\n\t\"NAV\",\n\t\"OL\",\n\t\"P\",\n\t\"PRE\",\n\t\"SECTION\",\n\t\"TABLE\",\n\t\"TR\",\n\t\"UL\",\n]);\n\nfunction validate(\n\troot: ContentAreaElement,\n\tsource: string | null = null,\n\trecords?: Array<MutationRecord> | undefined,\n): boolean {\n\tconst cache = root[$cache];\n\t// We use the existence of records to determine whether\n\t// contentchange events should be fired synchronously.\n\tlet delay = false;\n\tif (records === undefined) {\n\t\tdelay = true;\n\t\trecords = root[$observer].takeRecords();\n\t}\n\n\tif (!invalidate(root, cache, records)) {\n\t\treturn false;\n\t}\n\n\tconst oldValue = root[$value];\n\tconst oldSelectionStart = root[$selectionStart];\n\tconst value = (root[$value] = getValue(root, cache, oldValue));\n\tconst selectionStart = getSelectionRange(root, cache).selectionStart;\n\n\tconst hint = Math.min(oldSelectionStart, selectionStart);\n\t// TODO: This call is expensive. If we have getValue return an edit instead\n\t// of a string, we might be able to save a lot in CPU time.\n\tconst edit = Edit.diff(oldValue, value, hint);\n\tconst ev = new ContentEvent(\"contentchange\", {detail: {edit, source}});\n\tif (delay) {\n\t\tPromise.resolve().then(() => root.dispatchEvent(ev));\n\t} else {\n\t\troot.dispatchEvent(ev);\n\t}\n\n\treturn true;\n}\n\nfunction invalidate(\n\troot: ContentAreaElement,\n\tcache: NodeInfoCache,\n\trecords: Array<MutationRecord>,\n): boolean {\n\tif (!cache.get(root)) {\n\t\treturn true;\n\t}\n\n\tlet invalid = false;\n\tfor (let i = 0; i < records.length; i++) {\n\t\tconst record = records[i];\n\t\t// We make sure all added and removed nodes are cleared from the cache just\n\t\t// in case of any MutationObserver weirdness.\n\t\tfor (let j = 0; j < record.addedNodes.length; j++) {\n\t\t\tclear(record.addedNodes[j], cache);\n\t\t}\n\n\t\tfor (let j = 0; j < record.removedNodes.length; j++) {\n\t\t\tclear(record.removedNodes[j], cache);\n\t\t}\n\n\t\t// TODO: invalidate data-content nodes correctly.\n\t\tlet node = record.target;\n\t\tif (node === root) {\n\t\t\tinvalid = true;\n\t\t\tcontinue;\n\t\t} else if (!root.contains(node)) {\n\t\t\tclear(node, cache);\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (; node !== root; node = node.parentNode!) {\n\t\t\tif (!cache.has(node)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst info = cache.get(node);\n\t\t\tif (info) {\n\t\t\t\tinfo.flags &= ~IS_VALID;\n\t\t\t}\n\n\t\t\tinvalid = true;\n\t\t}\n\t}\n\n\tif (invalid) {\n\t\tconst info = cache.get(root)!;\n\t\tinfo.flags &= ~IS_VALID;\n\t}\n\n\treturn invalid;\n}\n\n// This is the single most complicated function in the library!!!\n/**\n * This function both returns the content of the root (always a content-area\n * element, and populates the cache with info about the contents of nodes for\n * future reads.\n * @param root - The root element (usually a content-area element)\n * @param cache - The nodeInfo cache associated with the root\n * @param oldContent - The previous content of the root.\n */\nfunction getValue(\n\troot: Element,\n\tcache: NodeInfoCache,\n\toldContent: string,\n): string {\n\tconst walker = document.createTreeWalker(\n\t\troot,\n\t\tNodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,\n\t);\n\n\t// TODO: It might be faster to construct and return a edit rather than\n\t// concatenating a giant string.\n\tlet content = \"\";\n\t// Because the content variable is a heavily concatenated string and likely\n\t// inferred by most engines as requiring a \u201Crope-like\u201D data structure for\n\t// performance, reading from the end of the string to detect newlines can be\n\t// a bottleneck. Therefore, we store that info in this boolean instead.\n\t/** A boolean which indicates whether content currently ends in a newline. */\n\tlet hasNewline = false;\n\t/** The start of the current node relative to its parent. */\n\tlet offset = 0;\n\t// The current index into oldContent. We use this to copy unchanged text over\n\t// and track deletions.\n\t// If there are nodes which have cached start and length information, we get\n\t// their contents from oldContent string using oldIndex so we don\u2019t have to\n\t// read it from the DOM.\n\tlet oldIndex = 0;\n\t// The current index into oldContent of the current node\u2019s parent. We can get\n\t// the expected start of a node if none of the nodes before it were deleted\n\t// by finding the difference between oldIndex and relativeOldIndex. We can\n\t// compare this difference to the cached start information to detect\n\t// deletions.\n\tlet relativeOldIndex = 0;\n\tlet info: NodeInfo = cache.get(root)!;\n\tif (info === undefined) {\n\t\tinfo = new NodeInfo(offset);\n\t\tcache.set(root, info);\n\t}\n\n\t// A stack to save some variables as we walk up and down the tree.\n\tconst stack: Array<{relativeOldIndex: number; info: NodeInfo}> = [];\n\tfor (let node: Node | null = root, descending = true; node !== null; ) {\n\t\t// A loop to descend into the DOM tree.\n\t\twhile (descending && !(info.flags & IS_VALID)) {\n\t\t\tif (\n\t\t\t\tnode.nodeType === Node.TEXT_NODE ||\n\t\t\t\t// We treat elements with data-content attributes as opaque.\n\t\t\t\t(node as Element).hasAttribute(\"data-content\")\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// If the current node is a block-like element, and the previous\n\t\t\t// node/elements did not end with a newline, then the current element\n\t\t\t// would introduce a linebreak before its contents.\n\t\t\t// We check that the offset is non-zero so that the first child of a\n\t\t\t// parent does not introduce a newline before it.\n\t\t\tconst prependsNewline =\n\t\t\t\t!!offset && !hasNewline && isBlocklikeElement(node);\n\t\t\tif (prependsNewline) {\n\t\t\t\tcontent += NEWLINE;\n\t\t\t\thasNewline = true;\n\t\t\t\toffset += NEWLINE.length;\n\t\t\t\tinfo.offset += NEWLINE.length;\n\t\t\t\tinfo.flags |= PREPENDS_NEWLINE;\n\t\t\t} else {\n\t\t\t\tinfo.flags &= ~PREPENDS_NEWLINE;\n\t\t\t}\n\n\t\t\tif ((node = walker.firstChild())) {\n\t\t\t\tdescending = true;\n\t\t\t} else {\n\t\t\t\tnode = walker.currentNode;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tstack.push({relativeOldIndex, info});\n\t\t\trelativeOldIndex = oldIndex;\n\t\t\toffset = 0;\n\t\t\t// getNodeInfo\n\t\t\tinfo = cache.get(node)!;\n\t\t\tif (info === undefined) {\n\t\t\t\tinfo = new NodeInfo(offset);\n\t\t\t\tcache.set(node, info);\n\t\t\t} else {\n\t\t\t\tif (info.offset > 0) {\n\t\t\t\t\t// deletion detected\n\t\t\t\t\toldIndex += info.offset;\n\t\t\t\t}\n\n\t\t\t\tinfo.offset = offset;\n\t\t\t}\n\t\t}\n\n\t\tif (info.flags & IS_VALID) {\n\t\t\t// The node has been seen before.\n\t\t\t// Reading from oldContent because length hasn\u2019t been invalidated.\n\t\t\tconst length = info.size;\n\t\t\tif (oldIndex + info.size > oldContent.length) {\n\t\t\t\t// This should never happen\n\t\t\t\tthrow new Error(\"String length mismatch\");\n\t\t\t}\n\n\t\t\tconst prependsNewline =\n\t\t\t\t!!offset && !hasNewline && isBlocklikeElement(node);\n\t\t\tif (prependsNewline) {\n\t\t\t\tcontent += NEWLINE;\n\t\t\t\thasNewline = true;\n\t\t\t\toffset += NEWLINE.length;\n\t\t\t\tinfo.offset += NEWLINE.length;\n\t\t\t\tinfo.flags |= PREPENDS_NEWLINE;\n\t\t\t} else {\n\t\t\t\tinfo.flags &= ~PREPENDS_NEWLINE;\n\t\t\t}\n\n\t\t\tconst oldContent1 = oldContent.slice(oldIndex, oldIndex + length);\n\t\t\tcontent += oldContent1;\n\t\t\toffset += length;\n\t\t\toldIndex += length;\n\t\t\tif (oldContent1.length) {\n\t\t\t\thasNewline = oldContent1.endsWith(NEWLINE);\n\t\t\t}\n\t\t} else {\n\t\t\t// The node hasn\u2019t been seen before.\n\t\t\tlet appendsNewline = false;\n\t\t\tif (node.nodeType === Node.TEXT_NODE) {\n\t\t\t\tconst content1 = (node as Text).data;\n\t\t\t\tcontent += content1;\n\t\t\t\toffset += content1.length;\n\t\t\t\tif (content1.length) {\n\t\t\t\t\thasNewline = content1.endsWith(NEWLINE);\n\t\t\t\t}\n\t\t\t} else if ((node as Element).hasAttribute(\"data-content\")) {\n\t\t\t\tconst content1 = (node as Element).getAttribute(\"data-content\") || \"\";\n\t\t\t\tcontent += content1;\n\t\t\t\toffset += content1.length;\n\t\t\t\tif (content1.length) {\n\t\t\t\t\thasNewline = content1.endsWith(NEWLINE);\n\t\t\t\t}\n\t\t\t} else if (!hasNewline && isBlocklikeElement(node)) {\n\t\t\t\tcontent += NEWLINE;\n\t\t\t\toffset += NEWLINE.length;\n\t\t\t\thasNewline = true;\n\t\t\t\tappendsNewline = true;\n\t\t\t} else if (node.nodeName === \"BR\") {\n\t\t\t\tcontent += NEWLINE;\n\t\t\t\toffset += NEWLINE.length;\n\t\t\t\thasNewline = true;\n\t\t\t}\n\n\t\t\tinfo.size = offset - info.offset;\n\t\t\tinfo.flags |= IS_VALID;\n\t\t\tinfo.flags = appendsNewline\n\t\t\t\t? info.flags | APPENDS_NEWLINE\n\t\t\t\t: info.flags & ~APPENDS_NEWLINE;\n\t\t}\n\n\t\tif ((node = walker.nextSibling())) {\n\t\t\tdescending = true;\n\t\t\t// getNodeInfo\n\t\t\tinfo = cache.get(node)!;\n\t\t\tif (info === undefined) {\n\t\t\t\tinfo = new NodeInfo(offset);\n\t\t\t\tcache.set(node, info);\n\t\t\t} else {\n\t\t\t\tconst oldOffset = oldIndex - relativeOldIndex;\n\t\t\t\tif (info.offset > oldOffset) {\n\t\t\t\t\t// deletion detected\n\t\t\t\t\toldIndex += info.offset - oldOffset;\n\t\t\t\t} else if (info.offset < oldOffset) {\n\t\t\t\t\t// This should never happen\n\t\t\t\t\tthrow new Error(\"Offset is before old offset\");\n\t\t\t\t}\n\n\t\t\t\tinfo.offset = offset;\n\t\t\t}\n\t\t} else {\n\t\t\tdescending = false;\n\t\t\tif (walker.currentNode !== root) {\n\t\t\t\tif (!stack.length) {\n\t\t\t\t\t// This should never happen\n\t\t\t\t\tthrow new Error(\"Stack is empty\");\n\t\t\t\t}\n\n\t\t\t\t({relativeOldIndex, info} = stack.pop()!);\n\t\t\t\toffset = info.offset + offset;\n\t\t\t\tnode = walker.parentNode();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn content;\n}\n\nfunction isBlocklikeElement(node: Node): node is Element {\n\treturn (\n\t\tnode.nodeType === Node.ELEMENT_NODE && BLOCKLIKE_ELEMENTS.has(node.nodeName)\n\t);\n}\n\n/**\n * For a given parent node and node info cache, clear info for the node and all\n * child nodes from the cache.\n */\nfunction clear(parent: Node, cache: NodeInfoCache): void {\n\tconst walker = document.createTreeWalker(\n\t\tparent,\n\t\tNodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,\n\t);\n\n\tfor (\n\t\tlet node: Node | null = parent;\n\t\tnode !== null;\n\t\tnode = walker.nextNode()\n\t) {\n\t\tcache.delete(node);\n\t}\n}\n\n/***********************/\n/*** Selection Logic ***/\n/***********************/\nexport type SelectionDirection = \"forward\" | \"backward\" | \"none\";\n\n/**\n * Properties which mirror the API provided by HTMLInputElement and\n * HTMLTextAreaElement.\n */\nexport interface SelectionRange {\n\tselectionStart: number;\n\tselectionEnd: number;\n\tselectionDirection: SelectionDirection;\n}\n\n/**\n * Finds the string index of a node and offset pair provided by a browser API\n * like window.getSelection() for a given root and cache.\n */\nfunction indexAt(\n\troot: Element,\n\tcache: NodeInfoCache,\n\tnode: Node | null,\n\toffset: number,\n): number {\n\tif (node == null || !root.contains(node)) {\n\t\treturn -1;\n\t}\n\n\tif (!cache.has(node)) {\n\t\t// If the node is not found in the cache but is contained in the root,\n\t\t// then it is probably the child of an element with a data-content\n\t\t// attribute.\n\t\t// TODO: Maybe a non-zero offset should put the index at the end of\n\t\t// the data-content node.\n\t\toffset = 0;\n\t\twhile (!cache.has(node)) {\n\t\t\tnode = node.parentNode!;\n\t\t}\n\t}\n\n\tlet index: number;\n\tif (node.nodeType === Node.TEXT_NODE) {\n\t\tconst info = cache.get(node)!;\n\t\tindex = offset + info.offset;\n\t\tnode = node.parentNode!;\n\t} else {\n\t\tif (offset <= 0) {\n\t\t\tindex = 0;\n\t\t} else if (offset >= node.childNodes.length) {\n\t\t\tconst info = cache.get(node)!;\n\t\t\tindex = info.size;\n\t\t\tif (info.flags & APPENDS_NEWLINE) {\n\t\t\t\tindex -= NEWLINE.length;\n\t\t\t}\n\t\t} else {\n\t\t\tlet child: Node | null = node.childNodes[offset];\n\t\t\twhile (child !== null && !cache.has(child)) {\n\t\t\t\tchild = child.previousSibling;\n\t\t\t}\n\n\t\t\tif (child === null) {\n\t\t\t\tindex = 0;\n\t\t\t} else {\n\t\t\t\tnode = child;\n\t\t\t\tconst info = cache.get(node)!;\n\t\t\t\t// If the offset references an element which prepends a newline\n\t\t\t\t// (\"hello<div>world</div>\"), we have to start from -1 because the\n\t\t\t\t// element\u2019s info.offset will not account for the newline.\n\t\t\t\tindex = info.flags & PREPENDS_NEWLINE ? -1 : 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (; node !== root; node = node.parentNode!) {\n\t\tconst info = cache.get(node)!;\n\t\tindex += info.offset;\n\t}\n\n\treturn index;\n}\n\n/**\n * Finds the node and offset pair to use with browser APIs like\n * selection.collapse() from a given string index.\n */\nfunction nodeOffsetAt(\n\troot: Element,\n\tcache: NodeInfoCache,\n\tindex: number,\n): [Node | null, number] {\n\tconst [node, offset] = findNodeOffset(root, cache, index);\n\tif (node && node.nodeName === \"BR\") {\n\t\t// Different browsers can have trouble when calling `selection.collapse()`\n\t\t// with a BR element, so we try to avoid returning them from this function.\n\t\treturn nodeOffsetFromChild(node);\n\t}\n\n\treturn [node, offset];\n}\n\nfunction findNodeOffset(\n\troot: Element,\n\tcache: NodeInfoCache,\n\tindex: number,\n): [Node | null, number] {\n\tif (index < 0) {\n\t\treturn [null, 0];\n\t}\n\n\tconst walker = document.createTreeWalker(\n\t\troot,\n\t\tNodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,\n\t);\n\n\tfor (let node: Node | null = root; node !== null; ) {\n\t\tconst info = cache.get(node);\n\t\tif (info == null) {\n\t\t\treturn nodeOffsetFromChild(node, index > 0);\n\t\t} else if (info.flags & PREPENDS_NEWLINE) {\n\t\t\tindex -= NEWLINE.length;\n\t\t}\n\n\t\tif (index < 0) {\n\t\t\t// This branch should only run when an element prepends an newline\n\t\t\tconst previousSibling = walker.previousSibling();\n\t\t\tif (!previousSibling) {\n\t\t\t\t// This should never happen\n\t\t\t\tthrow new Error(\"Previous sibling missing\");\n\t\t\t}\n\n\t\t\treturn [previousSibling, getNodeLength(previousSibling)];\n\t\t} else if (index === info.size && node.nodeType === Node.TEXT_NODE) {\n\t\t\treturn [node, (node as Text).data.length];\n\t\t} else if (index >= info.size) {\n\t\t\tindex -= info.size;\n\t\t\tconst nextSibling = walker.nextSibling();\n\t\t\tif (nextSibling === null) {\n\t\t\t\t// This branch seems necessary mainly when working with data-content\n\t\t\t\t// nodes.\n\t\t\t\tif (node === root) {\n\t\t\t\t\treturn [node, getNodeLength(node)];\n\t\t\t\t}\n\n\t\t\t\treturn nodeOffsetFromChild(walker.currentNode, true);\n\t\t\t}\n\n\t\t\tnode = nextSibling;\n\t\t} else {\n\t\t\tif (\n\t\t\t\tnode.nodeType === Node.ELEMENT_NODE &&\n\t\t\t\t(node as Element).hasAttribute(\"data-content\")\n\t\t\t) {\n\t\t\t\treturn nodeOffsetFromChild(node, index > 0);\n\t\t\t}\n\n\t\t\tconst firstChild = walker.firstChild();\n\t\t\tif (firstChild === null) {\n\t\t\t\tconst offset =\n\t\t\t\t\tnode.nodeType === Node.TEXT_NODE ? index : index > 0 ? 1 : 0;\n\t\t\t\treturn [node, offset];\n\t\t\t} else {\n\t\t\t\tnode = firstChild;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst node = walker.currentNode;\n\treturn [node, getNodeLength(node)];\n}\n\nfunction getNodeLength(node: Node) {\n\tif (node.nodeType === Node.TEXT_NODE) {\n\t\treturn (node as Text).data.length;\n\t}\n\n\treturn node.childNodes.length;\n}\n\nfunction nodeOffsetFromChild(\n\tnode: Node,\n\tafter: boolean = false,\n): [Node | null, number] {\n\tconst parentNode = node.parentNode;\n\tif (parentNode === null) {\n\t\treturn [null, 0];\n\t}\n\n\tlet offset = Array.from(parentNode.childNodes).indexOf(node as ChildNode);\n\tif (after) {\n\t\toffset++;\n\t}\n\n\treturn [parentNode, offset];\n}\n\nfunction getSelectionRange(\n\troot: Element,\n\tcache: NodeInfoCache,\n): SelectionRange {\n\tconst selection = window.getSelection();\n\tif (!selection) {\n\t\treturn {selectionStart: 0, selectionEnd: 0, selectionDirection: \"none\"};\n\t}\n\n\tconst {\n\t\tfocusNode,\n\t\tfocusOffset,\n\t\tanchorNode,\n\t\tanchorOffset,\n\t\tisCollapsed,\n\t} = selection;\n\tconst focus = Math.max(0, indexAt(root, cache, focusNode, focusOffset));\n\tconst anchor = isCollapsed\n\t\t? focus\n\t\t: Math.max(0, indexAt(root, cache, anchorNode, anchorOffset));\n\treturn {\n\t\tselectionStart: Math.min(focus, anchor),\n\t\tselectionEnd: Math.max(focus, anchor),\n\t\tselectionDirection:\n\t\t\tfocus < anchor ? \"backward\" : focus > anchor ? \"forward\" : \"none\",\n\t};\n}\n\nfunction setSelectionRange(\n\troot: Element,\n\tcache: NodeInfoCache,\n\tselectionStart: number,\n\tselectionEnd: number,\n\tselectionDirection: SelectionDirection,\n): void {\n\tconst selection = window.getSelection();\n\tif (!selection) {\n\t\treturn;\n\t}\n\n\tselectionStart = Math.max(0, selectionStart || 0);\n\tselectionEnd = Math.max(0, selectionEnd || 0);\n\tif (selectionEnd < selectionStart) {\n\t\tselectionStart = selectionEnd;\n\t}\n\n\tconst [focusIndex, anchorIndex] =\n\t\tselectionDirection === \"backward\"\n\t\t\t? [selectionStart, selectionEnd]\n\t\t\t: [selectionEnd, selectionStart];\n\n\tif (focusIndex === anchorIndex) {\n\t\tconst [node, offset] = nodeOffsetAt(root, cache, focusIndex);\n\t\tselection.collapse(node, offset);\n\t} else {\n\t\tconst [anchorNode, anchorOffset] = nodeOffsetAt(root, cache, anchorIndex);\n\t\tconst [focusNode, focusOffset] = nodeOffsetAt(root, cache, focusIndex);\n\t\tif (anchorNode === null && focusNode === null) {\n\t\t\tselection.collapse(null);\n\t\t} else if (anchorNode === null) {\n\t\t\tselection.collapse(focusNode, focusOffset);\n\t\t} else if (focusNode === null) {\n\t\t\tselection.collapse(anchorNode, anchorOffset);\n\t\t} else {\n\t\t\t// This is not a method in IE. We don\u2019t care.\n\t\t\tselection.setBaseAndExtent(\n\t\t\t\tanchorNode,\n\t\t\t\tanchorOffset,\n\t\t\t\tfocusNode,\n\t\t\t\tfocusOffset,\n\t\t\t);\n\t\t}\n\t}\n}\n", "import type {Edit} from \"./edit\";\n\nexport class Keyer {\n\tnextKey: number;\n\tkeys: Array<number>;\n\n\tconstructor() {\n\t\tthis.nextKey = 0;\n\t\tthis.keys = [];\n\t}\n\n\tkeyAt(i: number): number {\n\t\t// TODO: maybe we can use `in`\n\t\tif (typeof this.keys[i] === \"undefined\") {\n\t\t\tthis.keys[i] = this.nextKey++;\n\t\t}\n\n\t\treturn this.keys[i];\n\t}\n\n\ttransform(edit: Edit): void {\n\t\tconst operations = edit.operations();\n\t\tfor (let i = operations.length - 1; i >= 0; i--) {\n\t\t\tconst op = operations[i];\n\t\t\t// TODO: Is this correct?\n\t\t\tswitch (op.type) {\n\t\t\t\tcase \"delete\": {\n\t\t\t\t\tthis.keys.splice(op.start + 1, op.end - op.start);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"insert\": {\n\t\t\t\t\t// We use slice and concat rather than splice(op.start, 0, ...new\n\t\t\t\t\t// Array(op.value.length) because the latter seems to fill in added\n\t\t\t\t\t// indices with undefined rather than leaving the array sparse.\n\t\t\t\t\tthis.keys.length = Math.max(this.keys.length, op.start + 1);\n\t\t\t\t\tthis.keys = this.keys\n\t\t\t\t\t\t.slice(0, op.start + 1)\n\t\t\t\t\t\t.concat(new Array(op.value.length))\n\t\t\t\t\t\t.concat(this.keys.slice(op.start + 1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "import {Edit} from \"./edit\";\n\n// TODO: Figure out if these make sense as Edit methods.\nfunction isNoop(edit: Edit): boolean {\n\tconst operations = edit.operations();\n\treturn operations.length === 1 && operations[0].type === \"retain\";\n}\n\nfunction isComplex(edit: Edit): boolean {\n\tlet count = 0;\n\tfor (const op of edit.operations()) {\n\t\tif (op.type !== \"retain\") {\n\t\t\tcount++;\n\t\t\tif (count > 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport class EditHistory {\n\tcurrent: Edit | undefined;\n\tundoStack: Array<Edit>;\n\tredoStack: Array<Edit>;\n\n\tconstructor() {\n\t\tthis.current = undefined;\n\t\tthis.undoStack = [];\n\t\tthis.redoStack = [];\n\t}\n\n\tcheckpoint(): void {\n\t\tif (this.current) {\n\t\t\tthis.undoStack.push(this.current);\n\t\t\tthis.current = undefined;\n\t\t}\n\t}\n\n\tappend(edit: Edit): void {\n\t\tif (isNoop(edit)) {\n\t\t\treturn;\n\t\t} else if (this.redoStack.length) {\n\t\t\tthis.redoStack.length = 0;\n\t\t}\n\n\t\tif (this.current) {\n\t\t\tconst oldEdit = this.current;\n\t\t\tif (!isComplex(oldEdit) && !isComplex(edit)) {\n\t\t\t\tthis.current = oldEdit.compose(edit);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.checkpoint();\n\t\t\t}\n\t\t}\n\n\t\tthis.current = edit;\n\t}\n\n\tcanUndo(): boolean {\n\t\treturn !!(this.current || this.undoStack.length);\n\t}\n\n\tundo(): Edit | undefined {\n\t\tthis.checkpoint();\n\t\tconst edit = this.undoStack.pop();\n\t\tif (edit) {\n\t\t\tthis.redoStack.push(edit);\n\t\t\treturn edit.invert();\n\t\t}\n\t}\n\n\tcanRedo(): boolean {\n\t\treturn !!this.redoStack.length;\n\t}\n\n\tredo(): Edit | undefined {\n\t\tthis.checkpoint();\n\t\tconst edit = this.redoStack.pop();\n\t\tif (edit) {\n\t\t\tthis.undoStack.push(edit);\n\t\t\treturn edit;\n\t\t}\n\t}\n}\n", "/** @jsx createElement */\nimport {createElement} from \"@b9g/crank/crank.js\";\nimport type {Context, Element} from \"@b9g/crank/crank.js\";\nimport {Edit} from \"@b9g/revise/edit.js\";\nimport {Keyer} from \"@b9g/revise/keyer.js\";\nimport {EditHistory} from \"@b9g/revise/history.js\";\nimport type {\n\tContentAreaElement,\n\tSelectionRange,\n} from \"@b9g/revise/contentarea.js\";\n\nimport Prism from \"prismjs\";\nimport type {Token} from \"prismjs\";\nimport \"prismjs/components/prism-typescript.js\";\nimport {ContentArea} from \"./contentarea\";\nimport {transform} from \"sucrase\";\n\nfunction* Preview(\n\tthis: Context,\n\t{value}: {value: string},\n): Generator<any, any, any> {\n\tlet iframe: HTMLIFrameElement;\n\tfor ({value} of this) {\n\t\tthis.flush(() => {\n\t\t\tconst document1 = iframe.contentDocument;\n\t\t\tif (document1 == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst parsed = transform(value, {\n\t\t\t\t\ttransforms: [\"jsx\", \"typescript\"],\n\t\t\t\t\tjsxPragma: \"createElement\",\n\t\t\t\t\tjsxFragmentPragma: \"''\",\n\t\t\t\t});\n\n\t\t\t\tdocument1.write(`\n\t\t\t\t\t<style>\n\t\t\t\t\t\tbody {\n\t\t\t\t\t\t\tcolor: #f5f9ff;\n\t\t\t\t\t\t}\n\t\t\t\t\t</style>\n\t\t\t\t`);\n\t\t\t\tdocument1.write(`<script type=\"module\">${parsed.code}</script>`);\n\t\t\t\tdocument1.close();\n\t\t\t} catch (err) {\n\t\t\t\t// TODO: Display errors in preview.\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\n\t\tyield (\n\t\t\t<iframe\n\t\t\t\tclass=\"preview\"\n\t\t\t\tc-ref={(iframe1: any) => (iframe = iframe1)}\n\t\t\t\tsrc=\"about:blank\"\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport function* CodeBlock(\n\tthis: Context,\n\t{value, lang}: {value: string; lang: string},\n) {\n\tlet selectionRange: SelectionRange | undefined;\n\tlet area: ContentAreaElement;\n\tlet renderSource: string | undefined;\n\tconst editHistory = new EditHistory();\n\tconst keyer = new Keyer();\n\tlet rest: string;\n\t{\n\t\tconst i = lang.indexOf(\" \");\n\t\tif (i === -1) {\n\t\t\trest = \"\";\n\t\t} else {\n\t\t\t[lang, rest] = [lang.slice(0, i), lang.slice(i + 1)];\n\t\t}\n\t}\n\n\tconst isLive = rest === \"live\";\n\tthis.addEventListener(\"beforeinput\", (ev: any) => {\n\t\tif (!isLive) {\n\t\t\tev.preventDefault();\n\t\t}\n\t});\n\n\tthis.addEventListener(\"contentchange\", (ev: any) => {\n\t\tif (!isLive) {\n\t\t\tthis.refresh();\n\t\t\treturn;\n\t\t}\n\n\t\tconst {edit, source} = ev.detail;\n\t\tkeyer.transform(edit);\n\t\tif (source === \"render\") {\n\t\t\treturn;\n\t\t} else if (source !== \"history\") {\n\t\t\teditHistory.append(edit);\n\t\t}\n\n\t\tvalue = ev.target.value;\n\t\tthis.refresh();\n\t});\n\n\tthis.addEventListener(\"keydown\", (ev) => {\n\t\tif (ev.key === \"Enter\") {\n\t\t\t// Potato quality tab-matching.\n\t\t\tlet {value: value1, selectionStart: selectionStart1, selectionEnd} = area;\n\t\t\tif (selectionStart1 !== selectionEnd) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// A reasonable length to look for tabs and braces.\n\t\t\tconst prev = value.slice(0, selectionStart1);\n\t\t\tconst tabMatch = prev.match(/[\\r\\n]?([^\\S\\r\\n]*).*$/);\n\t\t\t// [^\\S\\r\\n] = non-newline whitespace\n\t\t\tconst prevMatch = prev.match(/({|\\(|\\[)([^\\S\\r\\n]*)$/);\n\t\t\tif (prevMatch) {\n\t\t\t\t// increase tab\n\t\t\t\tev.preventDefault();\n\t\t\t\tconst next = value1.slice(selectionStart1);\n\t\t\t\tconst startBracket = prevMatch[1];\n\t\t\t\tconst startWhitespace = prevMatch[2];\n\t\t\t\tlet insertBefore = \"\\n\";\n\t\t\t\tif (tabMatch) {\n\t\t\t\t\tinsertBefore += tabMatch[1] + \"  \";\n\t\t\t\t}\n\n\t\t\t\tlet edit = Edit.build(\n\t\t\t\t\tvalue1,\n\t\t\t\t\tinsertBefore,\n\t\t\t\t\tselectionStart1,\n\t\t\t\t\tselectionStart1 + startWhitespace.length,\n\t\t\t\t);\n\n\t\t\t\tselectionStart1 -= startWhitespace.length;\n\t\t\t\tselectionStart1 += insertBefore.length;\n\n\t\t\t\tconst closingMap: Record<string, string> = {\n\t\t\t\t\t\"{\": \"}\",\n\t\t\t\t\t\"(\": \")\",\n\t\t\t\t\t\"[\": \"]\",\n\t\t\t\t};\n\t\t\t\tlet closing = closingMap[startBracket];\n\t\t\t\tif (closing !== \"}\") {\n\t\t\t\t\tclosing = \"\\\\\" + closing;\n\t\t\t\t}\n\t\t\t\tconst nextMatch = next.match(\n\t\t\t\t\tnew RegExp(String.raw`^([^\\S\\r\\n]*)${closing}`),\n\t\t\t\t);\n\n\t\t\t\tif (nextMatch) {\n\t\t\t\t\tconst value2 = edit.apply(value1);\n\t\t\t\t\tconst endWhitespace = nextMatch[1];\n\t\t\t\t\tconst insertAfter = tabMatch ? \"\\n\" + tabMatch[1] : \"\\n\";\n\t\t\t\t\tconst edit1 = Edit.build(\n\t\t\t\t\t\tvalue2,\n\t\t\t\t\t\tinsertAfter,\n\t\t\t\t\t\tselectionStart1,\n\t\t\t\t\t\tselectionStart1 + endWhitespace.length,\n\t\t\t\t\t);\n\n\t\t\t\t\tedit = edit.compose(edit1);\n\t\t\t\t}\n\n\t\t\t\tvalue = edit.apply(value1);\n\t\t\t\tselectionRange = {\n\t\t\t\t\tselectionStart: selectionStart1,\n\t\t\t\t\tselectionEnd: selectionStart1,\n\t\t\t\t\tselectionDirection: \"none\",\n\t\t\t\t};\n\t\t\t\tthis.refresh();\n\t\t\t} else if (tabMatch && tabMatch[1].length) {\n\t\t\t\t// match the tabbing of the previous line\n\t\t\t\tev.preventDefault();\n\t\t\t\tconst insertBefore = \"\\n\" + tabMatch[1];\n\t\t\t\tconst edit = Edit.build(value1, insertBefore, selectionStart1);\n\t\t\t\tvalue = edit.apply(value1);\n\t\t\t\tselectionRange = {\n\t\t\t\t\tselectionStart: selectionStart1 + insertBefore.length,\n\t\t\t\t\tselectionEnd: selectionStart1 + insertBefore.length,\n\t\t\t\t\tselectionDirection: \"none\",\n\t\t\t\t};\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.addEventListener(\"beforeinput\", (ev: any) => {\n\t\tswitch (ev.inputType) {\n\t\t\tcase \"historyUndo\": {\n\t\t\t\tev.preventDefault();\n\t\t\t\tconst edit = editHistory.undo();\n\t\t\t\tif (edit) {\n\t\t\t\t\tselectionRange = selectionRangeFromEdit(edit);\n\t\t\t\t\tvalue = edit.apply(value);\n\t\t\t\t\trenderSource = \"history\";\n\t\t\t\t\tthis.refresh();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"historyRedo\": {\n\t\t\t\tev.preventDefault();\n\t\t\t\tconst edit = editHistory.redo();\n\t\t\t\tif (edit) {\n\t\t\t\t\tvalue = edit.apply(value);\n\t\t\t\t\tselectionRange = selectionRangeFromEdit(edit);\n\t\t\t\t\trenderSource = \"history\";\n\t\t\t\t\tthis.refresh();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tcheckpointEditHistoryBySelection(this, editHistory);\n\tfor ({lang} of this) {\n\t\tthis.schedule(() => {\n\t\t\tselectionRange = undefined;\n\t\t\trenderSource = undefined;\n\t\t});\n\n\t\tvalue = value.match(/(?:\\r|\\n|\\r\\n)$/) ? value : value + \"\\n\";\n\t\tlet rest: string;\n\t\t{\n\t\t\tconst i = lang.indexOf(\" \");\n\t\t\tif (i === -1) {\n\t\t\t\trest = \"\";\n\t\t\t} else {\n\t\t\t\t[lang, rest] = [lang.slice(0, i), lang.slice(i + 1)];\n\t\t\t}\n\t\t}\n\n\t\tconst grammar = Prism.languages[lang];\n\t\tlet lines: Array<Array<string | Token>>;\n\t\tif (grammar == null) {\n\t\t\tlines = [];\n\t\t} else {\n\t\t\tlines = splitLines(Prism.tokenize(value || \"\", grammar));\n\t\t}\n\n\t\tconst isClient = typeof document !== \"undefined\";\n\t\tconst isLive = rest === \"live\";\n\t\tlet cursor = 0;\n\t\tlet className = \"editable\";\n\t\tif (isLive) {\n\t\t\tclassName += \" editable-live\";\n\t\t}\n\n\t\tyield (\n\t\t\t<div class=\"playground\">\n\t\t\t\t<ContentArea\n\t\t\t\t\tc-ref={(area1: any) => (area = area1)}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\trenderSource={renderSource}\n\t\t\t\t\tselectionRange={selectionRange}\n\t\t\t\t>\n\t\t\t\t\t<pre\n\t\t\t\t\t\tclass={className}\n\t\t\t\t\t\tautocomplete=\"off\"\n\t\t\t\t\t\tautocorrect=\"off\"\n\t\t\t\t\t\tautocapitalize=\"off\"\n\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\tcontenteditable={isClient && isLive}\n\t\t\t\t\t>\n\t\t\t\t\t\t{lines.map((line) => {\n\t\t\t\t\t\t\tconst key = keyer.keyAt(cursor);\n\t\t\t\t\t\t\tconst length = line.reduce((l, t) => l + t.length, 0);\n\t\t\t\t\t\t\tcursor += length + 1;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div c-key={key}>\n\t\t\t\t\t\t\t\t\t<code>{printTokens(line)}</code>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</pre>\n\t\t\t\t</ContentArea>\n\t\t\t\t{typeof document !== \"undefined\" && rest === \"live\" && (\n\t\t\t\t\t<Preview value={value} />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n/*** Prism Logic ***/\n// @ts-ignore\nPrism.manual = true;\nfunction splitLinesRec(\n\ttokens: Array<Token | string>,\n): Array<Array<Token | string>> {\n\tlet currentLine: Array<Token | string> = [];\n\tconst lines: Array<Array<Token | string>> = [currentLine];\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tconst token = tokens[i];\n\t\tif (typeof token === \"string\") {\n\t\t\tconst split = token.split(/\\r\\n|\\r|\\n/);\n\t\t\tfor (let j = 0; j < split.length; j++) {\n\t\t\t\tif (j > 0) {\n\t\t\t\t\tlines.push((currentLine = []));\n\t\t\t\t}\n\n\t\t\t\tconst token1 = split[j];\n\t\t\t\tif (token1) {\n\t\t\t\t\tcurrentLine.push(token1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst split = splitLinesRec(wrapContent(token.content));\n\t\t\tif (split.length > 1) {\n\t\t\t\tfor (let j = 0; j < split.length; j++) {\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tlines.push((currentLine = []));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst line = split[j];\n\t\t\t\t\tif (line.length) {\n\t\t\t\t\t\tconst token1 = new Prism.Token(\n\t\t\t\t\t\t\ttoken.type,\n\t\t\t\t\t\t\tunwrapContent(line),\n\t\t\t\t\t\t\ttoken.alias,\n\t\t\t\t\t\t);\n\t\t\t\t\t\ttoken1.length = line.reduce((l, t) => l + t.length, 0);\n\t\t\t\t\t\tcurrentLine.push(token1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentLine.push(token);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lines;\n}\n\nfunction wrapContent(\n\tcontent: Array<Token | string> | Token | string,\n): Array<Token | string> {\n\treturn Array.isArray(content) ? content : [content];\n}\n\nfunction unwrapContent(\n\tcontent: Array<Token | string>,\n): Array<Token | string> | string {\n\tif (content.length === 0) {\n\t\treturn \"\";\n\t} else if (content.length === 1 && typeof content[0] === \"string\") {\n\t\treturn content[0];\n\t}\n\n\treturn content;\n}\n\nexport function splitLines(\n\ttokens: Array<Token | string>,\n): Array<Array<Token | string>> {\n\tconst lines = splitLinesRec(tokens);\n\t// Dealing with trailing newlines\n\tif (lines.length && !lines[lines.length - 1].length) {\n\t\tlines.pop();\n\t}\n\n\treturn lines;\n}\n\nfunction printTokens(tokens: Array<Token | string>): Array<Element | string> {\n\tconst result: Array<Element | string> = [];\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tconst token = tokens[i];\n\t\tif (typeof token === \"string\") {\n\t\t\tresult.push(token);\n\t\t} else {\n\t\t\tconst children = Array.isArray(token.content)\n\t\t\t\t? printTokens(token.content)\n\t\t\t\t: token.content;\n\t\t\tlet className = \"token \" + token.type;\n\t\t\tif (Array.isArray(token.alias)) {\n\t\t\t\tclassName += \" \" + token.alias.join(\" \");\n\t\t\t} else if (typeof token.alias === \"string\") {\n\t\t\t\tclassName += \" \" + token.alias;\n\t\t\t}\n\n\t\t\tresult.push(<span class={className}>{children}</span>);\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/*** Revise Logic ***/\nfunction checkpointEditHistoryBySelection(\n\tctx: Context,\n\teditHistory: EditHistory,\n): void {\n\tlet oldSelectionRange: SelectionRange | undefined;\n\tlet area: any;\n\n\tctx.addEventListener(\"contentchange\", () => {\n\t\toldSelectionRange = area.getSelectionRange();\n\t});\n\n\tconst onselectionchange = () => {\n\t\tif (!area) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newSelectionRange = area.getSelectionRange();\n\t\tif (\n\t\t\toldSelectionRange &&\n\t\t\t(oldSelectionRange.selectionStart !== newSelectionRange.selectionStart ||\n\t\t\t\toldSelectionRange.selectionEnd !== newSelectionRange.selectionEnd ||\n\t\t\t\toldSelectionRange.selectionDirection !==\n\t\t\t\t\tnewSelectionRange.selectionDirection)\n\t\t) {\n\t\t\teditHistory.checkpoint();\n\t\t}\n\n\t\toldSelectionRange = newSelectionRange;\n\t};\n\n\tctx.schedule((el: any) => {\n\t\tif (typeof document !== \"undefined\") {\n\t\t\tarea = el.querySelector(\"content-area\");\n\t\t}\n\t});\n\n\tif (typeof document !== \"undefined\") {\n\t\tdocument.addEventListener(\"selectionchange\", onselectionchange);\n\t\tctx.cleanup(() => {\n\t\t\tdocument.removeEventListener(\"selectionchange\", onselectionchange);\n\t\t});\n\t}\n}\n\nfunction selectionRangeFromEdit(edit: Edit): SelectionRange | undefined {\n\tconst operations = edit.operations();\n\tlet index = 0;\n\tlet start: number | undefined;\n\tlet end: number | undefined;\n\tfor (const op of operations) {\n\t\tswitch (op.type) {\n\t\t\tcase \"delete\": {\n\t\t\t\tif (start === undefined) {\n\t\t\t\t\tstart = index;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"insert\": {\n\t\t\t\tif (start === undefined) {\n\t\t\t\t\tstart = index;\n\t\t\t\t}\n\n\t\t\t\tindex += op.value.length;\n\t\t\t\tend = index;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"retain\": {\n\t\t\t\tindex += op.end - op.start;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (start !== undefined && end !== undefined) {\n\t\treturn {\n\t\t\tselectionStart: start,\n\t\t\tselectionEnd: end,\n\t\t\tselectionDirection: \"forward\",\n\t\t};\n\t} else if (start !== undefined) {\n\t\treturn {\n\t\t\tselectionStart: start,\n\t\t\tselectionEnd: start,\n\t\t\tselectionDirection: \"none\",\n\t\t};\n\t}\n\n\treturn undefined;\n}\n", "/** @jsx createElement */\n// TODO: This should go back into the revise repository at some point I guess.\nimport {createElement} from \"@b9g/crank/crank.js\";\nimport type {Context} from \"@b9g/crank/crank.js\";\nimport type {\n\tContentAreaElement,\n\tContentEvent,\n\tSelectionRange,\n} from \"@b9g/revise/contentarea.js\";\n\nexport interface ContentAreaProps {\n\tchildren: unknown;\n\tselectionRange?: SelectionRange | undefined;\n\tvalue?: string | undefined;\n\trenderSource?: string | undefined;\n}\n\nexport function* ContentArea(\n\tthis: Context<ContentAreaProps>,\n\t{value, children, selectionRange, renderSource}: ContentAreaProps,\n) {\n\tlet composing = false;\n\tthis.addEventListener(\"compositionstart\", () => {\n\t\tcomposing = true;\n\t});\n\n\tthis.addEventListener(\"compositionend\", () => {\n\t\tcomposing = false;\n\t\t// Refreshing synchronously seems to cause weird effects with\n\t\t// characters getting preserved in Korean (and probably other\n\t\t// languages).\n\t\tPromise.resolve().then(() => this.refresh());\n\t});\n\n\tlet oldSelectionRange: SelectionRange | undefined;\n\tfor ({\n\t\tvalue,\n\t\tchildren,\n\t\tselectionRange = oldSelectionRange,\n\t\trenderSource,\n\t} of this) {\n\t\tthis.flush((area) => {\n\t\t\tif (typeof renderSource === \"string\") {\n\t\t\t\tarea.source(renderSource);\n\t\t\t}\n\n\t\t\tif (typeof value === \"string\" && value !== area.value) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Expected value ${JSON.stringify(\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t)} but received ${JSON.stringify(area.value)} from the DOM`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectionRange) {\n\t\t\t\tarea.setSelectionRange(\n\t\t\t\t\tselectionRange.selectionStart,\n\t\t\t\t\tselectionRange.selectionEnd,\n\t\t\t\t\tselectionRange.selectionDirection,\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tconst area: ContentAreaElement = yield (\n\t\t\t<content-area c-static={composing}>{children}</content-area>\n\t\t);\n\n\t\toldSelectionRange = area.getSelectionRange();\n\t}\n}\n\ndeclare global {\n\tmodule Crank {\n\t\tinterface EventMap {\n\t\t\tcontentchange: ContentEvent;\n\t\t}\n\t}\n}\n", "import CJSImportProcessor from \"./CJSImportProcessor\";\nimport computeSourceMap, {} from \"./computeSourceMap\";\nimport {HelperManager} from \"./HelperManager\";\nimport identifyShadowedGlobals from \"./identifyShadowedGlobals\";\nimport NameManager from \"./NameManager\";\nimport {validateOptions} from \"./Options\";\nimport {parse} from \"./parser\";\n\nimport TokenProcessor from \"./TokenProcessor\";\nimport RootTransformer from \"./transformers/RootTransformer\";\nimport formatTokens from \"./util/formatTokens\";\nimport getTSImportedNames from \"./util/getTSImportedNames\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function getVersion() {\n  // eslint-disable-next-line\n  return require(\"../package.json\").version;\n}\n\nexport function transform(code, options) {\n  validateOptions(options);\n  try {\n    const sucraseContext = getSucraseContext(code, options);\n    const transformer = new RootTransformer(\n      sucraseContext,\n      options.transforms,\n      Boolean(options.enableLegacyBabel5ModuleInterop),\n      options,\n    );\n    let result = {code: transformer.transform()};\n    if (options.sourceMapOptions) {\n      if (!options.filePath) {\n        throw new Error(\"filePath must be specified when generating a source map.\");\n      }\n      result = {\n        ...result,\n        sourceMap: computeSourceMap(result.code, options.filePath, options.sourceMapOptions),\n      };\n    }\n    return result;\n  } catch (e) {\n    if (options.filePath) {\n      e.message = `Error transforming ${options.filePath}: ${e.message}`;\n    }\n    throw e;\n  }\n}\n\n/**\n * Return a string representation of the sucrase tokens, mostly useful for\n * diagnostic purposes.\n */\nexport function getFormattedTokens(code, options) {\n  const tokens = getSucraseContext(code, options).tokenProcessor.tokens;\n  return formatTokens(code, tokens);\n}\n\n/**\n * Call into the parser/tokenizer and do some further preprocessing:\n * - Come up with a set of used names so that we can assign new names.\n * - Preprocess all import/export statements so we know which globals we are interested in.\n * - Compute situations where any of those globals are shadowed.\n *\n * In the future, some of these preprocessing steps can be skipped based on what actual work is\n * being done.\n */\nfunction getSucraseContext(code, options) {\n  const isJSXEnabled = options.transforms.includes(\"jsx\");\n  const isTypeScriptEnabled = options.transforms.includes(\"typescript\");\n  const isFlowEnabled = options.transforms.includes(\"flow\");\n  const disableESTransforms = options.disableESTransforms === true;\n  const file = parse(code, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const tokens = file.tokens;\n  const scopes = file.scopes;\n\n  const nameManager = new NameManager(code, tokens);\n  const helperManager = new HelperManager(nameManager);\n  const tokenProcessor = new TokenProcessor(\n    code,\n    tokens,\n    isFlowEnabled,\n    disableESTransforms,\n    helperManager,\n  );\n  const enableLegacyTypeScriptModuleInterop = Boolean(options.enableLegacyTypeScriptModuleInterop);\n\n  let importProcessor = null;\n  if (options.transforms.includes(\"imports\")) {\n    importProcessor = new CJSImportProcessor(\n      nameManager,\n      tokenProcessor,\n      enableLegacyTypeScriptModuleInterop,\n      options,\n      options.transforms.includes(\"typescript\"),\n      helperManager,\n    );\n    importProcessor.preprocessTokens();\n    // We need to mark shadowed globals after processing imports so we know that the globals are,\n    // but before type-only import pruning, since that relies on shadowing information.\n    identifyShadowedGlobals(tokenProcessor, scopes, importProcessor.getGlobalNames());\n    if (options.transforms.includes(\"typescript\")) {\n      importProcessor.pruneTypeOnlyImports();\n    }\n  } else if (options.transforms.includes(\"typescript\")) {\n    identifyShadowedGlobals(tokenProcessor, scopes, getTSImportedNames(tokenProcessor));\n  }\n  return {tokenProcessor, scopes, nameManager, importProcessor, helperManager};\n}\n"],
  "mappings": "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;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAAA,eACJ,UAAU;AACb,mBAAO;AAA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AA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,UAAU,kBAAkB,aAAa;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEhJ,UAAU,kBAAkzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,UAAU,kBAAkzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,UAAU,kBAAkB,UAAU;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE7I;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,UAAU,kBAAkzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExG,QAAO,UAAU,UAAU,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExG,QAAO,UAAU,SAAS,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEvI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExG,QAAO,UAAU,UAAU,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAK;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,QAAO,UAAU,UAAU,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAExzG,QAAO,UAAU,UAAU,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,gBAAgB;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEnJ;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1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;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,YAAY;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE/I;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QA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I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEvkBAAkB,SAAS;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE5I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE5G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAA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AA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEtkBAAkB,SAAS;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE5I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QA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AAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,cAAc;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEjJ,UAAU,kBAAkB,OAAO;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,UAAU;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE7I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,QAAO,UAAU,QAAQ,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEtkBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,cAAc;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEjJ;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAEzG,QAAO,UAAU,QAAQ,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEtzG,QAAO,UAAU,SAAS,KAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEvI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9G,UAAU,kBAAkB,OAAO;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1I;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,aAAa;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEhkBAAkB,YAAY;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE/I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE5G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,cAAc;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEjJ,UAAU,kBAAkB,UAAU;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE7I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAE1G,UAAU,kBAAkB,aAAa;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAEhkBAAkB,YAAY;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;A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AAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAM;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE1G,UAAU,kBAAkB,WAAW;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAE9I;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA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",
  "names": []
}
